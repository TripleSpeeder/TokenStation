{"version":3,"sources":["modules/balance/balanceActions.js","modules/event/reducers/addressContractEventsByIdReducer.js","modules/event/eventActions.js","modules/token/tokenActions.js","modules/token/reducers/ListStateReducer.js","modules/token/reducers/TokensByIdReducer.js","modules/token/reducers/AllIdsReducer.js","modules/token/reducers/volatileTokensByIdReducer.js","modules/token/reducers/TrackedIdsReducer.js","utils/getWeb3.js","utils/promisifyWeb3.js","modules/web3/web3Actions.js","modules/token/reducers/SelectorReducer.js","modules/token/reducers/tokenReducer.js","utils/reducerUtils.js","modules/web3/web3Reducer.js","modules/address/addressActions.js","modules/address/reducers/addressByIdReducer.js","modules/address/reducers/allAddressIdsReducer.js","modules/address/reducers/addressSelectorReducer.js","modules/address/reducers/addressReducer.js","modules/balance/reducer/balanceByIdReducer.js","modules/balance/reducer/allBalancesReducer.js","modules/balance/reducer/positiveBalancesReducer.js","modules/balance/reducer/BalanceListStateReducer.js","modules/balance/reducer/balanceReducer.js","modules/event/reducers/eventByIdReducer.js","modules/event/reducers/allEventIdsReducer.js","modules/event/reducers/listStateReducer.js","modules/event/reducers/eventReducer.js","modules/modal/modalActions.js","modules/modal/modalReducer.js","store.js","modules/modal/TestModal.js","modules/forms/transferForm/TransferForm.js","modules/forms/transferForm/TransferFormContainer.js","modules/modal/ModalRoot.js","modules/balance/Balance.js","modules/common/AddressDisplay.js","modules/balance/BalanceItemDetail.js","modules/balance/BalanceItemDetailContainer.js","modules/balance/BalanceItem.js","modules/balance/BalanceItemContainer.js","modules/balance/BalancesList.js","modules/token/TokenListFilter.js","modules/token/TokenListFilterContainer.js","modules/screens/ScreenHeader.js","modules/segments/Overview.js","modules/segments/OverviewContainer.js","modules/web3/web3Info.js","modules/web3/web3Container.js","modules/segments/Sidebar.js","modules/address/AddressRow.js","modules/address/AddressContainer.js","modules/address/QueryAddressForm.js","modules/address/QueryAddressFormContainer.js","modules/address/AddressList.js","modules/address/AddressListContainer.js","modules/segments/Accounts.js","modules/token/SelectableToken.js","modules/token/SelectableTokenContainer.js","modules/token/SelectableTokenList.js","modules/token/SelectableTokenListContainer.js","modules/segments/TokenContracts.js","modules/event/EventFilterContainer.js","modules/event/EventLoader.js","modules/event/EventLoaderContainer.js","modules/common/TxHashDisplay.js","modules/event/TransferEvent.js","modules/event/TransferEventContainer.js","modules/event/TransferEventsList.js","modules/event/TransferEventsListContainer.js","modules/segments/Events.js","modules/segments/EventsContainer.js","modules/web3/NetworkWarning.js","modules/web3/NetworkWarningController.js","modules/layout/LayoutContainer.js","modules/common/ModalLoader.js","modules/token/TokenLoaderGate.js","modules/web3/web3Gate.js","modules/web3/web3GateContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["BALANCE_STATES","VIRGIN","LOADING","INITIALIZED","HYDRATED_WHILE_LOADING","SET_BALANCE","SET_BALANCE_STATE","CREATE_BALANCE_ENTRY","createBalanceEntry","balanceId","addressId","tokenId","type","payload","DELETE_BALANCE_ENTRY","CHANGE_BALANCE_FILTER_PROPS","setBalanceFilterString","filterString","dispatch","getState","searchString","toLowerCase","balanceIds","balance","positiveIds","length","filter","balanceEntry","byId","token","tokens","name","includes","symbol","address","matchedBalanceIds","setBalanceByAddressAndToken","buildBalanceId","undefined","setBalance","balanceStateChanged","balanceState","setBalanceState","reloadBalance","loadTokenBalance","clearTokenBalances","Object","values","forEach","ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL","buildAddressContractEventId","ADD_EVENTS","CHANGE_TRANSFEREVENTLIST_PAGE","CREATE_ACE_ENTRY","createAceEntry","ACE_ENTRIES_LOADING_CHANGE","aceEntriesLoadingChange","addressIds","isLoading","loadingFromBlock","loadingToBlock","loadingCurrentBlock","aceIds","map","ACE_ENTRIES_BLOCK_RANGE_CHANGE","aceEntriesBlockRangeChange","fromBlock","toBlock","SET_ACE_ENTRY_EVENT_IDS","CHANGE_EVENT_SCAN_PROPS","aceEntriesLoadingChangeWrapper","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","aceId","events","aceById","stop","this","_x","_x2","apply","arguments","addEventsThunk","aceIdsToSort","watchedAddressIds","addresses","allIds","transferEvent","_transferEvent$args","args","_from","_to","aceFromId","push","aceToId","addEvents","eventsById","eventIds","slice","sort","eventA","eventB","blockNumber","setAceEntryEventIds","buildEventId","event","transactionHash","logIndex","TOKEN_LIST_STATES","CHANGE_TOKEN_LIST_STATE","tokenListStateChanged","tokenListState","listState","ADD_TOKEN","addToken","tokenID","ADD_VOLATILE_TOKEN","IS_LOADING_TOKEN","loadingTokenChanged","SET_TOKEN_SUPPLY","IS_LOADING_SUPPLY","SET_TOKEN_CONTRACT_INSTANCE","setTokenContractInstance","contractInstance","SET_TOKEN_LOADING_PROMISE","CHANGE_SELECTOR_TOKENID","changeSelectorTokenId","selectedTokenId","CLEAR_TOKEN_LIST","clearTokenList","CHANGE_VALID_TOKEN_COUNT","CHANGE_FILTER_PROPS","RESET_DISPLAY_COUNT","CHANGE_TOKEN_TRACKING","changeTokenTracking","doTrack","CHANGE_TOKEN_LIST_PAGE","changeTokenListPage","activePage","setFilterProps","filterProps","showOnlyTracked","oldFilterString","oldShowOnlyTracked","filterIsActive","tokenIds","trackedIds","matchedTokenIds","changeFilterProps","mapListToken","listToken","id","decimals","Math","pow","description","website","imageUrl","supply","loading","instantiateTokenContract","loadingPromise","Promise","_ref2","_callee2","resolve","reject","web3","ERC20Contract","_context2","web3Instance","contract","abi","erc20ABI","setProvider","currentProvider","at","sent","_x3","_x4","setTokenLoadingPromise","loadMultiTokenBalances","tokenIDs","_ref4","_callee5","_context5","_ref5","_callee4","volatileToken","_context4","verifyContractInstance","volatileById","balanceOf","_x9","_x7","_x8","_callee8","_context9","abrupt","LISTSTATE_INITIAL","total","displayCount","TOKENS_BY_ID_INITIAL","ALL_TOKENS_INITIAL","VOLATILE_TOKENS_BY_ID_INITIAL","addTokenId","state","action","objectSpread","defineProperty","TRACKED_TOKENS_INITIAL","getWeb3","window","addEventListener","myWeb3","ethereum","Web3","console","log","error","promisify","syncGetters","db","eth","net","personal","shh","version","keys","group","method","indexOf","value","callbackToResolve","WEB3_STATES","UNINITIALIZED","ERROR","ETH_ENABLE_STATES","REJECTED","WAITING","GRANTED","SET_WEB3_STATE","setWeb3State","SET_ETH_ENABLE_STATE","setEthEnableState","ethEnableState","SET_WEB3INSTANCE","setWeb3Instance","SET_CURRENT_BLOCK","setCurrentBlock","block","SET_NETWORK","setNetwork","previousId","SET_NODE_VERSION","setNodeVersion","nodeVersion","SET_BLOCK_FILTER","setBlockFilter","blockFilter","stopBlockFilter","stopWatching","result","getNetworkName","networkId","network","SELECTOR_INITIAL","selctedTokenId","combineReducers","count","changeValidTokenCount","resetDisplayCount","tokenListPageChanged","addTokenEntry","setTokenSupply","loadingSupplyChanged","newEventIds","transferEventId","warn","concat","addTransferEvents","trackedIndex","selector","updateObject","oldObject","newValues","assign","WEB3_INITIAL","number","timestamp","ADDRESS_TYPE_EXTERNAL","ADDRESS_TYPE_OWNED","ADDRESS_BALANCES_STATES","CHANGE_ADDRESS_BALANCES_STATE","ADD_ADDRESS","REMOVE_ADDRESS","CHANGE_ADDRESS_TYPE","changeAddressType","newType","batchGetBalances","startIndex","recursionCount","diff","index","performance","now","requestAnimationFrame","addressBalancesState","addressBalancesStateChanged","addNewAddress","addAddress","CHANGE_SELECTOR_ADDRESSID","changeSelectorAddressId","selectedAddressId","ADDRESS_BY_ID_INITIAL","ALL_ADDRESSES_INITIAL","balancesState","addAddressEntry","newState","removeAddressEntry","addressEntry","changeAddressBalancesState","addAddressId","entryId","removeAddressId","BALANCE_BY_ID_INITIAL","ALL_BALANCES_INITIAL","POSITIVE_BALANCES_INITIAL","BALANCE_LISTSTATE_INITIAL","BigNumber","deleteBalanceEntry","splice","isZero","entry","greaterThan","changeBalanceFilterProps","EVENT_BY_ID_INITIAL","ALL_EVENTS_INITIAL","currentChunk","maxChunks","addEventIds","acesId","firstBlock","lastBlock","aceEntry","min","max","transferEventListPageChanged","_payload$props","props","changeEventScanProps","resetPager","SHOW_MODAL","HIDE_MODAL","MODAL_INITIAL","modalType","modalProps","addressesTransform","createTransform","inboundState","outboundState","newAddressState","whitelist","tokensConfig","key","storage","transforms","reducer","persistReducer","modal","showModal","rootConfig","blacklist","persistedReducer","logger","createLogger","TestModal","closeModal","react_default","createElement","Modal","open","onClose","Header","Content","Description","defaultProps","TransferForm","onValidSubmit","fromAddress","tokenName","tokenSymbol","tokenBalance","etherBalance","gasCosts","errorLabel","Label","color","pointing","addValidationRule","isAddress","bnValue","toBigNumber","bnMax","lessThanOrEqualTo","err","size","closeIcon","formsy_semantic_ui_react_lib","noValidate","Segment","Grid","columns","Row","Column","width","List","Item","toFixed","Group","placeholder","required","instantValidation","validations","validationErrors","isEthereumAddress","isDefaultRequiredValue","label","labelPosition","isNumeric","isLessThanOrEqual","readOnly","Button","content","TransferFormContainer","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","formData","alert","JSON","stringify","amount","toAddressValid","amountValid","rateValid","_this$props","transferForm_TransferForm","Component","MODAL_COMPONENTS","TEST_MODAL","TRANSFER_FORM_CONTAINER","connect","ownProps","tokenBalanceId","dividedBy","transferToken","_ref7","_callee7","_context8","_x15","_x16","ModalRoot","SpecificModal","Balance","numDecimals","trigger","Popup","dp","AddressDisplay","ensName","BalanceItemDetail","url","Table","Cell","Link","to","common_AddressDisplay","balance_Balance","circular","icon","onClick","BalanceItemDetailContainer","balance_BalanceItemDetail","addressType","openTransferModal","BalanceItem","tableBody","expanded","tokenBalances","tokenEventsLinkOptions","toggleCollapse","eventLink","tableHeader","HeaderCell","Statistic","Value","Body","balance_BalanceItemDetailContainer","compact","BalanceItemContainer","bind","assertThisInitialized","_this2","setState","balance_BalanceItem","_","reduce","sum","plus","pathname","BalancesList","entries","balancesByToken","balance_BalanceItemContainer","TokenListFilter","handleChange","clearFilter","Icon","link","Input","onChange","fluid","TokenListFilterContainer","e","setFilterString","token_TokenListFilter","displayed","target","ScreenHeader","title","as","inverted","textAlign","style","marginTop","Overview","body","hasAccounts","balance_BalancesList","Message","Fragment","screens_ScreenHeader","token_TokenListFilterContainer","Divider","OverviewContainer","segments_Overview","balanceEntries","groupBy","Web3Info","gitHub","srcUrl","href","rel","Web3Container","apiVersion","api","web3Info","Sidebar","Menu","vertical","header","NavLink","AddressRow","iconName","popupContent","removeButton","handleRemove","collapsing","AddressContainer","removeAddress","resumedAfterRehydrate","checkResumeLoading","newProps","resumeGetBalances","progressCurrent","address_AddressRow","PureComponent","progressTotal","QueryAddressForm","handleSubmit","valid","Form","onSubmit","inline","disabled","QueryAddressFormContainer","test","address_QueryAddressForm","AddressList","ownTable","watchTable","ethEnable","waitingGrant","ownAddressIds","basic","selectable","address_AddressContainer","primary","watchAddressIds","dividing","address_QueryAddressFormContainer","AddressListContainer","updateWeb3Accounts","requestEthEnable","checkAccountTimer","address_AddressList","initAccounts","clearInterval","isMetaMask","setInterval","getAccounts","accounts","changeOwnAddresses","addressesById","newAccounts","account","existingAddress","enable","t0","_x5","_x6","Accounts","address_AddressListContainer","SelectableToken","checked","Checkbox","SelectableTokenContainer","data","token_SelectableToken","tokenAddress","tokenTracked","tracked","changeTokenTrackingThunk","SelectableTokenList","tokenList","celled","token_SelectableTokenContainer","negative","items","SelectableTokenListContainer","handleShowOnlyTrackedChange","handlePaginationChange","handleLoadTokens","setShowTracked","setTokenListPage","pager","totalPages","Container","Pagination","onPageChange","verticalAlign","divided","toggle","Dropdown","text","token_SelectableTokenList","numVisibleTokens","ceil","sliceStart","TokenContracts","info","token_SelectableTokenListContainer","EventFilterContainer","tokenOptions","onTokenSelect","addressOptions","onAddressSelect","Field","search","selection","options","b","EventLoader","resultCount","resultFromBlock","resultToBlock","onLoadMore","canLoadMore","button","warning","EventLoaderContainer","loadMoreEvents","checkEventsLoaded","rangeEnd","currentBlock","rangeStart","loadTokenTransferEvents","resultFromBlockDate","event_EventLoader","hasAceEntry","Boolean","_ref6","_callee6","chunkSize","maxEvents","numEvents","_loop","_context7","currentFromBlock","currentToBlock","transferEventsFrom","transferEventsTo","eventPromises","loggedEvents","foundEvents","_context6","Transfer","get","all","delegateYield","_x10","_x11","TxHashDisplay","txHash","shortHash","TRANSFER_EVENT_TYPES","TransferEvent","from","fromENS","toENS","quantity","positive","rowSpan","common_TxHashDisplay","TransferEventContainer","event_TransferEvent","rawEvent","_value","TransferEventsList","colSpan","transferEventIds","event_TransferEventContainer","TransferEventsListContainer","setTransferEventListPage","aceEventIds","event_TransferEventsList","changeTransferEventListPage","Events","event_EventFilterContainer","event_EventLoaderContainer","event_TransferEventsListContainer","EventsContainer","mapRouteParamsToState","segments_Events","match","params","setSelectedToken","setSelectedAddress","NetworkWarning","networkName","NetworkWarningController","web3_NetworkWarning","LayoutContainer","padded","web3_NetworkWarningController","segments_Sidebar","Switch","Route","exact","path","component","location","web3Container","ModalLoader","TokenLoaderGate","tokenListUrl","loadTokenList","Children","only","children","common_ModalLoader","response","jsonTokens","allTokenIds","existingTrackedTokens","fetch","json","toUpperCase","Web3Gate","onRetry","Web3GateContainer","initialize","web3Gate","_callee3","networkIdString","networkID","_context3","getNodePromise","getNetworkPromise","parseInt","getBlockPromise","watch","_ref3","blockHash","_block","oldNetworkId","_network","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","configureStore","App","es","integration_react","web3GateContainer","token_TokenLoaderGate","BrowserRouter","modal_ModalRoot","layout_LayoutContainer","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.34788139.chunk.js","sourcesContent":["import {loadTokenBalance} from '../token/tokenActions'\n\nexport const BALANCE_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    HYDRATED_WHILE_LOADING: 'hydrated_while_loading'\n}\n\nexport const SET_BALANCE = 'SET_BALANCE'\nexport function setBalance(balanceId, balance) {\n    return {\n        type: SET_BALANCE,\n        payload: {\n            balanceId,\n            balance,\n        }\n    }\n}\n\nexport const SET_BALANCE_STATE = 'SET_BALANCE_STATE'\nexport function setBalanceState(balanceId, balanceState) {\n    return {\n        type: SET_BALANCE_STATE,\n        payload: {\n            balanceId,\n            balanceState,\n        }\n    }\n}\n\nexport const CREATE_BALANCE_ENTRY = 'CREATE_BALANCE_ENTRY'\nexport function createBalanceEntry(balanceId, addressId, tokenId) {\n    return {\n        type: CREATE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const DELETE_BALANCE_ENTRY = 'DELETE_BALANCE_ENTRY'\nexport function deleteBalanceEntry(balanceId) {\n    return {\n        type: DELETE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n        }\n    }\n}\n\nexport const CHANGE_BALANCE_FILTER_PROPS = 'CHANGE_BALANCE_FILTER_PROPS'\nexport function changeBalanceFilterProps(filter, matchedBalanceIds) {\n    return {\n        type: CHANGE_BALANCE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedBalanceIds\n        }\n    }\n}\n\nexport function setBalanceFilterString(filterString) {\n    return (dispatch, getState) => {\n        // Filter balance list based on filterstring. Look at\n        const searchString = filterString.toLowerCase()\n\n        // Default: Show all positive balances\n        let balanceIds = getState().balance.positiveIds\n\n        // If a searchstring is provided, filter balanceIds\n        if (searchString.length) {\n            balanceIds = balanceIds.filter(balanceId => {\n                const balanceEntry = getState().balance.byId[balanceId]\n                const token = getState().tokens.byId[balanceEntry.tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n        dispatch(changeBalanceFilterProps(searchString, balanceIds))\n    }\n}\n\n\nexport function setBalanceByAddressAndToken(addressId, tokenId, balance) {\n    return(dispatch, getState) => {\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set balance\n        dispatch(setBalance(balanceId, balance))\n    }\n}\n\nexport function balanceStateChanged(tokenId, addressId, balanceState) {\n    return(dispatch, getState) => {\n        // obtain balanceID\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set loading state\n        dispatch(setBalanceState(balanceId, balanceState))\n    }\n}\n\nexport function reloadBalance(balanceId) {\n    return (dispatch, getState) => {\n        const balance = getState().balance.byId[balanceId]\n        dispatch(loadTokenBalance(balance.tokenId, balance.addressId))\n    }\n}\n\nexport function clearTokenBalances(tokenId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.tokenId === tokenId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function buildBalanceId(addressId, tokenId) {\n    return (addressId + '-' + tokenId)\n}\n","import {\n    ACE_ENTRIES_BLOCK_RANGE_CHANGE, ACE_ENTRIES_LOADING_CHANGE, ADD_EVENTS, buildEventId,\n    CREATE_ACE_ENTRY, SET_ACE_ENTRY_EVENT_IDS\n} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\n/*\nPurpose: Store list of transfer events involving certain address\nand certain token contract.\nKeeps track of the block range already queried from web3 (firstBlock, lastBlock),\nso i can easily extend checked block range or refresh if outdated.\n */\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {\n    0xabc123-12: {\n        acesId: '0xabc123-12',    // <addressId>-<tokenId>\n        addressId: '0xabc123',\n        tokenId: 12\n        loading: false,\n        firstBlock: 0,\n        lastBlock: 0,\n        loadingFromBlock: 0,\n        loadingToBlock: 0,\n        loadingCurrentBlock: 0,\n        eventIds: [],\n    },\n}\n*/\n\nfunction clearAceEntries() {\n    return ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL\n}\n\nfunction createAceEntry(state, action) {\n    const {payload} = action\n    const {addressId, tokenId} = payload\n    const acesId = buildAddressContractEventId(addressId, tokenId)\n    return {\n        ...state,\n        [acesId] : {\n            acesId,\n            addressId,\n            tokenId,\n            isLoading: false,\n            firstBlock: 0,\n            lastBlock: 0,\n            eventIds: [],\n            loadingFromBlock: 0,\n            loadingToBlock: 0,\n            loadingCurrentBlock: 0,\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new events to the address, if it is \"to\" or \"from\"\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    const newState = {...state}\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        const {_from, _to} = transferEvent.args\n        const aceFromId = buildAddressContractEventId(_from, tokenId)\n        const aceToId = buildAddressContractEventId(_to, tokenId)\n        const aceIds = [aceToId, aceFromId]\n        aceIds.forEach(aceId => {\n            // only add event if an according aceEntry is existing!\n            if (newState[aceId]) {\n                // prevent duplicate eventID entries\n                    if (newState[aceId].eventIds.includes(transferEventId)) {\n                        console.warn(\"Ignoring duplicate event \" + transferEventId)\n                        return\n                    }\n                newState[aceId].eventIds = newState[aceId].eventIds.concat(transferEventId)\n            }\n        })\n    })\n    return newState\n}\n\nfunction aceEntriesLoadingChange(state, action) {\n    const {payload} = action\n    const {aceIds, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            newState[aceId] = {\n                ...aceEntry,\n                isLoading,\n                loadingFromBlock,\n                loadingToBlock,\n                loadingCurrentBlock,\n            }\n        }\n    })\n    return newState\n}\n\nfunction aceEntriesBlockRangeChange(state, action) {\n    const {payload} = action\n    const {aceIds, fromBlock, toBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            // update checked block range\n            if (aceEntry.firstBlock === 0) {\n                aceEntry.firstBlock = fromBlock\n            } else {\n                aceEntry.firstBlock = Math.min(fromBlock, aceEntry.firstBlock)\n            }\n            if (aceEntry.lastBlock === 0) {\n                aceEntry.lastBlock = toBlock\n            } else {\n                aceEntry.lastBlock = Math.max(toBlock, aceEntry.lastBlock)\n            }\n            newState[aceId] = aceEntry\n        }\n    })\n    return newState\n}\n\nfunction setAceEntryEventIds(state, action) {\n    const {payload} = action\n    const {aceId, eventIds} = payload\n\n    return {\n        ...state,\n        [aceId]: {\n            ...state[aceId],\n            eventIds\n        }\n    }\n}\n\nexport const addressContractEventsByIdReducer = (state=ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_ACE_ENTRY:\n            return createAceEntry(state, action)\n        case ADD_EVENTS:\n            return addTransferEvents(state, action)\n        case ACE_ENTRIES_LOADING_CHANGE:\n            return aceEntriesLoadingChange(state, action)\n        case ACE_ENTRIES_BLOCK_RANGE_CHANGE:\n            return aceEntriesBlockRangeChange(state, action)\n        case SET_ACE_ENTRY_EVENT_IDS:\n            return setAceEntryEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearAceEntries()\n        default:\n    }\n    return state;\n}\n\n\nexport function buildAddressContractEventId(addressId, tokenId) {\n    return ''+addressId.toLowerCase()+'-'+tokenId\n}\n","import {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\n\nexport const ADD_EVENTS = 'ADD_EVENTS'\nexport function addEvents(events, tokenId) {\n    return {\n        type: ADD_EVENTS,\n        payload: {\n            events,\n            tokenId,\n        }\n    }\n}\n\nexport const CHANGE_TRANSFEREVENTLIST_PAGE = 'CHANGE_TRANSFEREVENTLIST_PAGE'\nexport function changeTransferEventListPage(activePage) {\n    return {\n        type: CHANGE_TRANSFEREVENTLIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\n\nexport const CREATE_ACE_ENTRY = 'CREATE_ACE_ENTRY'\nexport function createAceEntry(addressId, tokenId) {\n    return {\n        type: CREATE_ACE_ENTRY,\n        payload: {\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const ACE_ENTRIES_LOADING_CHANGE = 'ACE_ENTRIES_LOADING_CHANGE'\nexport function aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_LOADING_CHANGE,\n        payload: {\n            aceIds,\n            isLoading,\n            loadingFromBlock,\n            loadingToBlock,\n            loadingCurrentBlock,\n        }\n    }\n}\n\nexport const ACE_ENTRIES_BLOCK_RANGE_CHANGE = 'ACE_ENTRIES_BLOCK_RANGE_CHANGE'\nexport function aceEntriesBlockRangeChange(addressIds, tokenId, fromBlock, toBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_BLOCK_RANGE_CHANGE,\n        payload: {\n            aceIds,\n            fromBlock,\n            toBlock,\n        }\n    }\n}\n\nexport const SET_ACE_ENTRY_EVENT_IDS = 'SET_ACE_ENTRY_EVENT_IDS'\nexport function setAceEntryEventIds(aceId, eventIds) {\n    return {\n        type: SET_ACE_ENTRY_EVENT_IDS,\n        payload: {\n            aceId,\n            eventIds\n        }\n    }\n}\n\nexport const CHANGE_EVENT_SCAN_PROPS = 'CHANGE_EVENT_SCAN_PROPS'\nexport function changeEventScanProps(props) {\n    return {\n        type: CHANGE_EVENT_SCAN_PROPS,\n        payload: {\n            props,\n        }\n    }\n}\n\nexport function aceEntriesLoadingChangeWrapper(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    return async (dispatch, getState) => {\n        addressIds.forEach(addressId => {\n            const aceId = buildAddressContractEventId(addressId, tokenId)\n            if (getState().events.aceById[aceId] === undefined) {\n                // create a new entry for this token and address\n                dispatch(createAceEntry(addressId, tokenId))\n            }\n        })\n        dispatch(aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock))\n    }\n}\n\nexport function addEventsThunk(events, tokenId, fromBlock, toBlock) {\n    return (dispatch, getState) => {\n        // Make sure that there are AddressContractEvent entries\n        // for all events and to/from addresses\n        let aceIdsToSort = []\n        const watchedAddressIds = getState().addresses.allIds\n        events.forEach(transferEvent => {\n            const {_from, _to} = transferEvent.args\n            // TODO: Collect all new entries and just dispatch one batch event\n            if (watchedAddressIds.includes(_from.toLowerCase())) {\n                const aceFromId = buildAddressContractEventId(_from, tokenId)\n                aceIdsToSort.push(aceFromId)\n                if (getState().events.aceById[aceFromId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_from, tokenId))\n                }\n            }\n            if (watchedAddressIds.includes(_to.toLowerCase())) {\n                const aceToId = buildAddressContractEventId(_to, tokenId)\n                aceIdsToSort.push(aceToId)\n                if (getState().events.aceById[aceToId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_to, tokenId))\n                }\n            }\n        })\n        // now it's safe to do the actual dispatch of addEvents\n        dispatch(addEvents(events, tokenId, fromBlock, toBlock))\n        // finally re-sort eventIds of all changed aceIds\n        dispatch(sortEventsThunk(aceIdsToSort))\n    }\n}\n\nexport function sortEventsThunk(aceIds) {\n    return (dispatch, getState) => {\n        const eventsById = getState().events.byId\n        // sort eventIds of provided ace entries based on the blockheight they appeared at\n        aceIds.forEach(aceId => {\n            // sort eventIds based on blockheight\n            // use .slice() to work on a copy of the eventIds array, otherwise i would mutate current state...\n            let eventIds = getState().events.aceById[aceId].eventIds.slice().sort((eventA, eventB) => {\n                return eventsById[eventB].transferEvent.blockNumber - eventsById[eventA].transferEvent.blockNumber\n            })\n            // set new eventIds array via dedicated action\n            dispatch(setAceEntryEventIds(aceId, eventIds))\n        })\n    }\n}\n\nexport function buildEventId(event) {\n    return '' + event.transactionHash + '-' + event.logIndex\n}\n","import contract from 'truffle-contract'\nimport erc20ABI from 'human-standard-token-abi'\nimport {\n    BALANCE_STATES,\n    balanceStateChanged,\n    clearTokenBalances,\n    setBalanceByAddressAndToken\n} from '../balance/balanceActions'\nimport {\n    aceEntriesBlockRangeChange, aceEntriesLoadingChange, aceEntriesLoadingChangeWrapper,\n    addEventsThunk, changeEventScanProps\n} from '../event/eventActions'\n\nexport const TOKEN_LIST_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized'\n}\n\nexport const CHANGE_TOKEN_LIST_STATE = 'IS_LOADING_TOKEN_LIST'\nexport function tokenListStateChanged(tokenListState) {\n    return {\n        type: CHANGE_TOKEN_LIST_STATE,\n        payload: {\n            listState: tokenListState\n        }\n    }\n}\n\nexport const ADD_TOKEN = 'ADD_TOKEN'\nexport function addToken(tokenID, token) {\n    return {\n        type: ADD_TOKEN,\n        payload: {\n            tokenID,\n            token\n        }\n    }\n}\n\nexport const ADD_VOLATILE_TOKEN = 'ADD_VOLATILE_TOKEN'\nexport function addVolatileToken(tokenID) {\n    return {\n        type: ADD_VOLATILE_TOKEN,\n        payload: {\n            tokenID,\n        }\n    }\n}\n\n\nexport const IS_LOADING_TOKEN = 'IS_LOADING_TOKEN'\nexport function loadingTokenChanged(tokenID, isLoading) {\n    return {\n        type: IS_LOADING_TOKEN,\n        payload: {\n            tokenID,\n            isLoading\n        }\n    }\n}\n\nexport const SET_TOKEN_SUPPLY = 'SET_TOKEN_SUPPLY'\nexport function setTokenSupply(tokenID, supply) {\n    return {\n        type: SET_TOKEN_SUPPLY,\n        payload: {\n            tokenID,\n            supply,\n        }\n    }\n}\n\nexport const IS_LOADING_SUPPLY = 'IS_LOADING_SUPPLY'\nexport function loadingSupplyChanged(tokenID, isLoading) {\n    return {\n        type: IS_LOADING_SUPPLY,\n        payload: {\n            tokenID,\n            isLoading\n        }\n    }\n}\n\nexport const SET_TOKEN_CONTRACT_INSTANCE = 'SET_TOKEN_CONTRACT_INSTANCE'\nexport function setTokenContractInstance(tokenID, contractInstance) {\n    return {\n        type: SET_TOKEN_CONTRACT_INSTANCE,\n        payload: {\n            tokenID,\n            contractInstance\n        }\n    }\n}\n\nexport const SET_TOKEN_LOADING_PROMISE = 'SET_TOKEN_LOADING_PROMISE'\nexport function setTokenLoadingPromise(tokenID, loadingPromise) {\n    return {\n        type: SET_TOKEN_LOADING_PROMISE,\n        payload: {\n            tokenID,\n            loadingPromise\n        }\n    }\n}\n\nexport const CHANGE_SELECTOR_TOKENID = 'CHANGE_SELECTOR_TOKENID'\nexport function changeSelectorTokenId(selectedTokenId) {\n    return {\n        type: CHANGE_SELECTOR_TOKENID,\n        payload: {\n            selectedTokenId,\n        }\n    }\n}\n\nexport const CLEAR_TOKEN_LIST = 'CLEAR_TOKEN_LIST'\nexport function clearTokenList() {\n    return {\n        type: CLEAR_TOKEN_LIST,\n    }\n}\n\nexport const CHANGE_VALID_TOKEN_COUNT = 'CHANGE_VALID_TOKEN_COUNT'\nexport function changeValidTokenCount(count) {\n    return {\n        type: CHANGE_VALID_TOKEN_COUNT,\n        payload: {\n            count\n        }\n    }\n}\n\nexport const CHANGE_FILTER_PROPS = 'CHANGE_FILTER_PROPS'\nexport function changeFilterProps(filter, matchedTokenIds, showOnlyTracked, filterIsActive) {\n    return {\n        type: CHANGE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedTokenIds,\n            showOnlyTracked,\n            filterIsActive,\n        }\n    }\n}\n\nexport const RESET_DISPLAY_COUNT = 'RESET_DISPLAY_COUNT'\nexport function resetDisplayCount() {\n    return {\n        type: RESET_DISPLAY_COUNT,\n    }\n}\n\nexport const CHANGE_TOKEN_TRACKING = 'CHANGE_TOKEN_TRACKING'\nexport function changeTokenTracking(tokenId, doTrack) {\n    return {\n        type: CHANGE_TOKEN_TRACKING,\n        payload: {\n            tokenId,\n            doTrack,\n        }\n    }\n}\n\nexport const CHANGE_TOKEN_LIST_PAGE = 'CHANGE_TOKENLIST_PAGE'\nexport function changeTokenListPage(activePage) {\n    return {\n        type: CHANGE_TOKEN_LIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\nexport function changeTokenTrackingThunk(tokenId, doTrack) {\n    return (dispatch, getState) => {\n        dispatch(changeTokenTracking(tokenId, doTrack))\n        // if I start tracking a token, start getting balances right away\n        if (doTrack) {\n            getState().addresses.allIds.forEach(addressId => {\n                    dispatch(loadTokenBalance(tokenId, addressId))\n                }\n            )\n        } else {\n            // If I stop tracking a token, also clear all balances for it\n            dispatch(clearTokenBalances(tokenId))\n        }\n    }\n}\n\nexport function setFilterProps(filterProps) {\n    return (dispatch, getState) => {\n\n        let {filterString, showOnlyTracked} = filterProps\n        const oldFilterString = getState().tokens.listState.filter.toLowerCase()\n        const oldShowOnlyTracked = getState().tokens.listState.showOnlyTracked\n        if (filterString === undefined) {\n            filterString = oldFilterString\n        }\n        if (showOnlyTracked === undefined) {\n            showOnlyTracked = oldShowOnlyTracked\n        }\n\n        // Filter token list based on filterstring and show tracked only/all\n        const searchString = filterString.toLowerCase()\n        const filterIsActive = ((searchString.length > 0) || showOnlyTracked)\n        const filterChanged = ((oldFilterString !== searchString) || (oldShowOnlyTracked !== showOnlyTracked))\n\n        if (filterChanged) {\n            // in case filter props changed, reset the number of displayed tokens to it's default value and set\n            // default page\n            dispatch(resetDisplayCount())\n            dispatch(changeTokenListPage(1))\n        }\n\n        // start with all tokens\n        let tokenIds = getState().tokens.allIds\n\n        // filter by tracked status\n        if (showOnlyTracked) {\n            // get all tokens that are being tracked\n            tokenIds = getState().tokens.trackedIds\n        }\n\n        // filter by search string\n        if (searchString.length) {\n            tokenIds = tokenIds.filter(tokenId => {\n                const token = getState().tokens.byId[tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n\n        dispatch(changeFilterProps(searchString, tokenIds, showOnlyTracked, filterIsActive))\n    }\n}\n\n\nexport function loadTokenList(url) {\n    return async (dispatch, getState) => {\n        // clear existing tokens\n        dispatch(clearTokenList())\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.LOADING))\n        // fetch json file from url\n        const response = await fetch(url)\n        // parse json\n        const jsonTokens = await response.json()\n        // sort token list alphabetically\n        jsonTokens.sort((a, b) => ( (a.name.toUpperCase() < b.name.toUpperCase()) ? -1 : 1))\n\n        // set total number of tokens (for loading progress)\n        dispatch(changeValidTokenCount(jsonTokens.length))\n\n        // Check if there is currently a filter set\n        const filterIsActive = (getState().tokens.listState.filterIsActive)\n        // add tokens\n        jsonTokens.forEach((listToken) => {\n            const token = mapListToken(listToken)\n            dispatch(addToken(token.address, token))\n        })\n        // if there is already a filter set, re-evaluate the filter results\n        if (filterIsActive) {\n            dispatch(setFilterProps({}))\n        }\n\n        // Crosscheck tokens with currently tracked tokens\n        const allTokenIds = getState().tokens.allIds\n        const existingTrackedTokens = getState().tokens.trackedIds.filter(tokenId => {\n            return (allTokenIds.indexOf(tokenId) > -1)\n        })\n        // load balances for tracked tokens\n        if (existingTrackedTokens.length) {\n            getState().addresses.allIds.forEach(addressId => {\n                    dispatch(loadMultiTokenBalances(existingTrackedTokens, addressId))\n                }\n            )\n        }\n        // stop tracking non-existing tokens\n        const trackedTokensToRemove = getState().tokens.trackedIds.filter(tokenId => {\n            return (existingTrackedTokens.indexOf(tokenId) === -1)\n        })\n        trackedTokensToRemove.forEach(tokenId => {\n            dispatch(changeTokenTracking(tokenId, false))\n        })\n\n        // Finished loading\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.INITIALIZED))\n    }\n}\n\nfunction mapListToken(listToken) {\n    return {\n        id: listToken['address'],\n        address: listToken['address'],\n        symbol: listToken['symbol'],\n        decimals: Math.pow(10, listToken['decimals']),\n        name: listToken['name'],\n        description: null,\n        website: listToken['website'],\n        imageUrl: null,\n\n        supply: {\n            loading: false,\n            supply: undefined\n        },\n        balance: undefined,\n        eventIds: [],\n        loading: false,\n    }\n}\n\nexport function instantiateTokenContract(tokenID) {\n    return (dispatch, getState) => {\n        // create promise that resolves as soon as the contract is instantiated.\n        const loadingPromise = new Promise(\n            async function(resolve, reject) {\n                // indicate we are loading the token\n                dispatch(loadingTokenChanged(tokenID, true))\n                // create token contract instance and store it for later use in state\n                const token = getState().tokens.byId[tokenID]\n                const {web3} = getState().web3Instance\n                const ERC20Contract = contract({abi: erc20ABI})\n                ERC20Contract.setProvider(web3.currentProvider)\n                const contractInstance = await ERC20Contract.at(token.address)\n                dispatch(setTokenContractInstance(tokenID, contractInstance))\n                // indicate we finished loading the token\n                dispatch(loadingTokenChanged(tokenID, false))\n                // finally resolve loading promise\n                resolve()\n            }\n        )\n        dispatch(setTokenLoadingPromise(tokenID, loadingPromise))\n    }\n}\n\nexport function loadTokenSupply(tokenID) {\n    return async (dispatch, getState) => {\n        dispatch(loadingSupplyChanged(tokenID, true))\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const volatileToken = getState().tokens.volatileById[tokenID]\n        // obtain token contract instance from state\n        const contractInstance = volatileToken.contractInstance\n        const supply = await contractInstance.totalSupply()\n        dispatch(setTokenSupply(tokenID, supply))\n        dispatch(loadingSupplyChanged(tokenID, false))\n    }\n}\n\nexport function loadTokenBalance(tokenID, addressId) {\n    return loadMultiTokenBalances([tokenID], addressId)\n}\n\nexport function loadMultiTokenBalances(tokenIDs, addressId) {\n    return async (dispatch, getState) => {\n        tokenIDs.forEach(async tokenId => {\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.LOADING))\n            await verifyContractInstance(tokenId, dispatch, getState)\n            const volatileToken = getState().tokens.volatileById[tokenId]\n            const address = getState().addresses.byId[addressId].address\n            const balance = await volatileToken.contractInstance.balanceOf(address)\n            dispatch(setBalanceByAddressAndToken(addressId, tokenId, balance))\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.INITIALIZED))\n        })\n    }\n}\n\nexport function loadTokenTransferEvents(tokenID, fromBlock, toBlock, addresses) {\n    return async (dispatch, getState) => {\n        const chunkSize = 100\n        const maxChunks = 100\n        const maxEvents = 50\n\n        let currentChunk = 1\n        let numEvents = 0\n\n        // if no from/toblock are provided, use default values\n        if (fromBlock === 0)\n            fromBlock = getState().web3Instance.block.number - (chunkSize * maxChunks)\n        if (toBlock === 0)\n            toBlock = getState().web3Instance.block.number\n\n        dispatch(aceEntriesLoadingChangeWrapper(addresses, tokenID, true, fromBlock, toBlock, fromBlock))\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\n\n        while ((currentChunk <= maxChunks) && (numEvents <= maxEvents)) {\n            // calculate fromBlock for current chunk\n            let currentFromBlock = fromBlock + ((currentChunk-1) * chunkSize)\n            // calculate toBlock for current chunk\n            let currentToBlock = currentFromBlock + chunkSize\n\n            // update progress info\n            dispatch(changeEventScanProps({\n                tokenID,\n                addresses,\n                numEvents,\n                currentChunk,\n                maxEvents,\n                maxChunks,\n                fromBlock,\n                toBlock,\n                state: 'scanning'\n            }))\n\n            // obtain events for this chunk\n            // console.log(\"Calling 'Transfer' from \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\n            const transferEventsFrom = contractInstance.Transfer(\n                {\n                    // These are the standard ERC20 Transfer event fields\n                    _from: addresses,    // addresses sending token\n                    _to: null,      // addresses receiving token\n                },\n                {\n                    fromBlock: currentFromBlock,\n                    toBlock: currentToBlock,\n                }\n            )\n            //console.log(\"Calling 'Transfer' to \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\n            const transferEventsTo = contractInstance.Transfer(\n                {\n                    // These are the standard ERC20 Transfer event fields\n                    _from: null,    // addresses sending token\n                    _to: addresses,      // addresses receiving token\n                },\n                {\n                    fromBlock: currentFromBlock,\n                    toBlock: currentToBlock,\n                }\n            )\n\n            // Wrap this into promise and await it, otherwise loading:false action will be dispatched too early!\n            let eventPromises = []\n            eventPromises.push(new Promise((resolve, reject) => {\n                transferEventsFrom.get(function (error, events) {\n                    if (error) {\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\n                    } else {\n                        // console.log(\"Found \" + events.length + \" 'from' Events: \" + events)\n                        if (events.length) {\n                            dispatch(addEventsThunk(events, tokenID))\n                        }\n                        resolve(events.length)\n                    }\n                })\n            }))\n            eventPromises.push(new Promise((resolve, reject) => {\n                transferEventsTo.get(function (error, events) {\n                    if (error) {\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\n                    } else {\n                        //console.log(\"Found \" + events.length + \" 'to' Events: \" + events)\n                        if (events.length) {\n                            dispatch(addEventsThunk(events, tokenID))\n                        }\n                        resolve(events.length)\n                    }\n                })\n            }))\n            // Wait till both promises are resolved and add up the found number of events.\n            const loggedEvents = await Promise.all(eventPromises)\n            const foundEvents = loggedEvents.reduce((a, b) => a + b, 0)\n\n            dispatch(aceEntriesBlockRangeChange(addresses, tokenID, currentFromBlock, currentToBlock))\n            // increment currentChunk\n            currentChunk++\n            // update numEvents with number of found events\n            numEvents += foundEvents\n        }\n\n        dispatch(aceEntriesLoadingChange(addresses, tokenID, false, 0, 0, 0))\n    }\n}\n\nasync function verifyContractInstance(tokenId, dispatch, getState) {\n    let volatileToken = getState().tokens.volatileById[tokenId]\n    if (volatileToken === undefined) {\n        // volatileToken is undefined if we rehydrated state from localstorage.\n        // Create an entry to continue\n        dispatch(addVolatileToken(tokenId))\n        volatileToken = getState().tokens.volatileById[tokenId]\n    }\n    if (volatileToken.loadingPromise) {\n        // token is already loading. Just return the promise.\n        return volatileToken.loadingPromise\n    }\n    else {\n        dispatch(instantiateTokenContract(tokenId))\n        // refresh token, as the loadingPromise has just been added to state\n        volatileToken = getState().tokens.volatileById[tokenId]\n        return volatileToken.loadingPromise\n    }\n}\n\nexport const TRANSACTION_STATES = {\n    IDLE: 'IDLE',\n    INITIALIZING: 'INITIALIZING',\n    WAITING_FOR_SIGNATURE: 'WAITING_FOR_SIGNATURE',\n    WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',\n    CONFIRMED: 'CONFIRMED',\n    FAILED: 'FAILED'\n}\n\nexport function transferToken(tokenID, tokenAmount, fromAddress, toAddress) {\n    return async (dispatch, getState) => {\n        /*\n            Commented out until doing implementation\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.INITIALIZING))\n\n        // obtain token contract instance\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\n        // TODO: check if eth balance is sufficient for required gas\n        // TODO: check if token balance is sufficient\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_SIGNATURE))\n        // TODO: initialize transfer\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_CONFIRMATION))\n\n        // finalize transfer\n        dispatch(changeTransactionState(TRANSACTION_STATES.CONFIRMED))\n\n         */\n    }\n}\n\nexport const CHANGE_TRANSACTION_STATE = 'CHANGE_TRANSACTION_STATE'\nexport function changeTransactionState(transactionState, message='') {\n    return {\n        type: CHANGE_TRANSACTION_STATE,\n        payload: {\n            transactionState,\n            message\n        }\n    }\n}\n","import {\n    CHANGE_FILTER_PROPS,\n    CHANGE_TOKEN_LIST_PAGE,\n    CHANGE_TOKEN_LIST_STATE,\n    CHANGE_VALID_TOKEN_COUNT, CLEAR_TOKEN_LIST,\n    RESET_DISPLAY_COUNT,\n    TOKEN_LIST_STATES\n} from '../tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    listState: TOKEN_LIST_STATES.VIRGIN,\n    total: 0,\n    filter: '',\n    matchedTokenIds: [],\n    displayCount: 10,\n    showOnlyTracked: false,\n    filterIsActive: false,\n    activePage: 1,\n}\n\nfunction clearTokenList(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount,\n        matchedTokenIds: LISTSTATE_INITIAL.matchedTokenIds,\n        activePage: LISTSTATE_INITIAL.activePage,\n        total: LISTSTATE_INITIAL.total,\n        listState: LISTSTATE_INITIAL.listState,\n    }\n}\n\nfunction resetDisplayCount(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount\n    }\n}\n\nfunction tokenListStateChanged(state, action) {\n    // very simple reducer, just set a new state\n    const {payload} = action\n    const {listState} = payload\n    return {\n        ...state,\n        listState\n    }\n}\n\nfunction changeValidTokenCount(state, action){\n    const {payload} = action\n    const {count} = payload\n    return {\n        ...state,\n        total: count\n    }\n}\n\nfunction changeFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedTokenIds, showOnlyTracked, filterIsActive} = payload\n    return {\n        ...state,\n        filter,\n        matchedTokenIds,\n        showOnlyTracked,\n        filterIsActive,\n    }\n}\n\nfunction tokenListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nexport const listStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_LIST_STATE:\n            return tokenListStateChanged(state, action)\n        case CHANGE_VALID_TOKEN_COUNT:\n            return changeValidTokenCount(state, action)\n        case CHANGE_FILTER_PROPS:\n            return changeFilterProps(state, action)\n        case RESET_DISPLAY_COUNT:\n            return resetDisplayCount(state)\n        case CHANGE_TOKEN_LIST_PAGE:\n            return tokenListPageChanged(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearTokenList(state)\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, CLEAR_TOKEN_LIST, IS_LOADING_SUPPLY, IS_LOADING_TOKEN,\n    SET_TOKEN_SUPPLY\n} from '../tokenActions'\nimport {ADD_EVENTS, buildEventId} from '../../event/eventActions'\n\nconst TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokensById() {\n    return TOKENS_BY_ID_INITIAL\n}\n\nfunction addTokenEntry(state, action) {\n    const {payload} = action\n    const {tokenID, token} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: token\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\nfunction loadingTokenChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loading: isLoading\n        }\n    }\n}\n\nfunction setTokenSupply(state, action) {\n    const {payload} = action\n    const {tokenID, supply} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                supply\n            }\n        }\n    }\n}\n\nfunction loadingSupplyChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                loading: isLoading\n            }\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new event to the according token contract\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenId]\n\n    let newEventIds = token.eventIds\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n\n        if (newEventIds.includes(transferEventId)) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newEventIds = newEventIds.concat(transferEventId)\n    })\n\n    return {\n        ...state,\n        [tokenId]: {\n            ...token,\n            eventIds: newEventIds\n        }\n    }\n}\n\nexport const tokensByIdReducer = (state = TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenEntry(state, action)\n        }\n        case IS_LOADING_TOKEN: {\n            return loadingTokenChanged(state, action)\n        }\n        case SET_TOKEN_SUPPLY: {\n            return setTokenSupply(state, action)\n        }\n        case IS_LOADING_SUPPLY: {\n            return loadingSupplyChanged(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokensById(state, action)\n        }\n        case ADD_EVENTS: {\n            return addTransferEvents(state, action)\n        }\n        default:\n            return state\n    }\n}\n","import {ADD_TOKEN, CLEAR_TOKEN_LIST} from '../tokenActions'\n\nconst ALL_TOKENS_INITIAL = []\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate token\n    if (state.indexOf(tokenID) === -1) {\n        // append the new token's ID to the list of all IDs\n        return state.concat(tokenID);\n    }\n    else {\n        // duplicate\n        return state\n    }\n}\n\nfunction clearAllTokens() {\n    return ALL_TOKENS_INITIAL\n}\n\nexport const allTokensReducer = (state=ALL_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllTokens(state, action)\n        }\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, ADD_VOLATILE_TOKEN, CLEAR_TOKEN_LIST,\n    SET_TOKEN_CONTRACT_INSTANCE,\n    SET_TOKEN_LOADING_PROMISE,\n} from '../tokenActions'\n\nconst VOLATILE_TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokens() {\n    return VOLATILE_TOKENS_BY_ID_INITIAL\n}\n\nfunction setTokenContractInstance(state, action) {\n    const {payload} = action\n    const {tokenID, contractInstance} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        [tokenID]: {\n            ...token,\n            contractInstance: contractInstance\n        }\n    }\n}\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: {\n                tokenID,\n            }\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\n\nfunction setTokenLoadingPromise(state, action) {\n    const {payload} = action\n    const {tokenID, loadingPromise} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loadingPromise\n        }\n    }\n}\n\nexport const volatileTokensByIdReducer = (state = VOLATILE_TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case ADD_VOLATILE_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case SET_TOKEN_LOADING_PROMISE: {\n            return setTokenLoadingPromise(state, action)\n        }\n        case SET_TOKEN_CONTRACT_INSTANCE: {\n            return setTokenContractInstance(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokens()\n        }\n        default:\n            return state\n    }\n}\n\n","import {CHANGE_TOKEN_TRACKING} from '../tokenActions'\n\nconst TRACKED_TOKENS_INITIAL = []\n\nfunction changeTokenTracking(state, action) {\n    const {payload} = action\n    const {tokenId, doTrack} = payload\n    // Check if this token is currently tracked\n    const trackedIndex = state.indexOf(tokenId)\n    if (doTrack && (trackedIndex === -1)) {\n        // Add new tracked entry\n        return state.concat(tokenId)\n    }\n    if (!doTrack && (trackedIndex > -1)) {\n        // remove existing tracked entry. Use \"filter\" instead of splice, as it returns a new array, while \"splice\"\n        // mutates the existing one.\n        return state.filter(id => (id !== tokenId))\n    }\n    // No need to change anything\n    return state\n}\n\nexport const trackedTokensReducer = (state=TRACKED_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_TRACKING:\n            return changeTokenTracking(state, action)\n        default:\n            return state\n    }\n}\n\n","import Web3 from 'web3'\n/*\n Obtain web3 instance. Based on code from\n https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nlet getWeb3 = new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n        let myWeb3\n\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            myWeb3 = new Web3(window.ethereum)\n        }\n        // Legacy dapp browser\n        else if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            myWeb3 = new Web3(window.web3.currentProvider);\n        }\n\n        if (myWeb3) {\n            console.log('Injected web3 detected.')\n            let results = {\n                web3: myWeb3\n            }\n            resolve(results)\n        } else {\n            let results = {\n                error: 'No web3 injected'\n            }\n            reject(results)\n        }\n    })\n})\n\nexport default getWeb3\n","//\n// Based on\n// https://ethereum.stackexchange.com/questions/11444/web3-js-with-promisified-api\n// and\n// https://gist.github.com/xavierlepretre/90f0feafccc07b267e44a87050b95caa\n//\n\nconst promisify = (web3) => {\n    // Pipes values from a Web3 callback.\n    let callbackToResolve = function (resolve, reject) {\n        return function (error, value) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(value);\n            }\n        };\n    };\n\n    // List synchronous functions masquerading as values.\n    const syncGetters = {\n        db: [],\n        eth: [ \"accounts\", \"blockNumber\", \"coinbase\", \"gasPrice\", \"hashrate\",\n            \"mining\", \"protocolVersion\", \"syncing\" ],\n        net: [ \"listening\", \"peerCount\" ],\n        personal: [ \"listAccounts\" ],\n        shh: [],\n        version: [ \"ethereum\", \"network\", \"node\", \"whisper\" ]\n    };\n\n    Object.keys(syncGetters).forEach(function(group) {\n        Object.keys(web3[group]).forEach(function (method) {\n            if (syncGetters[group].indexOf(method) > -1) {\n                // Skip\n            } else if (typeof web3[group][method] === \"function\") {\n                web3[group][method + \"Promise\"] = function () {\n                    let args = arguments;\n                    return new Promise(function (resolve, reject) {\n                        args[args.length] = callbackToResolve(resolve, reject);\n                        args.length++;\n                        web3[group][method].apply(web3[group], args);\n                    });\n                };\n            }\n        });\n    });\n}\n\nexport default promisify\n","import getWeb3 from '../../utils/getWeb3'\nimport {clearTokenList} from '../token/tokenActions'\nimport promisify from '../../utils/promisifyWeb3'\n\nexport const WEB3_STATES = {\n    UNINITIALIZED: 'uninitialized',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    ERROR: 'error'\n}\n\nexport const ETH_ENABLE_STATES = {\n    REJECTED: 'rejected', // no access to eth.accounts\n    WAITING: 'waiting', // waiting for user confirmation in UI (e.g. metamask)\n    GRANTED: 'granted', // user has granted access to eth.accounts\n}\n\nexport const SET_WEB3_STATE = 'SET_WEB3_STATE'\nexport function setWeb3State(state) {\n    return {\n        type: SET_WEB3_STATE,\n        state\n    }\n}\n\nexport const SET_ETH_ENABLE_STATE = 'SET_ETH_ENABLE_STATE'\nexport function setEthEnableState(ethEnableState) {\n    return {\n        type: SET_ETH_ENABLE_STATE,\n        ethEnableState\n    }\n}\n\nexport const SET_WEB3INSTANCE = 'SET_WEB3INSTANCE'\nexport function setWeb3Instance(web3) {\n    return {\n        type: SET_WEB3INSTANCE,\n        web3\n    }\n}\n\nexport const SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK'\nexport function setCurrentBlock(block) {\n    return {\n        type: SET_CURRENT_BLOCK,\n        block\n    }\n}\n\nexport const SET_NETWORK = 'SET_NETWORK'\nexport function setNetwork(id, name, previousId) {\n    return {\n        type: SET_NETWORK,\n        id,\n        name,\n        previousId,\n    }\n}\n\nexport const SET_NODE_VERSION = 'SET_NODE_VERSION'\nexport function setNodeVersion(nodeVersion) {\n    return {\n        type: SET_NODE_VERSION,\n        nodeVersion\n    }\n}\n\nexport const SET_BLOCK_FILTER = 'SET_BLOCK_FILTER'\nexport function setBlockFilter(blockFilter) {\n    return {\n        type: SET_BLOCK_FILTER,\n        blockFilter\n    }\n}\n\nexport function stopBlockFilter() {\n    return (dispatch, getState) => {\n        // Clean up any blockfilter that might be active\n        const {blockFilter} = getState().web3Instance\n        if (blockFilter) {\n            blockFilter.stopWatching((error, result) => {\n                if (error) {\n                    console.log(\"Error stopping blockfilter: \" + error)\n                }\n            })\n            dispatch(setBlockFilter(null))\n        }\n    }\n}\n\nexport function initialize() {\n    return async (dispatch, getState) => {\n        // stop any running block filter, just in case...\n        dispatch(stopBlockFilter())\n\n        // signal that web3 is being initialized\n        dispatch(setWeb3State(WEB3_STATES.LOADING))\n\n        // set web3 instance\n        try {\n            var {web3} = await getWeb3\n            // stop loading\n            dispatch(setWeb3State(WEB3_STATES.INITIALIZED))\n        }\n        catch(e) {\n            console.log(\"Error getting web3: \" + e)\n            dispatch(setWeb3State(WEB3_STATES.ERROR))\n            return;\n        }\n\n        // FIXME - Promisify can be removed once web3.js 1.0 is released\n        promisify(web3)\n        dispatch(setWeb3Instance(web3))\n\n        // set node info\n        const nodeVersion = await web3.version.getNodePromise()\n        dispatch(setNodeVersion(nodeVersion))\n\n        // set network info\n        const networkIdString = await web3.version.getNetworkPromise()\n        let networkID = parseInt(networkIdString, 10)\n        const network = getNetworkName(networkID)\n        dispatch(setNetwork(networkID, network, undefined))\n\n        // set current block\n        const block = await web3.eth.getBlockPromise('latest')\n        dispatch(setCurrentBlock(block))\n\n        // start listening for new block events\n        const filter = web3.eth.filter('latest')\n        filter.watch(async (error, blockHash) => {\n            if (error) {\n                console.log(\"Error watching for block events: \" + error)\n            } else {\n                const block = await web3.eth.getBlockPromise(blockHash)\n                if (block) {\n                    dispatch(setCurrentBlock(block))\n                }\n                else {\n                    console.log(\"Ignoring null-block!\")\n                    console.log(block)\n                }\n            }\n        })\n        dispatch(setBlockFilter(filter))\n\n        // start watching for network change events\n        setInterval(async function () {\n            const networkIdString = await web3.version.getNetworkPromise()\n            let networkID = parseInt(networkIdString, 10)\n            const oldNetworkId = getState().web3Instance.id\n            if (oldNetworkId !== networkID) {\n                const network = getNetworkName(networkID)\n                dispatch(setNetwork(networkID, network, oldNetworkId))\n                dispatch(clearTokenList())\n            }\n        }, 1000)\n    }\n}\n\nexport function requestEthEnable() {\n    return async (dispatch, getState) => {\n        if (window.ethereum) {\n            // request access to user accounts as described in EIP-1102\n            try {\n                // signal that app is waiting for user action\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.WAITING))\n                // request access\n                await window.ethereum.enable()\n                // signal success\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n            } catch(error) {\n                // user rejected access\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.REJECTED))\n            }\n        } else {\n            // must be a legacy browser, which should grant access by default.\n            dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n        }\n    }\n}\n\nfunction getNetworkName(networkId) {\n    let network = 'unknown'\n    switch (networkId) {\n        case 4447:\n            network = 'truffle test'\n            break\n        case 1:\n            network = 'mainnet'\n            break\n        case 2:\n            network = 'Morden (deprecated!)'\n            break\n        case 3:\n            network = 'Ropsten'\n            break\n        case 4:\n            network = 'Rinkeby'\n            break\n        case 42:\n            network = 'Kovan'\n            break\n        case 61:\n            network = 'ETC'\n            break\n        case 62:\n            network = 'ETC Testnet'\n            break\n        default:\n            network = 'Unknown'\n    }\n    return network\n}\n","import {CHANGE_SELECTOR_TOKENID} from '../tokenActions'\nimport {SET_NETWORK} from '../../web3/web3Actions'\n\nconst SELECTOR_INITIAL = {\n    selctedTokenId: undefined\n}\n\nfunction changeSelectorTokenId(state, action) {\n    const {payload} = action\n    const {selectedTokenId} = payload\n\n    return {\n        ...state,\n        selectedTokenId,\n    }\n}\n\nfunction setNetwork(state, action) {\n    const {id, previousId} = action\n    // if the existing network got changed, clear the selected token. If this\n    // is the initial setNetwork event after page load (previousID is undefined)\n    // keep the selectedTokenId\n    // NOTE: This will only start working when Metamask stops the full page reload on network change.\n    // See https://github.com/MetaMask/metamask-extension/issues/3599.\n    if (previousId && (previousId !== id))\n        return SELECTOR_INITIAL\n    else\n        return state\n}\n\nexport const selectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_TOKENID:\n            return changeSelectorTokenId(state, action)\n        case SET_NETWORK:\n            return setNetwork(state, action)\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {listStateReducer} from './ListStateReducer'\nimport {tokensByIdReducer} from './TokensByIdReducer'\nimport {allTokensReducer} from './AllIdsReducer'\nimport {volatileTokensByIdReducer} from './volatileTokensByIdReducer'\nimport {trackedTokensReducer} from './TrackedIdsReducer'\nimport {selectorReducer} from './SelectorReducer'\n\n/*\nState tree:\n{\n    listState: {\n        listState: 'loading'\n        filter: 'Dumb'\n        matchedTokenIds: [6]\n        total: 2\n        activePage: 1\n    }\n    byId: {\n        [1]: {\n            loading: true\n            tokenID: 1\n            name: 'GAVCoin'\n            address: '0x123456678'\n            contractInstance: null\n            supply: {\n                loading: true\n                supply: 0\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        },\n        [6]: {\n            loading: false\n            tokenID: 6\n            name: 'DumbCoin'\n            address: '0x123456678'\n            contractInstance: <truffle-contract instance>\n            supply: {\n                loading: false\n                supply: 200000\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        }\n    },\n    allIds: [1, 6],\n    trackedIds: [3, 4]\n}\n*/\n\nexport const tokens = combineReducers({\n    listState: listStateReducer,\n    byId : tokensByIdReducer,\n    allIds : allTokensReducer,\n    trackedIds: trackedTokensReducer,\n    volatileById: volatileTokensByIdReducer,\n    selector: selectorReducer,\n});\n","export function updateObject(oldObject, newValues) {\n    // Encapsulate the idea of passing a new object as the first parameter\n    // to Object.assign to ensure we correctly copy data instead of mutating\n    return Object.assign({}, oldObject, newValues);\n}\n\nexport function updateItemInArray(array, itemId, updateItemCallback) {\n    return array.map(item => {\n        if (item.id !== itemId) {\n            // Since we only want to update one item, preserve all others as they are now\n            return item;\n        }\n\n        // Use the provided callback to create an updated item\n        return updateItemCallback(item);\n    });\n}\n","import {updateObject} from \"../../utils/reducerUtils\"\nimport {\n    SET_CURRENT_BLOCK,\n    SET_WEB3INSTANCE,\n    SET_NETWORK,\n    SET_NODE_VERSION, SET_BLOCK_FILTER, WEB3_STATES, SET_WEB3_STATE, ETH_ENABLE_STATES, SET_ETH_ENABLE_STATE,\n} from './web3Actions'\n\nconst WEB3_INITIAL = {\n    web3: null,\n    state: WEB3_STATES.UNINITIALIZED,\n    block: {\n        number: 0,\n        timestamp: 0\n    },\n    id: -1,\n    name: 'unknown',\n    blockFilter: null,\n    ethEnableState: ETH_ENABLE_STATES.REJECTED,\n}\n\nexport const web3Instance = (state=WEB3_INITIAL, action) => {\n    switch (action.type) {\n        case SET_WEB3_STATE:\n            return updateObject(state, {state: action.state})\n        case SET_ETH_ENABLE_STATE:\n            return updateObject(state, {ethEnableState: action.ethEnableState})\n        case SET_WEB3INSTANCE:\n            return updateObject(state, {web3: action.web3})\n        case SET_CURRENT_BLOCK:\n            return updateObject(state, {block: action.block})\n        case SET_NETWORK:\n            return updateObject(state, {id: action.id, name: action.name})\n        case SET_NODE_VERSION:\n            return updateObject(state, {nodeVersion: action.nodeVersion})\n        case SET_BLOCK_FILTER:\n            return updateObject(state, {blockFilter: action.blockFilter})\n        default:\n    }\n    return state;\n}\n","import {loadMultiTokenBalances, loadTokenBalance} from '../token/tokenActions'\nimport {buildBalanceId} from '../balance/balanceActions'\n\nexport const ADDRESS_TYPE_EXTERNAL='ADDRESS_TYPE_EXTERNAL'\nexport const ADDRESS_TYPE_OWNED='ADDRESS_TYPE_OWNED'\nexport const ADDRESS_BALANCES_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    HYDRATED_WHILE_LOADING: 'hydrated_while_loading'\n}\n\nexport const CHANGE_ADDRESS_BALANCES_STATE = 'CHANGE_ADDRESS_BALANCES_STATE'\nexport function addressBalancesStateChanged(addressId, addressBalancesState) {\n    return {\n        type: CHANGE_ADDRESS_BALANCES_STATE,\n        payload: {\n            addressId,\n            addressBalancesState\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS'\nexport function addAddress(address, type) {\n    // make sure that all addresses are stored in lowercase\n    address = address.toLowerCase()\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            addressId: address,\n            address,\n            type\n        }\n    }\n}\n\nexport const REMOVE_ADDRESS='REMOVE_ADDRESS'\nexport function removeAddress(addressId) {\n    return {\n        type: REMOVE_ADDRESS,\n        payload: {\n            addressId\n        }\n    }\n}\n\nexport const CHANGE_ADDRESS_TYPE='CHANGE_ADDRESS_TYPE'\nexport function changeAddressType(addressId, newType) {\n    return {\n        type: CHANGE_ADDRESS_TYPE,\n        payload: {\n            addressId,\n            newType,\n        }\n    }\n}\n\nfunction batchGetBalances(timestamp, startIndex, addressId, dispatch, getState, recursionCount) {\n    const allIds = getState().tokens.allIds\n    let diff = 0\n    let index = startIndex\n    while ((diff < 10) && (index < allIds.length)) {\n        const tokenId = allIds[index]\n        const balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            dispatch(loadTokenBalance(tokenId, addressId))\n        }\n        index++\n        diff = performance.now()-timestamp\n    }\n    // 10 ms have passed\n    if (index < allIds.length) {\n        console.log(\"Batch update with index \" + index)\n        requestAnimationFrame((timestamp) => {\n            batchGetBalances(timestamp, index, addressId, dispatch, getState, recursionCount+1)\n        })\n    } else {\n        // indicate loading finished when last balance loading request was dispatched\n        dispatch(addressBalancesStateChanged(addressId, ADDRESS_BALANCES_STATES.INITIALIZED))\n    }\n}\n\nexport function addNewAddress(address, type) {\n    return (dispatch, getState) => {\n        // a new address is added.\n        dispatch(addAddress(address, type))\n        // If i'm tracking tokens start getting balance right away\n        const trackedIds = getState().tokens.trackedIds\n        if (trackedIds.length) {\n            // load balance for all tracked tokens\n            dispatch(loadMultiTokenBalances(trackedIds, address))\n        }\n    }\n}\n\nexport function resumeGetBalances(addressId, startIndex) {\n    return (dispatch, getState) => {\n        // start getting balances\n        batchGetBalances(performance.now(), startIndex, addressId, dispatch, getState, 0)\n    }\n}\n\nexport function changeOwnAddresses(accounts) {\n    // for each account in accounts:\n    // -> if it is not in addresses, add it\n    // -> if it is in addresses, but marked as \"external\", change type to \"owned\"\n    return (dispatch, getState) => {\n        const addressesById = getState().addresses.byId\n\n        const newAccounts = accounts.filter(account => {\n            const existingAddress = Object.values(addressesById).filter(entry => {\n                return (entry.address === account)\n            })\n            if (existingAddress.length > 0) {\n                // check if the type has changed\n                if (existingAddress[0].type !== ADDRESS_TYPE_OWNED){\n                    console.log(\"Changing address \" + existingAddress[0].address + \" type to Owned!\")\n                    dispatch(changeAddressType(existingAddress[0].address, ADDRESS_TYPE_OWNED))\n                }\n                return false // address already known\n            }\n            return true // address needs to be added\n        })\n\n        // now check if there is any address currently marked as owned that is no more in accounts\n        const makeExternal = Object.values(addressesById).filter(entry => {\n            if (entry.type === ADDRESS_TYPE_OWNED) {\n                // if this OWNED address is not in accounts array it needs to change to EXTERNAL!\n                const idx = accounts.indexOf(entry.address)\n                return (idx === -1)\n            }\n            return false\n        })\n\n        // make old owned addresses external\n        makeExternal.forEach(address => {\n            dispatch(changeAddressType(address.address, ADDRESS_TYPE_EXTERNAL))\n        })\n\n        // add all new addresses\n        newAccounts.forEach(account => {\n            dispatch(addNewAddress(account, ADDRESS_TYPE_OWNED))\n        })\n    }\n}\n\nexport const CHANGE_SELECTOR_ADDRESSID = 'CHANGE_SELECTOR_ADDRESSID'\nexport function changeSelectorAddressId(selectedAddressId) {\n    return {\n        type: CHANGE_SELECTOR_ADDRESSID,\n        payload: {\n            selectedAddressId,\n        }\n    }\n}\n","import {\n    ADD_ADDRESS, ADDRESS_BALANCES_STATES, CHANGE_ADDRESS_BALANCES_STATE, CHANGE_ADDRESS_TYPE,\n    REMOVE_ADDRESS\n} from '../addressActions'\n\nconst ADDRESS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_BY_ID_INITIAL = {\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n        address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n        type: ADDRESS_TYPE_EXTERNAL\n    },\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0': {\n        address: '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n        type: ADDRESS_TYPE_EXTERNAL\n    },\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9': {\n        address: '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n        type: ADDRESS_TYPE_OWNED\n    }\n}\n*/\n\nfunction addAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId, address, type} = payload\n    if (Object.keys(state).indexOf(addressId) > -1)\n    {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return {\n        ...state,\n        [addressId]: {\n            address,\n            type,\n            balancesState: ADDRESS_BALANCES_STATES.VIRGIN,\n            eventIds: []\n        },\n    }\n}\n\nfunction removeAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    let newState = Object.assign({}, state)\n    delete newState[addressId]\n    return newState\n}\n\nfunction changeAddressType(state, action) {\n    const {payload} = action\n    const {addressId, newType} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            type: newType\n        }\n    }\n}\n\nfunction changeAddressBalancesState(state, action) {\n    const {payload} = action\n    const {addressBalancesState, addressId} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            balancesState: addressBalancesState\n        }\n    }\n}\n\nexport const addressByIdReducer = (state=ADDRESS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressEntry(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressEntry(state, action)\n        case CHANGE_ADDRESS_TYPE:\n            return changeAddressType(state, action)\n        case CHANGE_ADDRESS_BALANCES_STATE:\n            return changeAddressBalancesState(state, action)\n        default:\n    }\n    return state;\n}\n","import {ADD_ADDRESS, REMOVE_ADDRESS} from '../addressActions'\n\nconst ALL_ADDRESSES_INITIAL = []\n/*const ALL_ADDRESSES_INITIAL = [\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n]*/\n\nfunction addAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(addressId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return state.concat(addressId)\n}\n\nfunction removeAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    return state.filter(entryId => (entryId !== addressId))\n}\n\nexport const allAddressIdsReducer = (state=ALL_ADDRESSES_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressId(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressId(state, action)\n        default:\n    }\n    return state;\n}\n","import {CHANGE_SELECTOR_ADDRESSID} from '../addressActions'\n\nconst SELECTOR_INITIAL = {\n    selectedAddressId: '',\n}\n\nfunction changeSelectorAddressId(state, action){\n    const {payload} = action\n    const {selectedAddressId} = payload\n\n    return {\n        ...state,\n        selectedAddressId,\n    }\n}\n\nexport const addressSelectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_ADDRESSID:\n            return changeSelectorAddressId(state, action)\n        default:\n            return state\n    }\n}\n\n","import {addressByIdReducer} from './addressByIdReducer'\nimport {allAddressIdsReducer} from './allAddressIdsReducer'\nimport {combineReducers} from 'redux'\nimport {addressSelectorReducer} from './addressSelectorReducer'\n\n/*\nState tree:\n{\n    addresses: {\n        byId: {\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n                address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n                type: ADDRESS_TYPE_EXTERNAL\n            },\n            ...\n        }\n\n        allIds: [\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n            '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n            '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9'\n        ]\n    }\n}\n*/\n\nexport const addresses = combineReducers({\n    byId : addressByIdReducer,\n    allIds : allAddressIdsReducer,\n    selector: addressSelectorReducer,\n});\n","import {\n    BALANCE_STATES,\n    CREATE_BALANCE_ENTRY,\n    DELETE_BALANCE_ENTRY,\n    SET_BALANCE,\n    SET_BALANCE_STATE\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\nimport {BigNumber} from 'bignumber.js'\n\nconst BALANCE_BY_ID_INITIAL = {}\n\nfunction clearAllBalances() {\n    return BALANCE_BY_ID_INITIAL;\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balance\n        }\n    };\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId, addressId, tokenId} = payload\n    return {\n        ...state,\n        [balanceId] : {\n            balanceId,\n            addressId,\n            tokenId,\n            balance: new BigNumber(0),\n            balanceState: BALANCE_STATES.VIRGIN,\n        }\n    }\n}\n\nfunction balanceStateChanged(state, action){\n    const {payload} = action\n    const {balanceId, balanceState} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balanceState,\n        }\n    }\n\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    delete state[balanceId]\n    return state\n}\n\n\nexport const byId = (state=BALANCE_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case SET_BALANCE_STATE: {\n            return balanceStateChanged(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state;\n    }\n}\n","import {CREATE_BALANCE_ENTRY, DELETE_BALANCE_ENTRY} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_BALANCES_INITIAL = []\n\nfunction clearAllBalances() {\n    return ALL_BALANCES_INITIAL;\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(balanceId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate balance \" + balanceId)\n        return state\n    }\n    return state.concat(balanceId)\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\n\nexport const allIds = (state=ALL_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state\n    }\n}\n","import {DELETE_BALANCE_ENTRY, SET_BALANCE} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst POSITIVE_BALANCES_INITIAL = []\n\nfunction clearPositiveBalances() {\n    return POSITIVE_BALANCES_INITIAL\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1) {\n        // this balance entry is currently marked as having a balance...\n        if (balance.isZero()) {\n            // no more balance. Remove from array\n            const newState = state.filter(entry => entry !== balanceId)\n            return newState\n        } else {\n            // all set, no need for action\n            return state\n        }\n    } else {\n        // this balance entry is currently marked as having NO balance...\n        if (balance.greaterThan(0)) {\n            // ... but it has a balance now! Add it to list.\n            return state.concat(balanceId)\n        } else {\n            // ... and it still has no balance. No need for action\n            return state\n        }\n    }\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\nexport const positiveIds = (state=POSITIVE_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST:\n            return clearPositiveBalances()\n        default:\n            return state;\n    }\n}\n","import {\n    CHANGE_BALANCE_FILTER_PROPS,\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst BALANCE_LISTSTATE_INITIAL = {\n    filter: '',\n    matchedBalanceIds: [],\n    displayCount: 10,\n}\n\nfunction clearBalanceListState() {\n    return BALANCE_LISTSTATE_INITIAL\n}\n\nfunction changeBalanceFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedBalanceIds} = payload\n    return {\n        ...state,\n        filter,\n        matchedBalanceIds\n    }\n}\n\nexport const listStateReducer = (state=BALANCE_LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_BALANCE_FILTER_PROPS:\n            return changeBalanceFilterProps(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearBalanceListState()\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {byId} from './balanceByIdReducer'\nimport {allIds} from './allBalancesReducer'\nimport {positiveIds} from './positiveBalancesReducer'\nimport {listStateReducer} from './BalanceListStateReducer'\n\n/*\nState tree:\n{\n    balance: {\n        byId: {\n            [1]: {\n                balanceId: 1\n                tokenId: 1\n                addressId: 1\n                balance: 22.45\n            },\n        }\n        allIds: [1],\n        positiveIds: [1]    // all balances that have an actual balance > 0\n        listState: {\n            filter: '',\n            matchedBalanceIds: [],\n            displayCount: 10,\n        }\n    }\n}\n*/\n\nexport const balance = combineReducers({\n    byId : byId,\n    allIds : allIds,\n    positiveIds: positiveIds,\n    listState: listStateReducer,\n})\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst EVENT_BY_ID_INITIAL = {}\n\nfunction addEvents(state, action) {\n    const {payload} = action\n    const {events, tokenId} = payload\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        if (Object.keys(state).includes(transferEventId ))\n        {\n            console.warn(\"Ignoring duplicate event \" + transferEventId )\n            return\n        }\n        state = {\n            ...state,\n            [transferEventId]: {\n                transferEventId,\n                tokenId,\n                transferEvent,\n            },\n        }\n    })\n    return state\n}\n\nfunction clearEvents() {\n    return EVENT_BY_ID_INITIAL\n}\n\nexport const eventByIdReducer = (state=EVENT_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEvents(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_EVENTS_INITIAL = []\n\nfunction addEventIds(state, action) {\n    const {payload} = action\n    const {events} = payload\n    let newState = state\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        const existingIndex = state.indexOf(transferEventId)\n        if (existingIndex > -1) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newState = newState.concat(transferEventId)\n    })\n    return newState\n}\n\nfunction clearEvents() {\n    return ALL_EVENTS_INITIAL\n}\n\nexport const allEventIdsReducer = (state=ALL_EVENTS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {CHANGE_EVENT_SCAN_PROPS, CHANGE_TRANSFEREVENTLIST_PAGE} from '../eventActions'\nimport {CHANGE_SELECTOR_ADDRESSID} from '../../address/addressActions'\nimport {CHANGE_SELECTOR_TOKENID, CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    activePage: 1,\n    currentChunk: 0,\n    maxChunks: 0,\n}\n\nfunction transferEventListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nfunction resetPager(state) {\n    return {\n        ...state,\n        activePage: 1\n    }\n}\n\nfunction changeEventScanProps(state, action) {\n    const {payload} = action\n    const {\n        currentChunk,\n        maxChunks,\n    } = payload.props\n\n    return {\n        ...state,\n        currentChunk,\n        maxChunks\n    }\n}\n\nexport const transferEventListStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch(action.type) {\n        case CHANGE_TRANSFEREVENTLIST_PAGE:\n            return transferEventListPageChanged(state, action)\n        case CHANGE_EVENT_SCAN_PROPS:\n            return changeEventScanProps(state, action)\n        case CHANGE_SELECTOR_ADDRESSID:\n        case CHANGE_SELECTOR_TOKENID:\n        case CLEAR_TOKEN_LIST:\n            return resetPager(state, action)\n        default:\n            return state\n    }\n}\n","import {combineReducers} from 'redux'\nimport {eventByIdReducer} from './eventByIdReducer'\nimport {allEventIdsReducer} from './allEventIdsReducer'\nimport {addressContractEventsByIdReducer} from './addressContractEventsByIdReducer'\nimport {transferEventListStateReducer} from './listStateReducer'\n\n\nexport const events = combineReducers({\n    byId : eventByIdReducer,\n    allIds : allEventIdsReducer,\n    aceById: addressContractEventsByIdReducer,\n    listState: transferEventListStateReducer,\n});\n","export const SHOW_MODAL = 'SHOW_MODAL'\nexport function showModal(modalType, modalProps) {\n    return {\n        type: SHOW_MODAL,\n        payload: {\n            modalType,\n            modalProps\n        }\n    }\n}\n\nexport const HIDE_MODAL = 'HIDE_MODAL'\nexport function hideModal() {\n    return {\n        type: HIDE_MODAL,\n        payload: {}\n    }\n}\n","import {HIDE_MODAL, SHOW_MODAL} from './modalActions'\n\nconst MODAL_INITIAL = {\n    modalType: null,\n    modalProps: {}\n}\n\nfunction showModal(state, action) {\n    const {payload} = action\n    const {modalType, modalProps} = payload\n    return {\n        modalType,\n        modalProps\n    }\n}\n\nfunction hideModal() {\n    return MODAL_INITIAL\n}\n\nexport const modal = (state=MODAL_INITIAL, action) => {\n    switch (action.type) {\n        case SHOW_MODAL:\n            return showModal(state, action)\n        case HIDE_MODAL:\n            return hideModal()\n        default:\n    }\n    return state;\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport {tokens} from \"./modules/token/reducers/tokenReducer\"\nimport {web3Instance} from \"./modules/web3/web3Reducer\"\nimport thunk from 'redux-thunk'\nimport {addresses} from './modules/address/reducers/addressReducer'\nimport {balance} from './modules/balance/reducer/balanceReducer'\nimport {createLogger} from 'redux-logger'\nimport { persistStore, persistReducer, createTransform } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport {BALANCE_STATES} from './modules/balance/balanceActions'\nimport {events} from './modules/event/reducers/eventReducer'\nimport {modal} from './modules/modal/modalReducer'\n\n\n/*\nMark all address entries that have been hydrated while being in state \"loading\" as \"hydrated_while_loading\", so i can restart loading them.\n */\nconst addressesTransform = createTransform(\n    // transform state on its way to being serialized and persisted.\n    (inboundState) => {\n        return inboundState\n    },\n    // transform state being rehydrated\n    (outboundState) => {\n        const newState = {...outboundState}\n        Object.keys(newState.byId).forEach(addressId => {\n            const addressEntry = newState.byId[addressId]\n            const newAddressState = addressEntry.balancesState === BALANCE_STATES.LOADING ? BALANCE_STATES.HYDRATED_WHILE_LOADING : addressEntry.balancesState\n            newState.byId[addressId] = {\n                ...addressEntry,\n                balancesState: newAddressState\n            }\n        })\n        return newState;\n    },\n    // define which reducers this transform gets called for.\n    { whitelist: ['addresses'] }\n);\n\nconst tokensConfig = {\n    key: 'tokens',\n    storage: storage,\n    transforms: [],\n    // Only persist tracked tokens and last selected token\n    whitelist: ['trackedIds', 'selector']\n}\n\nconst reducer = combineReducers({\n    web3Instance,\n    tokens: persistReducer(tokensConfig, tokens),\n    addresses,\n    balance,\n    events,\n    modal,\n})\n\nconst rootConfig = {\n    key: 'root',\n    storage: storage,\n    transforms: [\n        addressesTransform\n    ],\n    // Don't persist these subtrees:\n    blacklist: ['web3Instance', 'tokens', 'balance', 'events', 'modal'],\n}\nconst persistedReducer = persistReducer(rootConfig, reducer)\n\nconst logger = createLogger({\n    // Would love to log state diffs, but apparently logger tries to call all web3 instance methods\n    // which will make metamask throw an error due to trying to call methods synchronous.\n    // There may be a workaround somewhere, but disabling state diff for now...\n    diff: false\n});\n\n// REDUX Dev Tools don't play well at all with web3 from Metamask extension...\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    let store = createStore(\n        persistedReducer,\n        compose(\n            applyMiddleware(\n                thunk,\n                logger,\n            )\n        )\n    )\n    let persistor = persistStore(store )\n    return {store, persistor}\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Modal} from 'semantic-ui-react'\n\nconst TestModal = (props) => {\n    const {closeModal} = props\n    return (\n        <Modal open onClose={closeModal}>\n            <Modal.Header>Select a Photo</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Header>Default Profile Image</Header>\n                    <p>We've found the following gravatar image associated with your e-mail address.</p>\n                    <p>Is it okay to use this photo?</p>\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTestModal.propTypes = {\n    closeModal: PropTypes.func.isRequired\n}\n\nTestModal.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TestModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {addValidationRule} from 'formsy-react'\nimport {Grid, Header, List, Modal, Segment} from 'semantic-ui-react'\nimport {Label} from 'semantic-ui-react'\nimport {Form, Input} from 'formsy-semantic-ui-react'\n\nconst TransferForm = (props) => {\n    const {\n        web3, onValidSubmit, onClose,\n        fromAddress,\n        tokenName, tokenSymbol, tokenBalance,\n        etherBalance, gasCosts } = props\n\n    const errorLabel = <Label color=\"red\" pointing/>\n\n    addValidationRule('isEthereumAddress', (values, value) => (web3.isAddress(value)))\n    addValidationRule('isLessThanOrEqual', (values, value, max) => {\n        try {\n            const bnValue = web3.toBigNumber(value)\n            const bnMax = web3.toBigNumber(max)\n            return bnValue.lessThanOrEqualTo(bnMax)\n        }\n        catch (err) {\n            // if anything goes wrong with BigNumber, just fail validation\n            return false\n        }\n    })\n\n    return (\n        <Modal open onClose={onClose} size={'small'} closeIcon>\n            <Modal.Header>Transfer '{tokenName}' Tokens</Modal.Header>\n            <Modal.Content>\n\n                <Form noValidate onValidSubmit={onValidSubmit}>\n                    <Segment>\n                        <Grid columns={2}>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account address:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>{fromAddress}</Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account balance:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>\n                                    <List>\n                                        <List.Item>\n                                            {tokenBalance.toFixed()} {tokenSymbol}\n                                        </List.Item>\n                                        <List.Item>{etherBalance.toFixed()} ETH</List.Item>\n                                    </List>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">To Address</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"toAddress\"\n                                   placeholder=\"Receiving ethereum address\"\n                                   required\n                                   instantValidation\n                                   validations=\"isEthereumAddress\"\n                                   validationErrors={{\n                                       isEthereumAddress: 'This is not a valid Ethereum address',\n                                       isDefaultRequiredValue: 'To Address is Required',\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n\n                        <Header size=\"small\">Amount to send</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"amount\"\n                                   placeholder=\"Enter amount\"\n                                   label={tokenSymbol}\n                                   labelPosition=\"right\"\n                                   required\n                                   instantValidation\n                                   validations={'isNumeric,isLessThanOrEqual:' + tokenBalance.toFixed()}\n                                   validationErrors={{\n                                       isNumeric: 'This is not a valid number',\n                                       isDefaultRequiredValue: 'Amount is Required',\n                                       isLessThanOrEqual: 'Maximum available balance is ' + tokenBalance.toFixed()\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">Estimated Gas costs</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"gasCosts\"\n                                   label=\"ETH\"\n                                   labelPosition=\"right\"\n                                   readOnly\n                                   value={gasCosts}\n                                   validations={'isLessThanOrEqual:' + etherBalance.toFixed()}\n                                   instantValidation\n                                   validationErrors={{\n                                       isLessThanOrEqual: 'Not enough ether to cover gas costs'\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n                    <Form.Group>\n                        <Form.Button content=\"Submit\" color=\"green\"/>\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTransferForm.propTypes = {\n    web3: PropTypes.object.isRequired\n}\n\nTransferForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferForm\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TransferForm from './TransferForm'\nimport {connect} from 'react-redux'\nimport {transferToken} from '../../token/tokenActions'\n\nclass TransferFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            amount: this.props.web3.toBigNumber('0'),\n            toAddressValid: false,\n            amountValid: false,\n            rateValid: false\n        }\n    }\n\n    onValidSubmit = (formData) => alert(JSON.stringify(formData));   // eslint-disable-line\n\n    render() {\n        const {fromAddress, tokenName, tokenSymbol, tokenBalance} = this.props\n\n        // TODO: Calculate real gas costs\n        const gasCosts = this.props.web3.toBigNumber('0.0022')\n        // TODO: Get real balance\n        const etherBalance = this.props.web3.toBigNumber('12.3456')\n\n        return <TransferForm onValidSubmit={this.onValidSubmit}\n                             onClose={this.props.closeModal}\n                             fromAddress={fromAddress}\n                             web3={this.props.web3}\n                             tokenName={tokenName}\n                             tokenSymbol={tokenSymbol}\n                             tokenBalance={tokenBalance}\n                             gasCosts={gasCosts}\n                             etherBalance={etherBalance}\n        />\n    }\n}\n\nTransferFormContainer.propTypes = {\n    fromAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenId: PropTypes.number.isRequired,\n    tokenBalanceId: PropTypes.number.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n}\n\nTransferFormContainer.defaultProps = {\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const fromAddress = state.addresses.byId[balanceEntry.addressId].address\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n\n    return {\n        web3: state.web3Instance.web3,\n        fromAddress,\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenId: token.id,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    transferToken: () => {\n        dispatch(transferToken())\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport TestModal from './TestModal'\nimport {hideModal} from './modalActions'\nimport TransferFormContainer from '../forms/transferForm/TransferFormContainer'\n\nexport const MODAL_COMPONENTS = {\n    'TEST_MODAL': TestModal,\n    'TRANSFER_FORM_CONTAINER': TransferFormContainer\n    /* other modals */\n}\n\nclass ModalRoot extends Component {\n    render() {\n        const {modalType, modalProps, closeModal} = this.props\n\n        if (!modalType){\n            // currently no modal needs to be shown\n            return null\n        }\n\n        const SpecificModal = MODAL_COMPONENTS[modalType]\n        return <SpecificModal closeModal={closeModal} {...modalProps} />\n    }\n}\n\nconst mapStateToProps = state => (\n    state.modal\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => {\n        dispatch(hideModal())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\n\nconst Balance = (props) => {\n    const {balance, numDecimals} = props\n    const trigger = <span>{balance.toFixed(numDecimals)}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={balance.toFixed(Math.max(numDecimals, balance.dp()))}\n        />\n    )\n}\n\nBalance.propTypes = {\n    balance: PropTypes.object.isRequired, // BigNum instance\n    numDecimals: PropTypes.number\n}\n\nBalance.defaultProps = {\n    numDecimals: 3\n}\n\nexport default Balance\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    if (ensName) {\n        return <div>\n            <div><strong>{ensName}</strong></div>\n            <div><small>{address}</small></div>\n        </div>\n    } else {\n        return <div><strong>{address}</strong></div>\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from '../address/addressActions'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst BalanceItemDetail = (props) => {\n    const {address, ensName, balance, loading, reloadBalance, url/*, addressType, openTransferModal*/} = props\n    /*const external = (addressType !== ADDRESS_TYPE_OWNED)*/\n\n    /*\n        transfer button removed until functionality gets implemented...\n\n                <Button icon='external share'\n                    size='mini'\n                    circular\n                    onClick={openTransferModal}\n                    disabled={external}\n                />\n     */\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                <Link to={url}><AddressDisplay address={address} ensName={ensName}/></Link>\n            </Table.Cell>\n            <Table.Cell><Balance balance={balance}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nBalanceItemDetail.propTypes = {\n    address: PropTypes.string.isRequired,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    ensName: PropTypes.string,\n    balance: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    url: PropTypes.string.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemDetail from './BalanceItemDetail'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport {showModal} from '../modal/modalActions'\n\nclass BalanceItemDetailContainer extends Component {\n    render() {\n        return (\n            <BalanceItemDetail address={this.props.address}\n                               addressType={this.props.addressType}\n                               balance={this.props.balance}\n                               reloadBalance={this.props.reloadBalance}\n                               loading={this.props.loading}\n                               url={this.props.url}\n                               openTransferModal={this.props.openTransferModal}\n                               ensName={this.props.ensName}\n            />\n        )\n    }\n}\n\nBalanceItemDetailContainer.propTypes = {\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.object.isRequired,\n    tokenBalanceId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n}\n\nBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const addressEntry = state.addresses.byId[balanceEntry.addressId]\n    const balance = balanceEntry.balance.dividedBy(token.decimals)\n    return {\n        balance,\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n        url: \"/events/\" + token.id + \"/\" + addressEntry.address\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    },\n    openTransferModal: () => {\n        dispatch(showModal('TRANSFER_FORM_CONTAINER',\n            {\n                tokenBalanceId: ownProps.tokenBalanceId,\n            }\n        ))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport BalanceItemDetailContainer from './BalanceItemDetailContainer'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\n\nconst BalanceItem = (props) => {\n    const {expanded, tokenName, tokenSymbol, tokenBalances, total, reloadBalance, loading, tokenEventsLinkOptions, toggleCollapse} = props\n    let eventLink = <Link to={tokenEventsLinkOptions}>{tokenName} ({tokenSymbol})</Link>\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>{eventLink}</Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value><Balance balance={total}/></Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <BalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    } else {\n        tableBody = null\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nBalanceItem.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    total: PropTypes.object.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    tokenEventsLinkOptions: PropTypes.object.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport BalanceItem from './BalanceItem'\nimport _ from 'lodash'\n\n\nclass BalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        return (\n            <BalanceItem tokenName={this.props.token.name}\n                         tokenSymbol={this.props.token.symbol}\n                         tokenBalances={this.props.tokenBalances}\n                         total={this.props.total}\n                         reloadBalance={this.reloadBalance}\n                         loading={this.props.loading}\n                         tokenEventsLinkOptions={this.props.tokenEventsLinkOptions}\n                         expanded={this.state.expanded}\n                         toggleCollapse={this.toggleCollapse}\n            />\n        )\n    }\n\n    /*\n    shouldComponentUpdate(nextProps) {\n        // Render() should only ever be necessary when loading state, token itself or\n        // it's total balance changes, i.e. an address was added/removed to\n        // the watch list or the balance of an address changed.\n        return (\n            (!nextProps.total.equals(this.props.total)) ||\n            (nextProps.tokenId !== this.props.tokenId) ||\n            (nextProps.loading !== this.props.loading)\n        )\n    }*/\n}\n\nBalanceItemContainer.propTypes = {\n}\n\nBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n\n    // calculate total balance of all addresses\n    const total = _.reduce(ownProps.tokenBalances, (sum, tokenBalance) => {\n        return sum.plus(tokenBalance.balance)\n    }, new BigNumber(0) ).dividedBy(token.decimals)\n\n    // if any of the tokenBalances is loading, the whole container is loading\n    let loading = false\n    ownProps.tokenBalances.forEach(tokenBalance => {\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n    })\n\n    const tokenEventsLinkOptions = {\n        pathname: '/events/' + ownProps.tokenId,\n    }\n\n    return {\n        token,\n        total,\n        loading,\n        tokenEventsLinkOptions,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemContainer from './BalanceItemContainer'\n\nconst BalancesList = (props) => {\n    return (\n        <div>\n            {Object.entries(props.balancesByToken).map(entry =>\n                <BalanceItemContainer key={entry[0]} tokenId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nBalancesList.propTypes = {\n    balancesByToken: PropTypes.object.isRequired\n}\n\nBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalancesList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Input, Icon} from 'semantic-ui-react'\n\nconst TokenListFilter = (props) => {\n    const {filterString, handleChange, filterIsActive, clearFilter} = props\n    let icon = null\n    if (filterIsActive) {\n        icon = <Icon name='eraser' circular link onClick={clearFilter} />\n    }\n    return (\n        <Input label='Filter'\n               name='filter'\n               placeholder='Enter name, symbol or contract address'\n               onChange={handleChange}\n               value={filterString}\n               icon={icon}\n               fluid\n        />\n    )\n}\n\nTokenListFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    displayed: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n}\n\nTokenListFilter.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenListFilter\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {setFilterProps} from './tokenActions'\nimport TokenListFilter from './TokenListFilter'\nimport {setBalanceFilterString} from '../balance/balanceActions'\n\nclass TokenListFilterContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, {name, value}) {\n        this.props.setFilterString(value)\n    }\n\n    render() {\n        return <TokenListFilter filterString={this.props.filterString}\n                                handleChange={this.handleChange}\n                                filterIsActive={this.props.filterIsActive}\n                                displayed={this.props.displayed}\n                                total={this.props.total}\n                                clearFilter={this.props.clearFilter}/>\n    }\n}\n\nTokenListFilterContainer.propTypes = {\n    target: PropTypes.string.isRequired,\n    total: PropTypes.number.isRequired,\n    displayed: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    filterString: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            total: state.tokens.allIds.length,\n            displayed: state.tokens.listState.matchedTokenIds.length,\n            filterIsActive: state.tokens.listState.filterIsActive,\n            filterString: state.tokens.listState.filter,\n            showOnlyTracked: state.tokens.listState.showOnlyTracked,\n        }\n    }\n    if (target === 'balancelist') {\n        return {\n            total: state.balance.positiveIds.length,\n            displayed: state.balance.listState.matchedBalanceIds.length,\n            filterIsActive: state.balance.listState.filter.length > 0,\n            filterString: state.balance.listState.filter,\n        }\n    }\n\n    return {}\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            clearFilter: () => {\n                dispatch(setFilterProps({filterString: ''}))\n            },\n            setFilterString: (filter) => {\n                dispatch(setFilterProps({filterString: filter}))\n            }\n        }\n    }\n\n    if (target === 'balancelist') {\n        return {\n            clearFilter: () => {\n                dispatch(setBalanceFilterString(''))\n            },\n            setFilterString: (filter) => {\n                dispatch(setBalanceFilterString(filter))\n            }\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenListFilterContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header} from 'semantic-ui-react'\n\nconst ScreenHeader = (props) => {\n    const {title} = props\n    /*\n     custom style \"marginTop: 0\" required to prevent header sticking just a little bit outside of its grid row.\n     Not sure if this is an error on my side, a bug of react-semantic-ui or semantic-ui itself, or intended behaviour...\n     */\n    return (\n        <Header as={'h1'} block inverted color={'green'} textAlign={'center'}\n                style={{\n                    marginTop: 0,\n                }}>\n            {title}\n        </Header>\n    )\n}\n\nScreenHeader.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    title: PropTypes.string.isRequired\n}\n\nScreenHeader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ScreenHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Divider, Message} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport BalancesList from '../balance/BalancesList'\nimport TokenListFilterContainer from '../token/TokenListFilterContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Overview = (props) => {\n    const {hasAccounts, balancesByToken} = props\n\n    let body\n    if (hasAccounts) {\n        if (Object.keys(balancesByToken).length) {\n            body = <BalancesList balancesByToken={balancesByToken}/>\n        }\n        else {\n            body = <Message>\n                <Message.Header>\n                    No balances\n                </Message.Header>\n                <Message.Content>\n                    There are no token balances to display. Things you can try:\n                </Message.Content>\n                <Message.List>\n                    <Message.Item>Change the filterstring</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to add additional accounts</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/tokenContracts/'} }>Token Manager</Link> to tracked additional tokens</Message.Item>\n                </Message.List>\n            </Message>\n        }\n    } else {\n        body = <Message>\n            <Message.Header>\n                No accounts\n            </Message.Header>\n            <p>You have no watched or unlocked accounts. Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to setup accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Overview'}/>\n            {hasAccounts && <TokenListFilterContainer target={'balancelist'} />}\n            <Divider/>\n            {body}\n        </React.Fragment>\n    )\n}\n\nOverview.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired,\n}\n\nOverview.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default Overview\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport Overview from './Overview'\nimport {connect} from 'react-redux'\nimport {groupBy} from 'lodash'\n\nclass OverviewContainer extends Component {\n    render() {\n        const {hasAccounts, balancesByToken} = this.props\n        return (\n            <Overview hasAccounts={hasAccounts} balancesByToken={balancesByToken}/>\n        )\n    }\n}\n\nOverviewContainer.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired\n}\n\nOverviewContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const hasAccounts = (state.addresses.allIds.length > 0)\n    const filterIsActive = (state.balance.listState.filter.length > 0)\n\n    // get balanceIds to display\n    const balanceIds = filterIsActive ? state.balance.listState.matchedBalanceIds : state.balance.positiveIds\n    // map IDs to Entries\n    const balanceEntries = balanceIds.map(id => state.balance.byId[id])\n    // now group the balances by token\n    const balancesByToken = groupBy(balanceEntries, 'tokenId')\n\n    return {\n        hasAccounts,\n        balancesByToken,\n    }\n}\n\nexport default connect(mapStateToProps)(OverviewContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Web3Info = (props) => {\n    const {name, id, nodeVersion, block} = props\n    const gitHub = 'https://github.com/TripleSpeeder/TokenStation'\n    const contact = 'michael@m-bauer.org'\n    const srcUrl = 'https://github.com/ethereum-lists/tokens'\n    return (\n        <React.Fragment>\n            <p>\n                Network: {name} ({id}) | Block: {block ? block.number : '?'} | Node version: {nodeVersion}\n            </p>\n            <p>\n                ERC20 contract data origin: <strong><a href={srcUrl} target='_blank' rel='noopener noreferrer'>{srcUrl}</a></strong>\n            </p>\n            <p>\n                GitHub: <strong><a target='_blank' rel='noopener noreferrer' href={gitHub}>{gitHub}</a></strong> | contact: <strong><a href={'mailto:' + contact}>{contact}</a></strong>\n            </p>\n        </React.Fragment>\n    )\n\n}\n\nWeb3Info.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.shape({\n            number: PropTypes.number,\n            timestamp: PropTypes.number\n        }),\n    apiVersion: PropTypes.string,\n    nodeVersion: PropTypes.string,\n}\n\nexport default Web3Info\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport Web3Info from \"./web3Info\"\nimport {Segment} from 'semantic-ui-react'\n\nclass Web3Container extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.filter = null\n    }\n\n    render() {\n        const apiVersion = this.props.web3.version.api\n        return <Segment textAlign='center'>\n            <Web3Info apiVersion={apiVersion}\n                         name={this.props.name}\n                         block={this.props.block}\n                         id={this.props.id}\n                         nodeVersion={this.props.nodeVersion}\n            />\n        </Segment>\n    }\n}\n\nWeb3Container.propTypes = {\n    web3: PropTypes.object,\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.object,\n    nodeVersion: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n    web3: state.web3Instance.web3,\n    name: state.web3Instance.name,\n    id: state.web3Instance.id,\n    block: state.web3Instance.block,\n    nodeVersion: state.web3Instance.nodeVersion\n})\n\nexport default connect(mapStateToProps)(Web3Container)\n","import React from 'react'\nimport {Icon, Menu} from 'semantic-ui-react'\nimport {NavLink} from 'react-router-dom'\n\n\nconst Sidebar = () => {\n    return (\n        <Menu icon='labeled' fluid inverted vertical pointing size={'large'}>\n            <Menu.Item header>TokenStation.io</Menu.Item>\n            <Menu.Item as={NavLink} to='/overview' name='overview'>\n                <Icon name='home' />\n                Overview\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/accounts' name='accounts'>\n                <Icon name='users' />\n                Manage Accounts\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/events' name='events' >\n                <Icon name='exchange' />\n                View Transfer Events\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/tokenContracts' name='tokenContracts'>\n                <Icon name='cube' />\n                Manage Contracts\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from './addressActions'\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst AddressRow = (props) => {\n\n    const {address, addressType, ensName, handleRemove} = props\n\n    let iconName, popupContent, removeButton\n    if (addressType === ADDRESS_TYPE_OWNED) {\n        iconName = 'unlock'\n        popupContent = 'This is one of your addresses'\n        removeButton = null\n    } else {\n        iconName = 'eye'\n        popupContent = 'This is a watch-only address'\n        removeButton = <Button size='tiny' onClick={handleRemove} icon='delete'/>\n    }\n\n    const icon = <Popup trigger={<Icon size='large' name={iconName}/>}\n                        content={popupContent}\n    />\n\n    /*\n    let listProgress = null\n    if (this.props.progressCurrent < this.props.progressTotal) {\n        listProgress = <List.Description>\n            <Progress size='small'\n                      value={this.props.progressCurrent}\n                      total={this.props.progressTotal}\n                      progress='ratio'\n                      precision={1}\n            />\n        </List.Description>\n    }*/\n    return (\n        <Table.Row>\n            <Table.Cell textAlign={'left'} collapsing>\n                {icon}\n            </Table.Cell>\n            <Table.Cell textAlign={'left'}>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n            <Table.Cell textAlign={'right'} collapsing>\n                {removeButton}\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressRow.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nAddressRow.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressRow\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {\n    ADDRESS_BALANCES_STATES, removeAddress, resumeGetBalances\n} from './addressActions'\nimport {BALANCE_STATES} from '../balance/balanceActions'\nimport AddressRow from './AddressRow'\n\n\nclass AddressContainer extends PureComponent {\n\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            resumedAfterRehydrate: false\n        }\n    }\n\n    componentDidMount() {\n        this.checkResumeLoading(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.checkResumeLoading(newProps)\n    }\n\n    checkResumeLoading(props) {\n        // in case address balance was in loading state while hydrating, continue loading\n        if ((props.balancesState === ADDRESS_BALANCES_STATES.HYDRATED_WHILE_LOADING) &&\n            (!this.state.resumedAfterRehydrate)) {\n            this.setState({\n                resumedAfterRehydrate: true\n            })\n            console.log(\"Continue loading balances for \" + props.address)\n            props.resumeGetBalances(props.addressId, props.progressCurrent)\n        }\n    }\n\n    handleRemove = () => {\n        this.props.removeAddress(this.props.addressId)\n    }\n\n    render() {\n        return <AddressRow address={this.props.address}\n                           addressType={this.props.addressType}\n                           ensName={this.props.ensName}\n                           handleRemove={this.handleRemove}\n        />\n    }\n}\n\nAddressContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    removeAddress: PropTypes.func.isRequired,\n    progressTotal: PropTypes.number.isRequired,\n    progressCurrent: PropTypes.number.isRequired\n}\n\nAddressContainer.defaultProps = {}\n\nconst mapStateToProps = (state, ownProps) => {\n    const addressEntry = state.addresses.byId[ownProps.addressId]\n    const progressTotal = state.tokens.listState.total\n    // count all balance entries that include addressId\n    const matchedBalanceEntries = Object.values(state.balance.byId).filter(entry => {\n        return ((entry.addressId === ownProps.addressId) &&\n            (entry.balanceState === BALANCE_STATES.INITIALIZED))\n    })\n    const progressCurrent = matchedBalanceEntries.length\n\n    return {\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        balancesState: addressEntry.balancesState,\n        progressTotal,\n        progressCurrent\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAddress: (addressId) => {\n        dispatch(removeAddress(addressId))\n    },\n    resumeGetBalances: (addressId, startIndex) => {\n        dispatch(resumeGetBalances(addressId, startIndex))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst QueryAddressForm = (props) => {\n\n    const {handleChange, handleSubmit, valid, address,} = props\n\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group inline>\n                <Form.Input width={10}\n                            name='address'\n                            placeholder='Address'\n                            error={!valid}\n                            onChange={handleChange}\n                            value={address}\n                            label={'Add account'}\n                />\n                <Form.Button\n                    content='Submit'\n                    disabled={!valid}\n                    width={6}\n                />\n            </Form.Group>\n        </Form>\n    )\n}\n\nQueryAddressForm.propTypes = {\n    address: PropTypes.string,\n    valid: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nQueryAddressForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default QueryAddressForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\n\nimport {addNewAddress, ADDRESS_TYPE_EXTERNAL} from './addressActions'\nimport QueryAddressForm from './QueryAddressForm'\n\n\nclass QueryAddressFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            valid: false,\n            address: ''\n        }\n        // kraken4='0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e) {\n        const address=e.target.value\n        // check for valid address\n        const valid = (/^(0x)?[0-9a-f]{40}$/i.test(address))\n        this.setState(\n            {\n                valid: valid,\n                address: address,\n            }\n        )\n    }\n\n    handleSubmit = () => {\n        const { address } = this.state\n        this.props.addNewAddress(address, ADDRESS_TYPE_EXTERNAL)\n        this.setState({\n            valid: false,\n            address: ''\n        })\n    }\n\n    render() {\n        return (\n            <QueryAddressForm handleChange={this.handleChange}\n                              handleSubmit={this.handleSubmit}\n                              valid={this.state.valid}\n                              address={this.state.address}\n            />\n        )\n    }\n}\n\nlet mapDispatchToProps = dispatch => ({\n    addNewAddress: (address, type) => {\n        dispatch(addNewAddress(address, type))\n    }\n})\n\nexport default connect(null, mapDispatchToProps)(QueryAddressFormContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Divider, Header, Message, Segment, Table} from 'semantic-ui-react'\nimport AddressContainer from './AddressContainer'\nimport QueryAddressFormContainer from \"./QueryAddressFormContainer\"\nimport {ETH_ENABLE_STATES} from '../web3/web3Actions'\n\nconst AddressList = (props) => {\n    let ownTable, watchTable\n    const {ethEnableState, ethEnable} = props\n    let waitingGrant = (ethEnableState === ETH_ENABLE_STATES.WAITING)\n\n    if (props.ownAddressIds.length) {\n        ownTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.ownAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else if (ethEnableState === ETH_ENABLE_STATES.GRANTED) {\n        // Access granted, but no accounts? Must be either Mist with no accounts shared or locked Metamask.\n        ownTable = <Message>\n            <Message.Header>\n                No personal accounts\n            </Message.Header>\n            <p>You need to share your accounts so they are visible here. Log in to Metamask or share accounts in Mist .</p>\n        </Message>\n    } else {\n        // No accounts and no access. Ask for it.\n        ownTable = <Message>\n            <Message.Header>\n                No access to personal accounts\n            </Message.Header>\n            <p>You can grant access to your personal accounts. This will automatically put the accounts to the watch\n                list.</p>\n            <p><Button primary disabled={waitingGrant} loading={waitingGrant} onClick={ethEnable}>Grant access</Button></p>\n        </Message>\n    }\n\n    if (props.watchAddressIds.length) {\n        watchTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.watchAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else {\n        watchTable = <Message>\n            <Message.Header>\n                No watched accounts\n            </Message.Header>\n            <p>You don't have any watched accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment>\n                <Header dividing as='h2'>Personal Accounts</Header>\n                {ownTable}\n            </Segment>\n            <Segment>\n                <Header dividing as='h2'>Watched Accounts</Header>\n                {watchTable}\n                <Divider/>\n                <QueryAddressFormContainer />\n            </Segment>\n        </React.Fragment>\n    )\n}\n\nAddressList.propTypes = {\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n    ethEnableState: PropTypes.oneOf(Object.values(ETH_ENABLE_STATES)),\n    ethEnable: PropTypes.func.isRequired,\n}\n\nexport default AddressList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED, changeOwnAddresses} from './addressActions'\nimport AddressList from './AddressList'\nimport {ETH_ENABLE_STATES, requestEthEnable} from '../web3/web3Actions'\n\nclass AddressListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.updateWeb3Accounts = this.updateWeb3Accounts.bind(this)\n        this.requestEthEnable = this.requestEthEnable.bind(this)\n        this.checkAccountTimer = 0\n    }\n\n    render() {\n        const ethEnableState = this.props.web3Instance ? this.props.web3Instance.ethEnableState : ETH_ENABLE_STATES.REJECTED\n        return <AddressList watchAddressIds={this.props.watchAddressIds}\n                            ownAddressIds={this.props.ownAddressIds}\n                            ethEnableState={ethEnableState}\n                            ethEnable={this.requestEthEnable}\n        />\n    }\n\n    componentDidMount() {\n        this.initAccounts()\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.web3 && (newProps.web3 !== this.props.web3)) {\n            this.initAccounts(newProps.web3)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.checkAccountTimer) {\n            clearInterval(this.checkAccountTimer)\n            this.checkAccountTimer = 0\n        }\n    }\n\n    initAccounts(web3 = this.props.web3) {\n        if (web3) {\n            if (this.checkAccountTimer) {\n                clearInterval(this.checkAccountTimer)\n                this.checkAccountTimer = 0\n            }\n            this.updateWeb3Accounts(this.props.web3)\n            if (this.props.web3.currentProvider.isMetaMask === true) {\n                console.log(\"Metamask detected. Watching for account changes\")\n                this.checkAccountTimer = setInterval(this.updateWeb3Accounts, 100)\n            }\n        }\n    }\n\n    updateWeb3Accounts(web3 = this.props.web3) {\n        web3.eth.getAccounts((error, accounts) => {\n            if (accounts) {\n                this.props.changeOwnAddresses(accounts)\n            }\n        })\n    }\n\n    requestEthEnable() {\n        this.props.ethEnable()\n    }\n}\n\nAddressListContainer.propTypes = {\n    web3: PropTypes.object,\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n}\n\nAddressListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const ownAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_OWNED))\n    const watchAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_EXTERNAL))\n    return {\n        ownAddressIds,\n        watchAddressIds,\n        web3Instance: state.web3Instance ? state.web3Instance : null,\n        web3: state.web3Instance ? state.web3Instance.web3 : null,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeOwnAddresses: (accounts) => {\n        dispatch(changeOwnAddresses(accounts))\n    },\n    ethEnable: () => {\n        dispatch(requestEthEnable())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer)\n","import React from 'react'\nimport AddressListContainer from '../address/AddressListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Accounts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Accounts'}/>\n            <AddressListContainer />\n        </React.Fragment>\n    )\n}\n\nexport default Accounts\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Form} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst SelectableToken = (props) => {\n\n    const {address, ensName, name, symbol, checked, onChange} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell collapsing>\n                <Form.Checkbox checked={checked} onChange={onChange}/>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{name}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{symbol}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nSelectableToken.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default SelectableToken\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport SelectableToken from \"./SelectableToken\"\nimport {changeTokenTrackingThunk} from './tokenActions'\n\n\nclass SelectableTokenContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, data) {\n        const {checked} = data\n        this.props.onChange(this.props.tokenId, checked)\n    }\n\n    render() {\n        return <SelectableToken id={this.props.tokenId}\n                                address={this.props.tokenAddress}\n                                name={this.props.tokenName}\n                                symbol={this.props.tokenSymbol}\n                                onChange={this.handleChange}\n                                checked={this.props.tokenTracked}\n        />\n    }\n}\n\nSelectableTokenContainer.propTypes = {\n    tokenId: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nSelectableTokenContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n    const tracked = (state.tokens.trackedIds.indexOf(ownProps.tokenId) > -1)\n    return {\n        tokenAddress: token.address,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenTracked: tracked,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (tokenId, checked) => {\n        dispatch(changeTokenTrackingThunk(tokenId, checked))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Message} from 'semantic-ui-react'\nimport SelectableTokenContainer from \"./SelectableTokenContainer\"\n\nconst SelectableTokenList = (props) => {\n\n    const {tokenList} = props\n\n    if (tokenList.length) {\n        return (\n            <Table celled>\n                <Table.Body>\n                {tokenList.map((tokenId) => <SelectableTokenContainer\n                    key={tokenId}\n                    tokenId={tokenId}\n                />)}\n                </Table.Body>\n            </Table>\n        )\n    } else {\n        return (\n            <Message negative>\n                <Message.Header>No token contracts to display.</Message.Header>\n                <Message.Content>Things you can try:</Message.Content>\n                <Message.List items={['change/clear the filterstring', 'check if you are connected to the correct network']}>\n                </Message.List>\n            </Message>\n        )\n    }\n}\n\nSelectableTokenList.propTypes = {\n    tokenList: PropTypes.array.isRequired\n}\n\nexport default SelectableTokenList\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Grid, Divider, Checkbox, Pagination, Container, Dropdown} from 'semantic-ui-react'\nimport TokenListFilterContainer from './TokenListFilterContainer'\nimport SelectableTokenList from \"./SelectableTokenList\"\nimport {changeTokenListPage, clearTokenList, setFilterProps} from './tokenActions'\n\nclass SelectableTokenListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleShowOnlyTrackedChange = this.handleShowOnlyTrackedChange.bind(this)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n        this.handleLoadTokens = this.handleLoadTokens.bind(this)\n    }\n\n    handleShowOnlyTrackedChange(e, data) {\n        const {checked} = data\n        this.props.setShowTracked(checked)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTokenListPage(activePage)\n    }\n\n    handleLoadTokens() {\n        this.props.clearTokenList()\n    }\n\n    render() {\n        let pager = null\n        if (this.props.totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                        <Pagination activePage={this.props.activePage}\n                                    onPageChange={this.handlePaginationChange}\n                                    totalPages={this.props.totalPages}/>\n                    </Container>\n        }\n        return (\n            <React.Fragment>\n                <Grid verticalAlign='middle' columns={2} divided>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Checkbox toggle label='Only show tracked token' checked={this.props.showOnlyTracked} onChange={this.handleShowOnlyTrackedChange} />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                            <TokenListFilterContainer target={'tokenlist'}/>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Dropdown icon={'setting'}>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item text='Reload token list' onClick={this.handleLoadTokens} />\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Divider/>\n                <SelectableTokenList\n                    tokenList={this.props.tokenIds}\n                />\n                {pager}\n            </React.Fragment>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    const listState = state.tokens.listState.listState\n    const itemsPerPage = 20\n    let totalPages = 1\n    const activePage = state.tokens.listState.activePage\n    const filterIsActive = state.tokens.listState.filterIsActive\n    let tokenIds = filterIsActive ? state.tokens.listState.matchedTokenIds : state.tokens.allIds\n    const showOnlyTracked = state.tokens.listState.showOnlyTracked\n    const numVisibleTokens = tokenIds.length\n    if (numVisibleTokens) {\n        totalPages = Math.ceil(numVisibleTokens / itemsPerPage)\n    }\n    const sliceStart = (activePage-1)*itemsPerPage\n    tokenIds = tokenIds.slice(sliceStart, sliceStart+itemsPerPage)\n    return {\n        tokenIds,\n        showOnlyTracked,\n        activePage,\n        totalPages,\n        listState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setShowTracked: (showOnlyTracked) => {\n        dispatch(setFilterProps({showOnlyTracked}))\n    },\n    setTokenListPage: (activePage) => {\n        dispatch(changeTokenListPage(activePage))\n    },\n    clearTokenList: () => {\n        dispatch(clearTokenList())\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenListContainer)\n","import React from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport SelectableTokenListContainer from \"../token/SelectableTokenListContainer\"\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst TokenContracts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Token Contracts'}/>\n            <Message info icon>\n                <Icon name={'info'}/>\n                <Message.Header>Select which tokens to track</Message.Header>\n                <Message.Content>\n                    In the list below, check the tokens you want to keep track of. Use the filter to\n                    quickly find specific tokens. You can filter by token name, symbol or contract address.\n                </Message.Content>\n            </Message>\n            <SelectableTokenListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default TokenContracts\n","import React, {Component} from 'react'\nimport {Container, Dropdown, Form, Grid} from 'semantic-ui-react'\nimport {changeSelectorTokenId} from '../token/tokenActions'\nimport {connect} from 'react-redux'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventFilterContainer extends Component {\n\n    render() {\n        const {\n            tokenOptions, selectedTokenId, onTokenSelect,\n            addressOptions, selectedAddressId, onAddressSelect,\n        } = this.props\n\n        return (\n            <Container>\n\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>Show Transfers of token:</label>\n                                <Dropdown fluid search selection\n                                          options={tokenOptions}\n                                          onChange={onTokenSelect}\n                                          value={selectedTokenId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>To/From Account:</label>\n                                <Dropdown fluid search selection\n                                          options={addressOptions}\n                                          onChange={onAddressSelect}\n                                          value={selectedAddressId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Container>\n        )\n    }\n}\n\nEventFilterContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventFilterContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n\n    const selectedTokenId = state.tokens.selector.selectedTokenId\n    const tokenOptions = state.tokens.trackedIds.map(id => (\n        {\n            key: id,\n            value: id,\n            text: state.tokens.byId[id].name + \" (\" + state.tokens.byId[id].symbol + \")\"\n        }\n    ))\n    tokenOptions.sort((a, b) => (a.text > b.text))\n\n    const selectedAddressId = state.addresses.selector.selectedAddressId\n    const addressOptions = state.addresses.allIds.map(id =>\n        ({\n            key: id,\n            value: id,\n            text: id,\n        })\n    )\n    /*\n    addressOptions.push({\n        key: -1,\n        value: -1,\n        text: 'All Accounts'\n    })*/\n    addressOptions.sort((a, b) => (a.key > b.key))\n\n    return {\n        tokenOptions,\n        selectedTokenId,\n        addressOptions,\n        selectedAddressId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTokenSelect: (e, {value}) => {\n            dispatch(changeSelectorTokenId(value))\n        },\n        onAddressSelect: (e, {value}) => {\n            dispatch(changeSelectorAddressId(value))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFilterContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, } from 'semantic-ui-react'\n\nconst EventLoader = (props) => {\n    const {loading, loadingFromBlock, loadingToBlock, resultCount, resultFromBlock, currentChunk, maxChunks,\n        resultToBlock, onLoadMore, canLoadMore} = props\n\n    let button = <Button icon disabled={!canLoadMore} onClick={onLoadMore} labelPosition={'left'}><Icon name={'search'}/>Load more</Button>\n\n    if (loading) {\n        button = <Message warning icon>\n                    <Icon loading name={'circle notched'}/>\n            <Message.Content>\n                <Message.Header>Loading events</Message.Header>\n                Scanning {loadingFromBlock} - {loadingToBlock} - Chunk {currentChunk}/{maxChunks}\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Grid verticalAlign='middle' columns={2}>\n            <Grid.Row>\n                <Grid.Column >\n                    <Message info icon>\n                        <Icon name={'exchange'}/>\n                        <Message.Content>\n                            <Message.Header>Showing {resultCount} transfer events</Message.Header>\n                             Block {resultFromBlock} to {resultToBlock}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n                <Grid.Column>\n                    {button}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nEventLoader.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loadingFromBlock: PropTypes.number,\n    loadingToBlock: PropTypes.number,\n    loadingCurrentBlock: PropTypes.number,\n    resultCount: PropTypes.number.isRequired,\n    resultFromBlock: PropTypes.number.isRequired,\n    resultFromBlockDate: PropTypes.string.isRequired,\n    resultToBlock: PropTypes.number.isRequired,\n    onLoadMore: PropTypes.func.isRequired,\n    currentChunk: PropTypes.number.isRequired,\n    maxChunks: PropTypes.number.isRequired,\n    canLoadMore: PropTypes.bool.isRequired,\n}\n\nEventLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default EventLoader\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport EventLoader from './EventLoader'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport {loadTokenTransferEvents} from '../token/tokenActions'\n\n\nclass EventLoaderContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.loadMoreEvents = this.loadMoreEvents.bind(this)\n    }\n\n    componentDidMount() {\n        EventLoaderContainer.checkEventsLoaded(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventLoaderContainer.checkEventsLoaded(newProps)\n    }\n\n    static checkEventsLoaded(props) {\n        if (props.currentBlock && props.aceId && (props.hasAceEntry === false)) {\n            // I have an aceID, but no according entry. Better start loading...\n            //const rangeEnd = props.currentBlock\n            //const rangeStart = rangeEnd - 10000\n            console.log(\"Loading events \"/* + rangeStart + \"-\" + rangeEnd*/)\n            props.loadTokenTransferEvents(\n                0,\n                0,\n                props.tokenId,\n                props.addressId\n            )\n        }\n    }\n\n    loadMoreEvents() {\n        // query the previous 1000 blocks for token transfers to/from my addresses\n        const rangeEnd = this.props.resultFromBlock ? this.props.resultFromBlock : this.props.currentBlock\n        const rangeStart = rangeEnd - 10000\n        console.log(\"Loading events \" + rangeStart + \"-\" + rangeEnd)\n        this.props.loadTokenTransferEvents(\n            rangeStart,\n            rangeEnd,\n            this.props.tokenId,\n            this.props.addressId\n        )\n    }\n\n    render() {\n        const {\n            loading, resultCount, resultFromBlock, resultFromBlockDate, resultToBlock, canLoadMore,\n            loadingFromBlock, loadingToBlock, loadingCurrentBlock, currentChunk, maxChunks } = this.props\n        return (\n            <EventLoader\n                loading={loading}\n                resultCount={resultCount}\n                resultFromBlock={resultFromBlock}\n                resultFromBlockDate={resultFromBlockDate}\n                resultToBlock={resultToBlock}\n                onLoadMore={this.loadMoreEvents}\n                loadingFromBlock={loadingFromBlock}\n                loadingToBlock={loadingToBlock}\n                loadingCurrentBlock={loadingCurrentBlock}\n                currentChunk={currentChunk}\n                maxChunks={maxChunks}\n                canLoadMore={canLoadMore}\n            />\n        )\n    }\n}\n\nEventLoaderContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventLoaderContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    let resultCount = 0\n    let loading = false\n    let resultFromBlock = 0\n    let resultToBlock = 0\n    let resultFromBlockDate = 'XXX'\n    let aceId = undefined\n    let aceEntry = undefined\n    let loadingFromBlock = 0\n    let loadingToBlock = 0\n    let loadingCurrentBlock = 0\n    let tokenId = state.tokens.selector.selectedTokenId\n    // make sure selected token is actually existing and being tracked. Might be an old token from\n    // browser localstorage or from another network\n    if ((state.tokens.allIds.indexOf(tokenId) === -1) || (state.tokens.trackedIds.indexOf(tokenId) ===-1))\n    {\n        tokenId = undefined\n    }\n    const addressId = state.addresses.selector.selectedAddressId\n    const currentBlock = state.web3Instance.block.number\n    const currentChunk = state.events.listState.currentChunk\n    const maxChunks = state.events.listState.maxChunks\n    const canLoadMore = Boolean(tokenId && addressId)\n    if (tokenId && addressId) {\n        aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n        if (aceEntry) {\n            // okay, entry existing. Now look at checked block range\n            resultFromBlock = aceEntry.firstBlock\n            resultToBlock = aceEntry.lastBlock\n            resultCount = aceEntry.eventIds.length\n            // is aceEntry currently being loaded?\n            loading = aceEntry.isLoading\n            loadingFromBlock = aceEntry.loadingFromBlock\n            loadingToBlock = aceEntry.loadingToBlock\n            loadingCurrentBlock = aceEntry.loadingCurrentBlock\n        }\n    }\n\n    return {\n        loading,\n        resultCount,\n        resultFromBlock,\n        resultFromBlockDate,\n        resultToBlock,\n        currentBlock,\n        tokenId,\n        addressId,\n        aceId,\n        hasAceEntry: Boolean(aceEntry),\n        loadingToBlock,\n        loadingFromBlock,\n        loadingCurrentBlock,\n        currentChunk,\n        maxChunks,\n        canLoadMore\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenTransferEvents: (firstBlock, lastBlock, tokenId, addressId) => {\n        dispatch(loadTokenTransferEvents(tokenId, firstBlock, lastBlock, [addressId]))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventLoaderContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\nconst TxHashDisplay = (props) => {\n    const {txHash} = props\n    const shortHash = txHash.slice(0, 10).concat('...')\n    const trigger = <span>{shortHash}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={txHash}\n        />\n    )\n}\n\nTxHashDisplay.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    txHash: PropTypes.string.isRequired\n}\n\n\nexport default TxHashDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Table} from 'semantic-ui-react'\nimport TxHashDisplay from '../common/TxHashDisplay'\nimport AddressDisplay from '../common/AddressDisplay'\n\nexport const TRANSFER_EVENT_TYPES = {\n    NEUTRAL: 'neutral',\n    POSITIVE: 'postivie',\n    NEGATIVE: 'negative'\n}\n\nconst TransferEvent = (props) => {\n    const {txHash, blockNumber, from, fromENS, to, toENS, type} = props\n    const quantity = props.quantity.toFixed(6)\n    let icon = null\n    let positive = false\n    let negative = false\n    switch(type) {\n        case TRANSFER_EVENT_TYPES.POSITIVE:\n            icon = <Icon name='plus' color='green' circular/>\n            positive = true\n            break\n        case TRANSFER_EVENT_TYPES.NEGATIVE:\n            icon = <Icon name='minus' color='red' circular/>\n            negative = true\n            break\n        case TRANSFER_EVENT_TYPES.NEUTRAL:\n        default:\n            // no icon, neither positive nor negative hint\n    }\n\n    return (\n        <React.Fragment>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>#: </Table.Cell>\n                <Table.Cell><strong>{blockNumber}</strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>From: </Table.Cell>\n                <Table.Cell><AddressDisplay address={from} ensName={fromENS}/></Table.Cell>\n                <Table.Cell rowSpan='2' textAlign={'right'}>{icon}</Table.Cell>\n                <Table.Cell rowSpan='2' positive={positive} negative={negative} textAlign={'right'}>{quantity}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>Tx: </Table.Cell>\n                <Table.Cell><strong><TxHashDisplay txHash={txHash}/></strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>To: </Table.Cell>\n                <Table.Cell><AddressDisplay address={to} ensName={toENS}/></Table.Cell>\n            </Table.Row>\n        </React.Fragment>\n    )\n}\n\nTransferEvent.propTypes = {\n    txHash: PropTypes.string.isRequired,\n    blockNumber: PropTypes.number.isRequired,\n    from: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    fromENS: PropTypes.string,\n    toENS: PropTypes.string,\n    type: PropTypes.oneOf([\n        TRANSFER_EVENT_TYPES.NEUTRAL,\n        TRANSFER_EVENT_TYPES.POSITIVE,\n        TRANSFER_EVENT_TYPES.NEGATIVE\n    ]).isRequired,\n    quantity: PropTypes.object.isRequired, // BigNum\n}\n\nTransferEvent.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEvent\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport TransferEvent, {TRANSFER_EVENT_TYPES} from './TransferEvent'\n\nclass TransferEventContainer extends PureComponent {\n    render() {\n        const {txHash, blockNumber, from, to, type, quantity, positive, negative} = this.props\n        return (\n            <TransferEvent blockNumber={blockNumber}\n                           from={from}\n                           to={to}\n                           quantity={quantity}\n                           txHash={txHash}\n                           type={type}\n                           positive={positive}\n                           negative={negative}\n            />\n        )\n    }\n}\n\nTransferEventContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventId: PropTypes.string.isRequired,\n}\n\nTransferEventContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const transferEvent = state.events.byId[ownProps.transferEventId]\n    const addressId = state.addresses.selector.selectedAddressId\n    const rawEvent = transferEvent.transferEvent\n    const token = state.tokens.byId[transferEvent.tokenId]\n    const quantity = rawEvent.args._value.dividedBy(token.decimals)\n    const from = rawEvent.args._from\n    const to = rawEvent.args._to\n    // events that are not to/from one of the watched accounts are neutral\n    let type = TRANSFER_EVENT_TYPES.NEUTRAL\n    if (addressId) {\n        // check if transfer is to/from own address\n        type = addressId.toLowerCase() === from ? TRANSFER_EVENT_TYPES.NEGATIVE : TRANSFER_EVENT_TYPES.POSITIVE\n    }\n    return {\n        txHash: rawEvent.transactionHash,\n        blockNumber: rawEvent.blockNumber,\n        from,\n        to,\n        type,\n        quantity,\n    }\n}\n\nexport default connect(mapStateToProps)(TransferEventContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table} from 'semantic-ui-react'\nimport TransferEventContainer from './TransferEventContainer'\n\nconst TransferEventsList = (props) => {\n    return (\n        <Table compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>Block#/TransactionHash</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>From/To</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'right'}>Quantity</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {props.transferEventIds.map(transferEventId =>\n                    <TransferEventContainer key={transferEventId}\n                                            transferEventId={transferEventId}\n                    />\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n\nTransferEventsList.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventIds: PropTypes.array.isRequired,\n}\n\nTransferEventsList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEventsList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport TransferEventsList from './TransferEventsList'\nimport {Container, Pagination} from 'semantic-ui-react'\nimport {changeTransferEventListPage} from './eventActions'\n\nclass TransferEventsListContainer extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTransferEventListPage(activePage)\n    }\n\n    render() {\n        const {aceEventIds, totalPages, activePage} = this.props\n\n        let pager = null\n        if (totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                <Pagination activePage={activePage}\n                            onPageChange={this.handlePaginationChange}\n                            totalPages={totalPages}/>\n            </Container>\n        }\n\n        return (\n            <React.Fragment>\n                <TransferEventsList transferEventIds={aceEventIds}/>\n                {pager}\n            </React.Fragment>\n        )\n    }\n}\n\nTransferEventsListContainer.propTypes = {\n    token: PropTypes.object\n}\n\nTransferEventsListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    const tokenId = state.tokens.selector.selectedTokenId\n    const addressId = state.addresses.selector.selectedAddressId\n    const activePage = state.events.listState.activePage\n\n    const itemsPerPage = 15\n    let totalPages = 1\n    let aceEntry = undefined\n    let aceEventIds = []\n\n    // first try to get aceEntry\n    if (tokenId && addressId) {\n        const aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n    }\n\n    // if there is an aceEntry get actual events and prepare paginator\n    if (aceEntry) {\n        aceEventIds = aceEntry.eventIds\n        totalPages = Math.ceil(aceEventIds.length / itemsPerPage)\n        const sliceStart = (activePage-1)*itemsPerPage\n        aceEventIds = aceEventIds.slice(sliceStart, sliceStart+itemsPerPage)\n    }\n\n    return {\n        aceEventIds,\n        activePage,\n        totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setTransferEventListPage: (activePage) => {\n        dispatch(changeTransferEventListPage(activePage))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferEventsListContainer)\n","import React from 'react'\nimport EventFilterContainer from '../event/EventFilterContainer'\nimport EventLoaderContainer from '../event/EventLoaderContainer'\nimport TransferEventsListContainer from '../event/TransferEventsListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Events = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Transfer Events'}/>\n            <EventFilterContainer/>\n            <EventLoaderContainer/>\n            <TransferEventsListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default Events\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {changeSelectorTokenId} from '../token/tokenActions'\nimport Events from './Events'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventsContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        EventsContainer.mapRouteParamsToState(props)\n    }\n\n    /* If route params contain tokenId and/or address trigger according actions to have them in store */\n    static mapRouteParamsToState(props) {\n        if (props.match.params.tokenId) {\n            props.setSelectedToken(props.match.params.tokenId)\n            if (props.match.params.address) {\n                props.setSelectedAddress(props.match.params.address)\n            } else {\n                // if a token is provided, but no address -> make sure to display events of all watched addresses\n                props.setSelectedAddress(undefined)\n            }\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventsContainer.mapRouteParamsToState(newProps)\n    }\n\n    render() {\n        return <Events/>\n    }\n}\n\nEventsContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventsContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedToken: (tokenId) => {\n        dispatch(changeSelectorTokenId(tokenId))\n    },\n    setSelectedAddress: (address) => {\n        dispatch(changeSelectorAddressId(address))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Message} from 'semantic-ui-react'\n\nconst NetworkWarning = (props) => {\n    const {networkId, networkName} = props\n\n    return(\n        <Message size={'small'} icon warning>\n            <Icon name='warning' />\n            <Message.Content>\n                <Message.Header>\n                    You are not connected to mainnet!\n                </Message.Header>\n                Your current network: {networkName} (ID: {networkId})\n            </Message.Content>\n        </Message>\n    )\n}\n\nNetworkWarning.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired\n}\n\n\nexport default NetworkWarning\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport NetworkWarning from './NetworkWarning'\nimport Grid from 'semantic-ui-react/dist/es/collections/Grid/Grid'\n\nclass NetworkWarningController extends Component {\n    render() {\n        const {networkId, networkName} = this.props\n        if (networkId === 1) {\n            // mainnet. No need for a warning!\n            return null\n        }\n\n        return (\n            <Grid.Row>\n                <NetworkWarning networkId={networkId} networkName={networkName}/>\n            </Grid.Row>\n        )\n    }\n}\n\nNetworkWarningController.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => {\n    return {\n        networkId: state.web3Instance.id,\n        networkName: state.web3Instance.name,\n    }\n}\n\nexport default connect(mapStateToProps)(NetworkWarningController)\n","import React, {Component} from 'react'\nimport OverviewContainer from '../segments/OverviewContainer'\nimport Web3Container from '../web3/web3Container'\nimport {Grid} from 'semantic-ui-react'\nimport {Route, Switch} from 'react-router-dom'\nimport Sidebar from '../segments/Sidebar'\nimport Accounts from '../segments/Accounts'\nimport TokenContracts from '../segments/TokenContracts'\nimport EventsContainer from '../segments/EventsContainer'\nimport NetworkWarningController from '../web3/NetworkWarningController'\n\nclass LayoutContainer extends Component {\n    render() {\n        const NoMatch = ({ location }) => (\n            <div>\n                <h3>No match for <code>{location.pathname}</code></h3>\n            </div>\n        )\n\n        return (\n            <Grid padded={'vertically'}>\n                <NetworkWarningController/>\n                <Grid.Row>\n                    <Grid.Column width={4} /*style={{ backgroundColor: 'rgb(27, 28, 29)' }}*/>\n                        <Sidebar/>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Switch>\n                            <Route exact path='/' component={OverviewContainer}/>\n                            <Route exact path='/overview/' component={OverviewContainer}/>\n                            <Route path='/accounts/' component={Accounts}/>\n                            <Route path='/events/:tokenId/:address' component={EventsContainer}/>\n                            <Route path='/events/:tokenId/' component={EventsContainer}/>\n                            <Route path='/events/' component={EventsContainer}/>\n                            <Route path='/tokenContracts/' component={TokenContracts}/>\n\n                            <Route component={NoMatch} />\n                        </Switch>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Web3Container/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default LayoutContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Icon, Modal} from 'semantic-ui-react'\n\nconst ModalLoader = (props) => {\n    const {content} = props\n    return (\n        <Modal open={true}>\n            <Header>\n                <Icon loading name={'spinner'}></Icon>\n                <Header.Content>\n                    {content}\n                </Header.Content>\n            </Header>\n        </Modal>\n    )\n}\n\nModalLoader.propTypes = {\n    content: PropTypes.string.isRequired\n}\n\nModalLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ModalLoader\n","import React, {Component, Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {loadTokenList, TOKEN_LIST_STATES} from './tokenActions'\nimport ModalLoader from '../common/ModalLoader'\n\nclass TokenLoaderGate extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.tokenListUrl = \"/tokens_1.json\"\n    }\n\n    componentDidMount() {\n        if (this.props.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(this.props)\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(newProps)\n        }\n    }\n\n    loadTokenList(props) {\n        if (props.networkId >=1 ) {\n            const url = \"/tokens_\" + props.networkId + \".json\"\n            props.loadTokenList(url)\n        }\n    }\n\n    render() {\n        if (this.props.listState === TOKEN_LIST_STATES.INITIALIZED)\n        {\n            // Load the dapp.\n            return Children.only(this.props.children)\n        }\n\n        return(\n            // Display a loading indicator.\n            <ModalLoader content={\"Loading token contracts\"}/>\n        )\n    }}\n\nTokenLoaderGate.propTypes = {\n    listState: PropTypes.string\n}\n\nconst mapStateToProps = (state) => ({\n    listState: state.tokens.listState.listState,\n    networkId: state.web3Instance.id,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenList: (url) => {\n        dispatch(loadTokenList(url))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenLoaderGate)\n","import React, {Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {WEB3_STATES} from './web3Actions'\nimport ModalLoader from '../common/ModalLoader'\nimport {Button, Icon, Modal} from 'semantic-ui-react'\n\nconst Web3Gate = (props) => {\n    const {state, onRetry, children} = props\n\n    switch (state) {\n        case WEB3_STATES.INITIALIZED: {\n            // Gateway passed, render actual content.\n            return Children.only(children)\n        }\n        case WEB3_STATES.ERROR:\n            return (\n                <Modal open={true}>\n                    <Modal.Header>\n                        <Icon name='exclamation'/> No web3 found\n                    </Modal.Header>\n                    <Modal.Content>\n                        <p>Failed to initialize web3. Please enable web3 in your browser, e.g by using the Metamask extension.</p>\n                        <p><Button onClick={onRetry}>Retry</Button></p>\n                    </Modal.Content>\n                </Modal>\n\n            )\n        case WEB3_STATES.LOADING:\n        default: {\n            return (\n                <ModalLoader content={'Waiting on web3 initialization'}/>\n            )\n        }\n    }\n}\n\nWeb3Gate.propTypes = {\n    state: PropTypes.string.isRequired,\n    onRetry: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n}\n\nexport default Web3Gate\n","import React, {Component} from 'react'\nimport {initialize, stopBlockFilter} from './web3Actions'\nimport {connect} from 'react-redux'\nimport Web3Gate from './web3Gate'\n\nclass Web3GateContainer extends Component {\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n    componentWillUnmount() {\n        // Stop listening to new block events\n        this.props.stopBlockFilter()\n    }\n\n    onRetry = () => {\n        this.props.initialize()\n    }\n\n    render() {\n        const {state, children} = this.props\n        return <Web3Gate state={state} onRetry={this.onRetry} children={children}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    state: state.web3Instance.state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialize: () => {\n        dispatch(initialize())\n    },\n    stopBlockFilter: () => {\n        dispatch(stopBlockFilter())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Web3GateContainer)\n","import React, {Component} from 'react'\nimport {Provider} from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store'\nimport {Container} from 'semantic-ui-react'\nimport { PersistGate } from 'redux-persist/lib/integration/react'\nimport ModalRoot from './modules/modal/ModalRoot'\nimport LayoutContainer from './modules/layout/LayoutContainer'\nimport TokenLoaderGate from './modules/token/TokenLoaderGate'\nimport Web3GateContainer from './modules/web3/web3GateContainer'\n\nlet {store, persistor} = configureStore()\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate persistor={persistor}>\n                    <Web3GateContainer>\n                        <TokenLoaderGate>\n                            <BrowserRouter>\n                                <Container>\n                                    <ModalRoot/>\n                                    <LayoutContainer/>\n                                </Container>\n                            </BrowserRouter>\n                        </TokenLoaderGate>\n                    </Web3GateContainer>\n                </PersistGate>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}