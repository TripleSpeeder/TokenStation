{"version":3,"sources":["modules/balance/balanceActions.js","modules/event/reducers/addressContractEventsByIdReducer.js","modules/event/eventActions.js","utils/localStorageWrapper.js","modules/token/tokenActions.js","modules/token/reducers/ListStateReducer.js","modules/token/reducers/TokensByIdReducer.js","modules/token/reducers/AllIdsReducer.js","modules/token/reducers/volatileTokensByIdReducer.js","modules/token/reducers/TrackedIdsReducer.js","utils/getWeb3.js","utils/promisifyWeb3.js","modules/web3/web3Actions.js","modules/token/reducers/SelectorReducer.js","modules/token/reducers/tokenReducer.js","utils/reducerUtils.js","modules/web3/web3Reducer.js","modules/address/addressActions.js","modules/address/reducers/addressByIdReducer.js","modules/address/reducers/allAddressIdsReducer.js","modules/address/reducers/addressSelectorReducer.js","modules/address/reducers/addressReducer.js","modules/balance/reducer/balanceByIdReducer.js","modules/balance/reducer/allBalancesReducer.js","modules/balance/reducer/positiveBalancesReducer.js","modules/balance/reducer/BalanceListStateReducer.js","modules/balance/reducer/balanceReducer.js","modules/event/reducers/eventByIdReducer.js","modules/event/reducers/allEventIdsReducer.js","modules/event/reducers/listStateReducer.js","modules/event/reducers/eventReducer.js","modules/modal/modalActions.js","modules/modal/modalReducer.js","store.js","modules/modal/TestModal.js","modules/forms/transferForm/TransferForm.js","modules/forms/transferForm/TransferFormContainer.js","modules/modal/ModalRoot.js","modules/balance/Balance.js","modules/common/AddressDisplay.js","modules/balance/BalanceItemDetail.js","modules/balance/BalanceItemDetailContainer.js","modules/balance/BalanceItem.js","modules/balance/BalanceItemContainer.js","modules/balance/BalancesList.js","modules/token/TokenListFilter.js","modules/token/TokenListFilterContainer.js","modules/screens/ScreenHeader.js","modules/segments/Overview.js","modules/segments/OverviewContainer.js","modules/web3/web3Info.js","modules/web3/web3Container.js","modules/segments/Sidebar.js","modules/address/AddressRow.js","modules/address/AddressContainer.js","modules/address/QueryAddressForm.js","modules/address/QueryAddressFormContainer.js","modules/address/AddressList.js","modules/address/AddressListContainer.js","modules/segments/Accounts.js","modules/token/SelectableToken.js","modules/token/SelectableTokenContainer.js","modules/token/SelectableTokenList.js","modules/token/SelectableTokenListContainer.js","modules/segments/TokenContracts.js","modules/event/EventFilterContainer.js","modules/event/EventLoader.js","modules/event/EventLoaderContainer.js","modules/common/TxHashDisplay.js","modules/event/TransferEvent.js","modules/event/TransferEventContainer.js","modules/event/TransferEventsList.js","modules/event/TransferEventsListContainer.js","modules/segments/Events.js","modules/segments/EventsContainer.js","modules/web3/NetworkWarning.js","modules/web3/NetworkWarningController.js","modules/layout/LayoutContainer.js","modules/common/ModalLoader.js","modules/token/TokenLoaderGate.js","modules/web3/web3Gate.js","modules/web3/web3GateContainer.js","utils/LocalStorageGate.js","App.js","registerServiceWorker.js","index.js"],"names":["BALANCE_STATES","VIRGIN","LOADING","INITIALIZED","SET_BALANCE","SET_BALANCE_STATE","CREATE_BALANCE_ENTRY","createBalanceEntry","balanceId","addressId","tokenId","type","payload","DELETE_BALANCE_ENTRY","deleteBalanceEntry","CHANGE_BALANCE_FILTER_PROPS","setBalanceFilterString","filterString","dispatch","getState","searchString","toLowerCase","balanceIds","balance","allIds","length","filter","balanceEntry","byId","token","tokens","name","includes","symbol","address","matchedBalanceIds","setBalanceByAddressAndToken","buildBalanceId","undefined","setBalance","balanceStateChanged","balanceState","setBalanceState","reloadBalance","loadTokenBalance","ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL","buildAddressContractEventId","ADD_EVENTS","CHANGE_TRANSFEREVENTLIST_PAGE","CREATE_ACE_ENTRY","createAceEntry","ACE_ENTRIES_LOADING_CHANGE","aceEntriesLoadingChange","addressIds","isLoading","loadingFromBlock","loadingToBlock","loadingCurrentBlock","aceIds","map","ACE_ENTRIES_BLOCK_RANGE_CHANGE","aceEntriesBlockRangeChange","fromBlock","toBlock","SET_ACE_ENTRY_EVENT_IDS","CHANGE_EVENT_SCAN_PROPS","aceEntriesLoadingChangeWrapper","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","forEach","aceId","events","aceById","stop","_x","_x2","apply","this","arguments","addEventsThunk","aceIdsToSort","watchedAddressIds","addresses","transferEvent","_transferEvent$args","args","_from","_to","aceFromId","push","aceToId","addEvents","eventsById","eventIds","slice","sort","eventA","eventB","blockNumber","setAceEntryEventIds","buildEventId","event","transactionHash","logIndex","TRACKED_TOKEN_KEYS","SELECTED_TOKEN_KEY","WATCHED_ADDRESSES","storeLocalData","key","data","localStorage","setItem","JSON","stringify","getLocalData","defaultValue","parse","getItem","e","ETH_TOKEN_MAGIC_ADDRESS","ETH_TOKEN_DUMMY","decimals","TOKEN_LIST_STATES","CHANGE_TOKEN_LIST_STATE","tokenListStateChanged","tokenListState","listState","ADD_TOKEN","addToken","tokenID","ADD_VOLATILE_TOKEN","IS_LOADING_TOKEN","loadingTokenChanged","SET_TOKEN_SUPPLY","IS_LOADING_SUPPLY","SET_TOKEN_CONTRACT_INSTANCE","setTokenContractInstance","contractInstance","SET_TOKEN_LOADING_PROMISE","changeSelectorTokenIdThunk","selectedTokenId","changeSelectorTokenId","selector","CHANGE_SELECTOR_TOKENID","CLEAR_TOKEN_LIST","clearTokenList","CHANGE_VALID_TOKEN_COUNT","CHANGE_FILTER_PROPS","RESET_DISPLAY_COUNT","CHANGE_TOKEN_TRACKING","changeTokenTracking","doTrack","CHANGE_TOKEN_LIST_PAGE","changeTokenListPage","activePage","changeTokenTrackingThunk","trackedIds","values","clearTokenBalances","setFilterProps","filterProps","showOnlyTracked","oldFilterString","oldShowOnlyTracked","filterIsActive","tokenIds","matchedTokenIds","changeFilterProps","mapListToken","listToken","id","Math","pow","description","website","imageUrl","supply","loading","instantiateTokenContract","loadingPromise","Promise","_ref2","_callee2","resolve","reject","web3","ERC20Contract","_context2","web3Instance","contract","abi","erc20ABI","setProvider","currentProvider","at","sent","_x3","_x4","setTokenLoadingPromise","loadMultiTokenBalances","tokenIDs","_ref3","_callee4","_context4","_ref4","_callee3","volatileToken","_context3","eth","getBalancePromise","verifyContractInstance","volatileById","balanceOf","_x7","_x5","_x6","_callee7","_context8","abrupt","LISTSTATE_INITIAL","total","displayCount","TOKENS_BY_ID_INITIAL","ALL_TOKENS_INITIAL","VOLATILE_TOKENS_BY_ID_INITIAL","addTokenId","state","action","objectSpread","defineProperty","TRACKED_TOKENS_INITIAL","getWeb3","window","addEventListener","myWeb3","ethereum","Web3","console","log","error","promisify","syncGetters","db","net","personal","shh","version","keys","group","method","indexOf","value","callbackToResolve","WEB3_STATES","UNINITIALIZED","ERROR","ETH_ENABLE_STATES","REJECTED","WAITING","GRANTED","SET_WEB3_STATE","setWeb3State","SET_ETH_ENABLE_STATE","setEthEnableState","ethEnableState","SET_WEB3INSTANCE","setWeb3Instance","SET_ENS","setENS","ens","SET_CURRENT_BLOCK","setCurrentBlock","block","SET_NETWORK","setNetwork","previousId","SET_NODE_VERSION","setNodeVersion","nodeVersion","SET_BLOCK_FILTER","setBlockFilter","blockFilter","stopBlockFilter","stopWatching","result","getNetworkName","networkId","network","SELECTOR_INITIAL","selctedTokenId","combineReducers","count","changeValidTokenCount","resetDisplayCount","tokenListPageChanged","addTokenEntry","setTokenSupply","loadingSupplyChanged","newEventIds","transferEventId","warn","concat","addTransferEvents","trackedIndex","updateObject","oldObject","newValues","assign","WEB3_INITIAL","number","timestamp","ADDRESS_TYPE_EXTERNAL","ADDRESS_TYPE_OWNED","ADDRESS_BALANCES_STATES","CHANGE_ADDRESS_BALANCES_STATE","ADD_ADDRESS","addAddress","ensName","removeAddressThunk","REMOVE_ADDRESS","removeAddress","clearAddressBalances","addressesToStore","o","CHANGE_ADDRESS_TYPE","changeAddressType","newType","addNewAddress","CHANGE_SELECTOR_ADDRESSID","changeSelectorAddressId","selectedAddressId","ADDRESS_BY_ID_INITIAL","ALL_ADDRESSES_INITIAL","balancesState","addAddressEntry","newState","removeAddressEntry","addressEntry","addressBalancesState","changeAddressBalancesState","addAddressId","entryId","removeAddressId","BALANCE_BY_ID_INITIAL","ALL_BALANCES_INITIAL","POSITIVE_BALANCES_INITIAL","BALANCE_LISTSTATE_INITIAL","BigNumber","index","splice","positiveIds","isZero","entry","greaterThan","changeBalanceFilterProps","EVENT_BY_ID_INITIAL","ALL_EVENTS_INITIAL","currentChunk","maxChunks","addEventIds","acesId","firstBlock","lastBlock","aceEntry","min","max","transferEventListPageChanged","_payload$props","props","changeEventScanProps","resetPager","SHOW_MODAL","HIDE_MODAL","MODAL_INITIAL","modalType","modalProps","reducer","modal","showModal","logger","createLogger","diff","TestModal","closeModal","react_default","createElement","Modal","open","onClose","Header","Content","Description","defaultProps","TransferForm","onValidSubmit","fromAddress","tokenName","tokenSymbol","tokenBalance","etherBalance","gasCosts","errorLabel","Label","color","pointing","addValidationRule","isAddress","bnValue","toBigNumber","bnMax","lessThanOrEqualTo","err","size","closeIcon","formsy_semantic_ui_react_lib","noValidate","Segment","Grid","columns","Row","Column","width","List","Item","toFixed","Group","placeholder","required","instantValidation","validations","validationErrors","isEthereumAddress","isDefaultRequiredValue","label","labelPosition","isNumeric","isLessThanOrEqual","readOnly","Button","content","TransferFormContainer","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","formData","alert","amount","toAddressValid","amountValid","rateValid","_this$props","transferForm_TransferForm","Component","MODAL_COMPONENTS","TEST_MODAL","TRANSFER_FORM_CONTAINER","connect","ownProps","tokenBalanceId","dividedBy","transferToken","_ref6","_callee6","_context7","_x13","_x14","ModalRoot","SpecificModal","Balance","numDecimals","trigger","Popup","dp","AddressDisplay","BalanceItemDetail","url","Table","Cell","react_router_dom","to","common_AddressDisplay","balance_Balance","circular","icon","onClick","BalanceItemDetailContainer","balance_BalanceItemDetail","addressType","openTransferModal","BalanceItem","tableBody","expanded","tokenBalances","tokenEventsLinkOptions","toggleCollapse","eventLink","tableHeader","HeaderCell","Statistic","Value","Body","balance_BalanceItemDetailContainer","compact","BalanceItemContainer","bind","assertThisInitialized","_this2","setState","balance_BalanceItem","_","reduce","sum","plus","pathname","BalancesList","entries","balancesByToken","balance_BalanceItemContainer","TokenListFilter","handleChange","clearFilter","Icon","link","Input","onChange","fluid","TokenListFilterContainer","setFilterString","token_TokenListFilter","displayed","target","ScreenHeader","title","as","inverted","textAlign","style","marginTop","Overview","body","hasAccounts","balance_BalancesList","Message","Fragment","screens_ScreenHeader","token_TokenListFilterContainer","Divider","OverviewContainer","segments_Overview","balanceEntries","groupBy","Web3Info","gitHub","srcUrl","href","rel","Web3Container","apiVersion","api","web3Info","Sidebar","Menu","vertical","header","NavLink","AddressRow","iconName","popupContent","removeButton","handleRemove","collapsing","AddressContainer","address_AddressRow","PureComponent","progressTotal","progressCurrent","QueryAddressForm","handleSubmit","disabled","Form","onSubmit","inline","addressStates","ADDRESS_RESOLVING","ADDRESS_VALID","ADDRESS_INVALID","QueryAddressFormContainer","_Component","input","addressState","validAddress","resolvedAddress","test","lookup","t0","_this$state","inherits","createClass","address_QueryAddressForm","AddressList","ownTable","watchTable","ethEnable","waitingGrant","ownAddressIds","basic","selectable","address_AddressContainer","primary","watchAddressIds","dividing","address_QueryAddressFormContainer","AddressListContainer","updateWeb3Accounts","requestEthEnable","checkAccountTimer","address_AddressList","initAccounts","newProps","clearInterval","isMetaMask","setInterval","getAccounts","accounts","changeOwnAddresses","addressesById","newAccounts","account","existingAddress","_ref5","enable","Accounts","address_AddressListContainer","SelectableToken","checked","Checkbox","SelectableTokenContainer","token_SelectableToken","tokenAddress","tokenTracked","tracked","SelectableTokenList","tokenList","celled","token_SelectableTokenContainer","negative","items","SelectableTokenListContainer","handleShowOnlyTrackedChange","handlePaginationChange","handleLoadTokens","setShowTracked","setTokenListPage","pager","totalPages","Container","Pagination","onPageChange","verticalAlign","divided","toggle","Dropdown","text","token_SelectableTokenList","numVisibleTokens","ceil","sliceStart","TokenContracts","info","token_SelectableTokenListContainer","EventFilterContainer","tokenOptions","onTokenSelect","addressOptions","onAddressSelect","Field","search","selection","options","b","EventLoader","resultCount","resultFromBlock","resultToBlock","onLoadMore","canLoadMore","button","warning","EventLoaderContainer","loadMoreEvents","checkEventsLoaded","rangeEnd","currentBlock","rangeStart","loadTokenTransferEvents","resultFromBlockDate","event_EventLoader","hasAceEntry","Boolean","_callee5","chunkSize","maxEvents","numEvents","_loop","_context6","currentFromBlock","currentToBlock","transferEventsFrom","transferEventsTo","eventPromises","loggedEvents","foundEvents","_context5","Transfer","get","all","delegateYield","_x8","_x9","TxHashDisplay","txHash","shortHash","TRANSFER_EVENT_TYPES","TransferEvent","from","fromENS","toENS","quantity","positive","rowSpan","common_TxHashDisplay","TransferEventContainer","event_TransferEvent","rawEvent","_value","TransferEventsList","colSpan","transferEventIds","event_TransferEventContainer","TransferEventsListContainer","setTransferEventListPage","aceEventIds","event_TransferEventsList","changeTransferEventListPage","Events","event_EventFilterContainer","event_EventLoaderContainer","event_TransferEventsListContainer","EventsContainer","mapRouteParamsToState","segments_Events","match","params","setSelectedToken","setSelectedAddress","NetworkWarning","networkName","NetworkWarningController","web3_NetworkWarning","LayoutContainer","padded","web3_NetworkWarningController","segments_Sidebar","react_router","exact","path","component","location","web3Container","ModalLoader","TokenLoaderGate","tokenListUrl","loadTokenList","Children","only","children","common_ModalLoader","response","jsonTokens","allTokenIds","existingTrackedTokens","fetch","json","toUpperCase","Web3Gate","onRetry","Web3GateContainer","initialize","web3Gate","networkIdString","networkID","getNodePromise","getNetworkPromise","parseInt","Ens","provider","getBlockPromise","watch","blockHash","_block","oldNetworkId","_network","LocalStorageGate","trackedTokens","selectedTokendId","store","createStore","compose","applyMiddleware","thunk","App","es","web3GateContainer","token_TokenLoaderGate","utils_LocalStorageGate","modal_ModalRoot","layout_LayoutContainer","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b8a03138.chunk.js","sourcesContent":["import {loadTokenBalance} from '../token/tokenActions'\n\nexport const BALANCE_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const SET_BALANCE = 'SET_BALANCE'\nexport function setBalance(balanceId, balance) {\n    return {\n        type: SET_BALANCE,\n        payload: {\n            balanceId,\n            balance,\n        }\n    }\n}\n\nexport const SET_BALANCE_STATE = 'SET_BALANCE_STATE'\nexport function setBalanceState(balanceId, balanceState) {\n    return {\n        type: SET_BALANCE_STATE,\n        payload: {\n            balanceId,\n            balanceState,\n        }\n    }\n}\n\nexport const CREATE_BALANCE_ENTRY = 'CREATE_BALANCE_ENTRY'\nexport function createBalanceEntry(balanceId, addressId, tokenId) {\n    return {\n        type: CREATE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const DELETE_BALANCE_ENTRY = 'DELETE_BALANCE_ENTRY'\nexport function deleteBalanceEntry(balanceId) {\n    return {\n        type: DELETE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n        }\n    }\n}\n\nexport const CHANGE_BALANCE_FILTER_PROPS = 'CHANGE_BALANCE_FILTER_PROPS'\nexport function changeBalanceFilterProps(filter, matchedBalanceIds) {\n    return {\n        type: CHANGE_BALANCE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedBalanceIds\n        }\n    }\n}\n\nexport function setBalanceFilterString(filterString) {\n    return (dispatch, getState) => {\n        // Filter balance list based on filterstring.\n        const searchString = filterString.toLowerCase()\n\n        // Default: Show all balances\n        let balanceIds = getState().balance.allIds\n\n        // If a searchstring is provided, filter balanceIds\n        if (searchString.length) {\n            balanceIds = balanceIds.filter(balanceId => {\n                const balanceEntry = getState().balance.byId[balanceId]\n                const token = getState().tokens.byId[balanceEntry.tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n        dispatch(changeBalanceFilterProps(searchString, balanceIds))\n    }\n}\n\n\nexport function setBalanceByAddressAndToken(addressId, tokenId, balance) {\n    return(dispatch, getState) => {\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set balance\n        dispatch(setBalance(balanceId, balance))\n    }\n}\n\nexport function balanceStateChanged(tokenId, addressId, balanceState) {\n    return(dispatch, getState) => {\n        // obtain balanceID\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set loading state\n        dispatch(setBalanceState(balanceId, balanceState))\n    }\n}\n\nexport function reloadBalance(balanceId) {\n    return (dispatch, getState) => {\n        const balance = getState().balance.byId[balanceId]\n        dispatch(loadTokenBalance(balance.tokenId, balance.addressId))\n    }\n}\n\nexport function clearTokenBalances(tokenId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.tokenId === tokenId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function clearAddressBalances(addressId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.addressId === addressId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function buildBalanceId(addressId, tokenId) {\n    return (addressId + '-' + tokenId)\n}\n","import {\n    ACE_ENTRIES_BLOCK_RANGE_CHANGE, ACE_ENTRIES_LOADING_CHANGE, ADD_EVENTS, buildEventId,\n    CREATE_ACE_ENTRY, SET_ACE_ENTRY_EVENT_IDS\n} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\n/*\nPurpose: Store list of transfer events involving certain address\nand certain token contract.\nKeeps track of the block range already queried from web3 (firstBlock, lastBlock),\nso i can easily extend checked block range or refresh if outdated.\n */\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {\n    0xabc123-12: {\n        acesId: '0xabc123-12',    // <addressId>-<tokenId>\n        addressId: '0xabc123',\n        tokenId: 12\n        loading: false,\n        firstBlock: 0,\n        lastBlock: 0,\n        loadingFromBlock: 0,\n        loadingToBlock: 0,\n        loadingCurrentBlock: 0,\n        eventIds: [],\n    },\n}\n*/\n\nfunction clearAceEntries() {\n    return ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL\n}\n\nfunction createAceEntry(state, action) {\n    const {payload} = action\n    const {addressId, tokenId} = payload\n    const acesId = buildAddressContractEventId(addressId, tokenId)\n    return {\n        ...state,\n        [acesId] : {\n            acesId,\n            addressId,\n            tokenId,\n            isLoading: false,\n            firstBlock: 0,\n            lastBlock: 0,\n            eventIds: [],\n            loadingFromBlock: 0,\n            loadingToBlock: 0,\n            loadingCurrentBlock: 0,\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new events to the address, if it is \"to\" or \"from\"\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    const newState = {...state}\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        const {_from, _to} = transferEvent.args\n        const aceFromId = buildAddressContractEventId(_from, tokenId)\n        const aceToId = buildAddressContractEventId(_to, tokenId)\n        const aceIds = [aceToId, aceFromId]\n        aceIds.forEach(aceId => {\n            // only add event if an according aceEntry is existing!\n            if (newState[aceId]) {\n                // prevent duplicate eventID entries\n                    if (newState[aceId].eventIds.includes(transferEventId)) {\n                        console.warn(\"Ignoring duplicate event \" + transferEventId)\n                        return\n                    }\n                newState[aceId].eventIds = newState[aceId].eventIds.concat(transferEventId)\n            }\n        })\n    })\n    return newState\n}\n\nfunction aceEntriesLoadingChange(state, action) {\n    const {payload} = action\n    const {aceIds, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            newState[aceId] = {\n                ...aceEntry,\n                isLoading,\n                loadingFromBlock,\n                loadingToBlock,\n                loadingCurrentBlock,\n            }\n        }\n    })\n    return newState\n}\n\nfunction aceEntriesBlockRangeChange(state, action) {\n    const {payload} = action\n    const {aceIds, fromBlock, toBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            // update checked block range\n            if (aceEntry.firstBlock === 0) {\n                aceEntry.firstBlock = fromBlock\n            } else {\n                aceEntry.firstBlock = Math.min(fromBlock, aceEntry.firstBlock)\n            }\n            if (aceEntry.lastBlock === 0) {\n                aceEntry.lastBlock = toBlock\n            } else {\n                aceEntry.lastBlock = Math.max(toBlock, aceEntry.lastBlock)\n            }\n            newState[aceId] = aceEntry\n        }\n    })\n    return newState\n}\n\nfunction setAceEntryEventIds(state, action) {\n    const {payload} = action\n    const {aceId, eventIds} = payload\n\n    return {\n        ...state,\n        [aceId]: {\n            ...state[aceId],\n            eventIds\n        }\n    }\n}\n\nexport const addressContractEventsByIdReducer = (state=ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_ACE_ENTRY:\n            return createAceEntry(state, action)\n        case ADD_EVENTS:\n            return addTransferEvents(state, action)\n        case ACE_ENTRIES_LOADING_CHANGE:\n            return aceEntriesLoadingChange(state, action)\n        case ACE_ENTRIES_BLOCK_RANGE_CHANGE:\n            return aceEntriesBlockRangeChange(state, action)\n        case SET_ACE_ENTRY_EVENT_IDS:\n            return setAceEntryEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearAceEntries()\n        default:\n    }\n    return state;\n}\n\n\nexport function buildAddressContractEventId(addressId, tokenId) {\n    return ''+addressId.toLowerCase()+'-'+tokenId\n}\n","import {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\n\nexport const ADD_EVENTS = 'ADD_EVENTS'\nexport function addEvents(events, tokenId) {\n    return {\n        type: ADD_EVENTS,\n        payload: {\n            events,\n            tokenId,\n        }\n    }\n}\n\nexport const CHANGE_TRANSFEREVENTLIST_PAGE = 'CHANGE_TRANSFEREVENTLIST_PAGE'\nexport function changeTransferEventListPage(activePage) {\n    return {\n        type: CHANGE_TRANSFEREVENTLIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\n\nexport const CREATE_ACE_ENTRY = 'CREATE_ACE_ENTRY'\nexport function createAceEntry(addressId, tokenId) {\n    return {\n        type: CREATE_ACE_ENTRY,\n        payload: {\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const ACE_ENTRIES_LOADING_CHANGE = 'ACE_ENTRIES_LOADING_CHANGE'\nexport function aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_LOADING_CHANGE,\n        payload: {\n            aceIds,\n            isLoading,\n            loadingFromBlock,\n            loadingToBlock,\n            loadingCurrentBlock,\n        }\n    }\n}\n\nexport const ACE_ENTRIES_BLOCK_RANGE_CHANGE = 'ACE_ENTRIES_BLOCK_RANGE_CHANGE'\nexport function aceEntriesBlockRangeChange(addressIds, tokenId, fromBlock, toBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_BLOCK_RANGE_CHANGE,\n        payload: {\n            aceIds,\n            fromBlock,\n            toBlock,\n        }\n    }\n}\n\nexport const SET_ACE_ENTRY_EVENT_IDS = 'SET_ACE_ENTRY_EVENT_IDS'\nexport function setAceEntryEventIds(aceId, eventIds) {\n    return {\n        type: SET_ACE_ENTRY_EVENT_IDS,\n        payload: {\n            aceId,\n            eventIds\n        }\n    }\n}\n\nexport const CHANGE_EVENT_SCAN_PROPS = 'CHANGE_EVENT_SCAN_PROPS'\nexport function changeEventScanProps(props) {\n    return {\n        type: CHANGE_EVENT_SCAN_PROPS,\n        payload: {\n            props,\n        }\n    }\n}\n\nexport function aceEntriesLoadingChangeWrapper(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    return async (dispatch, getState) => {\n        addressIds.forEach(addressId => {\n            const aceId = buildAddressContractEventId(addressId, tokenId)\n            if (getState().events.aceById[aceId] === undefined) {\n                // create a new entry for this token and address\n                dispatch(createAceEntry(addressId, tokenId))\n            }\n        })\n        dispatch(aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock))\n    }\n}\n\nexport function addEventsThunk(events, tokenId, fromBlock, toBlock) {\n    return (dispatch, getState) => {\n        // Make sure that there are AddressContractEvent entries\n        // for all events and to/from addresses\n        let aceIdsToSort = []\n        const watchedAddressIds = getState().addresses.allIds\n        events.forEach(transferEvent => {\n            const {_from, _to} = transferEvent.args\n            // TODO: Collect all new entries and just dispatch one batch event\n            if (watchedAddressIds.includes(_from.toLowerCase())) {\n                const aceFromId = buildAddressContractEventId(_from, tokenId)\n                aceIdsToSort.push(aceFromId)\n                if (getState().events.aceById[aceFromId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_from, tokenId))\n                }\n            }\n            if (watchedAddressIds.includes(_to.toLowerCase())) {\n                const aceToId = buildAddressContractEventId(_to, tokenId)\n                aceIdsToSort.push(aceToId)\n                if (getState().events.aceById[aceToId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_to, tokenId))\n                }\n            }\n        })\n        // now it's safe to do the actual dispatch of addEvents\n        dispatch(addEvents(events, tokenId, fromBlock, toBlock))\n        // finally re-sort eventIds of all changed aceIds\n        dispatch(sortEventsThunk(aceIdsToSort))\n    }\n}\n\nexport function sortEventsThunk(aceIds) {\n    return (dispatch, getState) => {\n        const eventsById = getState().events.byId\n        // sort eventIds of provided ace entries based on the blockheight they appeared at\n        aceIds.forEach(aceId => {\n            // sort eventIds based on blockheight\n            // use .slice() to work on a copy of the eventIds array, otherwise i would mutate current state...\n            let eventIds = getState().events.aceById[aceId].eventIds.slice().sort((eventA, eventB) => {\n                return eventsById[eventB].transferEvent.blockNumber - eventsById[eventA].transferEvent.blockNumber\n            })\n            // set new eventIds array via dedicated action\n            dispatch(setAceEntryEventIds(aceId, eventIds))\n        })\n    }\n}\n\nexport function buildEventId(event) {\n    return '' + event.transactionHash + '-' + event.logIndex\n}\n","\nexport const TRACKED_TOKEN_KEYS = 'TRACKED_TOKEN_KEYS'\nexport const SELECTED_TOKEN_KEY = 'SELECTED_TOKEN_KEY'\nexport const WATCHED_ADDRESSES = 'WATCHED_ADDRESSES'\n\nexport function storeLocalData(key, data) {\n    // console.log(\"Storing \" + key + \" -> \" + data)\n    localStorage.setItem(key, JSON.stringify(data))\n}\n\nexport function getLocalData(key, defaultValue) {\n    try {\n        let data = JSON.parse(localStorage.getItem(key))\n        if (data) {\n            // console.log(\"Loaded data for key \" + key + \": \" + data)\n            return data\n        }\n    }\n    catch (e) {\n        // console.log(\"Exception \" + e + \" looking for \" + key)\n    }\n    // console.log(\"No data found for key \" + key)\n    return defaultValue\n}\n","import contract from 'truffle-contract'\r\nimport erc20ABI from 'human-standard-token-abi'\r\nimport {\r\n    BALANCE_STATES,\r\n    balanceStateChanged,\r\n    clearTokenBalances,\r\n    setBalanceByAddressAndToken\r\n} from '../balance/balanceActions'\r\nimport {\r\n    aceEntriesBlockRangeChange, aceEntriesLoadingChange, aceEntriesLoadingChangeWrapper,\r\n    addEventsThunk, changeEventScanProps\r\n} from '../event/eventActions'\r\nimport {\r\n    storeLocalData,\r\n    SELECTED_TOKEN_KEY,\r\n    TRACKED_TOKEN_KEYS,\r\n} from \"../../utils/localStorageWrapper\"\r\n\r\nexport const ETH_TOKEN_MAGIC_ADDRESS = \"0x1000000000000000000000000000000000000001\"\r\nexport const ETH_TOKEN_DUMMY = {\r\n    \"name\": \"Ethereum\",\r\n    \"symbol\": \"ETH\",\r\n    \"address\": ETH_TOKEN_MAGIC_ADDRESS,\r\n    \"decimals\": 18\r\n}\r\n\r\nexport const TOKEN_LIST_STATES = {\r\n    VIRGIN: 'virgin',\r\n    LOADING: 'loading',\r\n    INITIALIZED: 'initialized'\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_STATE = 'IS_LOADING_TOKEN_LIST'\r\nexport function tokenListStateChanged(tokenListState) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_STATE,\r\n        payload: {\r\n            listState: tokenListState\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_TOKEN = 'ADD_TOKEN'\r\nexport function addToken(tokenID, token) {\r\n    return {\r\n        type: ADD_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            token\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_VOLATILE_TOKEN = 'ADD_VOLATILE_TOKEN'\r\nexport function addVolatileToken(tokenID) {\r\n    return {\r\n        type: ADD_VOLATILE_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_TOKEN = 'IS_LOADING_TOKEN'\r\nexport function loadingTokenChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_SUPPLY = 'SET_TOKEN_SUPPLY'\r\nexport function setTokenSupply(tokenID, supply) {\r\n    return {\r\n        type: SET_TOKEN_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            supply,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_SUPPLY = 'IS_LOADING_SUPPLY'\r\nexport function loadingSupplyChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_CONTRACT_INSTANCE = 'SET_TOKEN_CONTRACT_INSTANCE'\r\nexport function setTokenContractInstance(tokenID, contractInstance) {\r\n    return {\r\n        type: SET_TOKEN_CONTRACT_INSTANCE,\r\n        payload: {\r\n            tokenID,\r\n            contractInstance\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_LOADING_PROMISE = 'SET_TOKEN_LOADING_PROMISE'\r\nexport function setTokenLoadingPromise(tokenID, loadingPromise) {\r\n    return {\r\n        type: SET_TOKEN_LOADING_PROMISE,\r\n        payload: {\r\n            tokenID,\r\n            loadingPromise\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeSelectorTokenIdThunk(selectedTokenId) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeSelectorTokenId(selectedTokenId))\r\n        // update localstorage\r\n        storeLocalData(SELECTED_TOKEN_KEY, getState().tokens.selector.selectedTokenId)\r\n    }\r\n}\r\n\r\nexport const CHANGE_SELECTOR_TOKENID = 'CHANGE_SELECTOR_TOKENID'\r\nexport function changeSelectorTokenId(selectedTokenId) {\r\n    return {\r\n        type: CHANGE_SELECTOR_TOKENID,\r\n        payload: {\r\n            selectedTokenId,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CLEAR_TOKEN_LIST = 'CLEAR_TOKEN_LIST'\r\nexport function clearTokenList() {\r\n    return {\r\n        type: CLEAR_TOKEN_LIST,\r\n    }\r\n}\r\n\r\nexport const CHANGE_VALID_TOKEN_COUNT = 'CHANGE_VALID_TOKEN_COUNT'\r\nexport function changeValidTokenCount(count) {\r\n    return {\r\n        type: CHANGE_VALID_TOKEN_COUNT,\r\n        payload: {\r\n            count\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_FILTER_PROPS = 'CHANGE_FILTER_PROPS'\r\nexport function changeFilterProps(filter, matchedTokenIds, showOnlyTracked, filterIsActive) {\r\n    return {\r\n        type: CHANGE_FILTER_PROPS,\r\n        payload: {\r\n            filter,\r\n            matchedTokenIds,\r\n            showOnlyTracked,\r\n            filterIsActive,\r\n        }\r\n    }\r\n}\r\n\r\nexport const RESET_DISPLAY_COUNT = 'RESET_DISPLAY_COUNT'\r\nexport function resetDisplayCount() {\r\n    return {\r\n        type: RESET_DISPLAY_COUNT,\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_TRACKING = 'CHANGE_TOKEN_TRACKING'\r\nexport function changeTokenTracking(tokenId, doTrack) {\r\n    return {\r\n        type: CHANGE_TOKEN_TRACKING,\r\n        payload: {\r\n            tokenId,\r\n            doTrack,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_PAGE = 'CHANGE_TOKENLIST_PAGE'\r\nexport function changeTokenListPage(activePage) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_PAGE,\r\n        payload: {\r\n            activePage\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeTokenTrackingThunk(tokenId, doTrack) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeTokenTracking(tokenId, doTrack))\r\n        // update localstorage\r\n        storeLocalData(TRACKED_TOKEN_KEYS, getState().tokens.trackedIds)\r\n        // if I start tracking a token, start getting balances right away\r\n        if (doTrack) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadTokenBalance(tokenId, addressId))\r\n                }\r\n            )\r\n        } else {\r\n            // If I stop tracking a token, also clear all balances for it\r\n            dispatch(clearTokenBalances(tokenId))\r\n        }\r\n    }\r\n}\r\n\r\nexport function setFilterProps(filterProps) {\r\n    return (dispatch, getState) => {\r\n\r\n        let {filterString, showOnlyTracked} = filterProps\r\n        const oldFilterString = getState().tokens.listState.filter.toLowerCase()\r\n        const oldShowOnlyTracked = getState().tokens.listState.showOnlyTracked\r\n        if (filterString === undefined) {\r\n            filterString = oldFilterString\r\n        }\r\n        if (showOnlyTracked === undefined) {\r\n            showOnlyTracked = oldShowOnlyTracked\r\n        }\r\n\r\n        // Filter token list based on filterstring and show tracked only/all\r\n        const searchString = filterString.toLowerCase()\r\n        const filterIsActive = ((searchString.length > 0) || showOnlyTracked)\r\n        const filterChanged = ((oldFilterString !== searchString) || (oldShowOnlyTracked !== showOnlyTracked))\r\n\r\n        if (filterChanged) {\r\n            // in case filter props changed, reset the number of displayed tokens to it's default value and set\r\n            // default page\r\n            dispatch(resetDisplayCount())\r\n            dispatch(changeTokenListPage(1))\r\n        }\r\n\r\n        // start with all tokens\r\n        let tokenIds = getState().tokens.allIds\r\n\r\n        // filter by tracked status\r\n        if (showOnlyTracked) {\r\n            // get all tokens that are being tracked\r\n            tokenIds = getState().tokens.trackedIds\r\n        }\r\n\r\n        // filter by search string\r\n        if (searchString.length) {\r\n            tokenIds = tokenIds.filter(tokenId => {\r\n                const token = getState().tokens.byId[tokenId]\r\n                return (\r\n                    token.name.toLowerCase().includes(searchString) ||\r\n                    token.symbol.toLowerCase().includes(searchString) ||\r\n                    token.address.toLowerCase().includes(searchString)\r\n                )\r\n            })\r\n        }\r\n\r\n        dispatch(changeFilterProps(searchString, tokenIds, showOnlyTracked, filterIsActive))\r\n    }\r\n}\r\n\r\n\r\nexport function loadTokenList(url) {\r\n    return async (dispatch, getState) => {\r\n        // clear existing tokens\r\n        dispatch(clearTokenList())\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.LOADING))\r\n        // fetch json file from url\r\n        const response = await fetch(url)\r\n        // parse json\r\n        const jsonTokens = await response.json()\r\n\r\n        // inject ETH dummy token\r\n        jsonTokens.push(ETH_TOKEN_DUMMY)\r\n\r\n        // sort token list alphabetically\r\n        jsonTokens.sort((a, b) => ( (a.name.toUpperCase() < b.name.toUpperCase()) ? -1 : 1))\r\n\r\n        // set total number of tokens (for loading progress)\r\n        dispatch(changeValidTokenCount(jsonTokens.length))\r\n\r\n        // add tokens\r\n        jsonTokens.forEach((listToken) => {\r\n            const token = mapListToken(listToken)\r\n            dispatch(addToken(token.address, token))\r\n        })\r\n\r\n        // if there is already a filter set, re-evaluate the filter results\r\n        if (getState().tokens.listState.filterIsActive) {\r\n            dispatch(setFilterProps({}))\r\n        }\r\n\r\n        // Crosscheck tokens with currently tracked tokens\r\n        const allTokenIds = getState().tokens.allIds\r\n        const existingTrackedTokens = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (allTokenIds.indexOf(tokenId) > -1)\r\n        })\r\n        // load balances for tracked tokens\r\n        if (existingTrackedTokens.length) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadMultiTokenBalances(existingTrackedTokens, addressId))\r\n                }\r\n            )\r\n        }\r\n\r\n        // stop tracking non-existing tokens\r\n        const trackedTokensToRemove = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (existingTrackedTokens.indexOf(tokenId) === -1)\r\n        })\r\n        trackedTokensToRemove.forEach(tokenId => {\r\n            dispatch(changeTokenTracking(tokenId, false))\r\n        })\r\n\r\n        // Finished loading\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.INITIALIZED))\r\n    }\r\n}\r\n\r\nfunction mapListToken(listToken) {\r\n    return {\r\n        id: listToken['address'],\r\n        address: listToken['address'],\r\n        symbol: listToken['symbol'],\r\n        decimals: Math.pow(10, listToken['decimals']),\r\n        name: listToken['name'],\r\n        description: null,\r\n        website: listToken['website'],\r\n        imageUrl: null,\r\n\r\n        supply: {\r\n            loading: false,\r\n            supply: undefined\r\n        },\r\n        balance: undefined,\r\n        eventIds: [],\r\n        loading: false,\r\n    }\r\n}\r\n\r\nexport function instantiateTokenContract(tokenID) {\r\n    return (dispatch, getState) => {\r\n        // create promise that resolves as soon as the contract is instantiated.\r\n        const loadingPromise = new Promise(\r\n            async function(resolve, reject) {\r\n                if (tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                    // This is the dummy token entry for plain ether\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                } else {\r\n                    // indicate we are loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, true))\r\n                    // create token contract instance and store it for later use in state\r\n                    const token = getState().tokens.byId[tokenID]\r\n                    const {web3} = getState().web3Instance\r\n                    const ERC20Contract = contract({abi: erc20ABI})\r\n                    ERC20Contract.setProvider(web3.currentProvider)\r\n                    const contractInstance = await ERC20Contract.at(token.address)\r\n                    dispatch(setTokenContractInstance(tokenID, contractInstance))\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                }\r\n            }\r\n        )\r\n        dispatch(setTokenLoadingPromise(tokenID, loadingPromise))\r\n    }\r\n}\r\n\r\nexport function loadTokenBalance(tokenID, addressId) {\r\n    return loadMultiTokenBalances([tokenID], addressId)\r\n}\r\n\r\nexport function loadMultiTokenBalances(tokenIDs, addressId) {\r\n    return async (dispatch, getState) => {\r\n        tokenIDs.forEach(async tokenId => {\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.LOADING))\r\n            const address = getState().addresses.byId[addressId].address\r\n            let balance\r\n            if (tokenId === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                balance = await getState().web3Instance.web3.eth.getBalancePromise(address)\r\n            } else {\r\n                await verifyContractInstance(tokenId, dispatch, getState)\r\n                const volatileToken = getState().tokens.volatileById[tokenId]\r\n                balance = await volatileToken.contractInstance.balanceOf(address)\r\n            }\r\n            dispatch(setBalanceByAddressAndToken(addressId, tokenId, balance))\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.INITIALIZED))\r\n        })\r\n    }\r\n}\r\n\r\nexport function loadTokenTransferEvents(tokenID, fromBlock, toBlock, addresses) {\r\n    return async (dispatch, getState) => {\r\n        if(tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n            // FIXME - Implement this.\r\n            //  See https://ethereum.stackexchange.com/questions/2531/common-useful-javascript-snippets-for-geth/3478#3478\r\n            //  for sample code to get started\r\n            return\r\n        }\r\n\r\n        const chunkSize = 100\r\n        const maxChunks = 100\r\n        const maxEvents = 50\r\n\r\n        let currentChunk = 1\r\n        let numEvents = 0\r\n\r\n        // if no from/toblock are provided, use default values\r\n        if (fromBlock === 0)\r\n            fromBlock = getState().web3Instance.block.number - (chunkSize * maxChunks)\r\n        if (toBlock === 0)\r\n            toBlock = getState().web3Instance.block.number\r\n\r\n        dispatch(aceEntriesLoadingChangeWrapper(addresses, tokenID, true, fromBlock, toBlock, fromBlock))\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n\r\n        while ((currentChunk <= maxChunks) && (numEvents <= maxEvents)) {\r\n            // calculate fromBlock for current chunk\r\n            let currentFromBlock = fromBlock + ((currentChunk-1) * chunkSize)\r\n            // calculate toBlock for current chunk\r\n            let currentToBlock = currentFromBlock + chunkSize\r\n\r\n            // update progress info\r\n            dispatch(changeEventScanProps({\r\n                tokenID,\r\n                addresses,\r\n                numEvents,\r\n                currentChunk,\r\n                maxEvents,\r\n                maxChunks,\r\n                fromBlock,\r\n                toBlock,\r\n                state: 'scanning'\r\n            }))\r\n\r\n            // obtain events for this chunk\r\n            // console.log(\"Calling 'Transfer' from \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\r\n            const transferEventsFrom = contractInstance.Transfer(\r\n                {\r\n                    // These are the standard ERC20 Transfer event fields\r\n                    _from: addresses,    // addresses sending token\r\n                    _to: null,      // addresses receiving token\r\n                },\r\n                {\r\n                    fromBlock: currentFromBlock,\r\n                    toBlock: currentToBlock,\r\n                }\r\n            )\r\n            //console.log(\"Calling 'Transfer' to \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\r\n            const transferEventsTo = contractInstance.Transfer(\r\n                {\r\n                    // These are the standard ERC20 Transfer event fields\r\n                    _from: null,    // addresses sending token\r\n                    _to: addresses,      // addresses receiving token\r\n                },\r\n                {\r\n                    fromBlock: currentFromBlock,\r\n                    toBlock: currentToBlock,\r\n                }\r\n            )\r\n\r\n            // Wrap this into promise and await it, otherwise loading:false action will be dispatched too early!\r\n            let eventPromises = []\r\n            eventPromises.push(new Promise((resolve, reject) => {\r\n                transferEventsFrom.get(function (error, events) {\r\n                    if (error) {\r\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                    } else {\r\n                        // console.log(\"Found \" + events.length + \" 'from' Events: \" + events)\r\n                        if (events.length) {\r\n                            dispatch(addEventsThunk(events, tokenID))\r\n                        }\r\n                        resolve(events.length)\r\n                    }\r\n                })\r\n            }))\r\n            eventPromises.push(new Promise((resolve, reject) => {\r\n                transferEventsTo.get(function (error, events) {\r\n                    if (error) {\r\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                    } else {\r\n                        //console.log(\"Found \" + events.length + \" 'to' Events: \" + events)\r\n                        if (events.length) {\r\n                            dispatch(addEventsThunk(events, tokenID))\r\n                        }\r\n                        resolve(events.length)\r\n                    }\r\n                })\r\n            }))\r\n            // Wait till both promises are resolved and add up the found number of events.\r\n            const loggedEvents = await Promise.all(eventPromises)\r\n            const foundEvents = loggedEvents.reduce((a, b) => a + b, 0)\r\n\r\n            dispatch(aceEntriesBlockRangeChange(addresses, tokenID, currentFromBlock, currentToBlock))\r\n            // increment currentChunk\r\n            currentChunk++\r\n            // update numEvents with number of found events\r\n            numEvents += foundEvents\r\n        }\r\n\r\n        dispatch(aceEntriesLoadingChange(addresses, tokenID, false, 0, 0, 0))\r\n    }\r\n}\r\n\r\nasync function verifyContractInstance(tokenId, dispatch, getState) {\r\n    let volatileToken = getState().tokens.volatileById[tokenId]\r\n    if (volatileToken === undefined) {\r\n        // Create an entry to continue\r\n        dispatch(addVolatileToken(tokenId))\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n    }\r\n    if (volatileToken.loadingPromise) {\r\n        // token is already loading. Just return the promise.\r\n        return volatileToken.loadingPromise\r\n    }\r\n    else {\r\n        dispatch(instantiateTokenContract(tokenId))\r\n        // refresh token, as the loadingPromise has just been added to state\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n        return volatileToken.loadingPromise\r\n    }\r\n}\r\n\r\nexport const TRANSACTION_STATES = {\r\n    IDLE: 'IDLE',\r\n    INITIALIZING: 'INITIALIZING',\r\n    WAITING_FOR_SIGNATURE: 'WAITING_FOR_SIGNATURE',\r\n    WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',\r\n    CONFIRMED: 'CONFIRMED',\r\n    FAILED: 'FAILED'\r\n}\r\n\r\nexport function transferToken(tokenID, tokenAmount, fromAddress, toAddress) {\r\n    return async (dispatch, getState) => {\r\n        /*\r\n            Commented out until doing implementation\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.INITIALIZING))\r\n\r\n        // obtain token contract instance\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n        // TODO: check if eth balance is sufficient for required gas\r\n        // TODO: check if token balance is sufficient\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_SIGNATURE))\r\n        // TODO: initialize transfer\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_CONFIRMATION))\r\n\r\n        // finalize transfer\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.CONFIRMED))\r\n\r\n         */\r\n    }\r\n}\r\n\r\nexport const CHANGE_TRANSACTION_STATE = 'CHANGE_TRANSACTION_STATE'\r\nexport function changeTransactionState(transactionState, message='') {\r\n    return {\r\n        type: CHANGE_TRANSACTION_STATE,\r\n        payload: {\r\n            transactionState,\r\n            message\r\n        }\r\n    }\r\n}\r\n","import {\n    CHANGE_FILTER_PROPS,\n    CHANGE_TOKEN_LIST_PAGE,\n    CHANGE_TOKEN_LIST_STATE,\n    CHANGE_VALID_TOKEN_COUNT, CLEAR_TOKEN_LIST,\n    RESET_DISPLAY_COUNT,\n    TOKEN_LIST_STATES\n} from '../tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    listState: TOKEN_LIST_STATES.VIRGIN,\n    total: 0,\n    filter: '',\n    matchedTokenIds: [],\n    displayCount: 10,\n    showOnlyTracked: false,\n    filterIsActive: false,\n    activePage: 1,\n}\n\nfunction clearTokenList(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount,\n        matchedTokenIds: LISTSTATE_INITIAL.matchedTokenIds,\n        activePage: LISTSTATE_INITIAL.activePage,\n        total: LISTSTATE_INITIAL.total,\n        listState: LISTSTATE_INITIAL.listState,\n    }\n}\n\nfunction resetDisplayCount(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount\n    }\n}\n\nfunction tokenListStateChanged(state, action) {\n    // very simple reducer, just set a new state\n    const {payload} = action\n    const {listState} = payload\n    return {\n        ...state,\n        listState\n    }\n}\n\nfunction changeValidTokenCount(state, action){\n    const {payload} = action\n    const {count} = payload\n    return {\n        ...state,\n        total: count\n    }\n}\n\nfunction changeFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedTokenIds, showOnlyTracked, filterIsActive} = payload\n    return {\n        ...state,\n        filter,\n        matchedTokenIds,\n        showOnlyTracked,\n        filterIsActive,\n    }\n}\n\nfunction tokenListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nexport const listStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_LIST_STATE:\n            return tokenListStateChanged(state, action)\n        case CHANGE_VALID_TOKEN_COUNT:\n            return changeValidTokenCount(state, action)\n        case CHANGE_FILTER_PROPS:\n            return changeFilterProps(state, action)\n        case RESET_DISPLAY_COUNT:\n            return resetDisplayCount(state)\n        case CHANGE_TOKEN_LIST_PAGE:\n            return tokenListPageChanged(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearTokenList(state)\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, CLEAR_TOKEN_LIST, IS_LOADING_SUPPLY, IS_LOADING_TOKEN,\n    SET_TOKEN_SUPPLY\n} from '../tokenActions'\nimport {ADD_EVENTS, buildEventId} from '../../event/eventActions'\n\nconst TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokensById() {\n    return TOKENS_BY_ID_INITIAL\n}\n\nfunction addTokenEntry(state, action) {\n    const {payload} = action\n    const {tokenID, token} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: token\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\nfunction loadingTokenChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loading: isLoading\n        }\n    }\n}\n\nfunction setTokenSupply(state, action) {\n    const {payload} = action\n    const {tokenID, supply} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                supply\n            }\n        }\n    }\n}\n\nfunction loadingSupplyChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                loading: isLoading\n            }\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new event to the according token contract\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenId]\n\n    let newEventIds = token.eventIds\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n\n        if (newEventIds.includes(transferEventId)) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newEventIds = newEventIds.concat(transferEventId)\n    })\n\n    return {\n        ...state,\n        [tokenId]: {\n            ...token,\n            eventIds: newEventIds\n        }\n    }\n}\n\nexport const tokensByIdReducer = (state = TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenEntry(state, action)\n        }\n        case IS_LOADING_TOKEN: {\n            return loadingTokenChanged(state, action)\n        }\n        case SET_TOKEN_SUPPLY: {\n            return setTokenSupply(state, action)\n        }\n        case IS_LOADING_SUPPLY: {\n            return loadingSupplyChanged(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokensById(state, action)\n        }\n        case ADD_EVENTS: {\n            return addTransferEvents(state, action)\n        }\n        default:\n            return state\n    }\n}\n","import {ADD_TOKEN, CLEAR_TOKEN_LIST} from '../tokenActions'\n\nconst ALL_TOKENS_INITIAL = []\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate token\n    if (state.indexOf(tokenID) === -1) {\n        // append the new token's ID to the list of all IDs\n        return state.concat(tokenID);\n    }\n    else {\n        // duplicate\n        return state\n    }\n}\n\nfunction clearAllTokens() {\n    return ALL_TOKENS_INITIAL\n}\n\nexport const allTokensReducer = (state=ALL_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllTokens(state, action)\n        }\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, ADD_VOLATILE_TOKEN, CLEAR_TOKEN_LIST,\n    SET_TOKEN_CONTRACT_INSTANCE,\n    SET_TOKEN_LOADING_PROMISE,\n} from '../tokenActions'\n\nconst VOLATILE_TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokens() {\n    return VOLATILE_TOKENS_BY_ID_INITIAL\n}\n\nfunction setTokenContractInstance(state, action) {\n    const {payload} = action\n    const {tokenID, contractInstance} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        [tokenID]: {\n            ...token,\n            contractInstance: contractInstance\n        }\n    }\n}\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: {\n                tokenID,\n            }\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\n\nfunction setTokenLoadingPromise(state, action) {\n    const {payload} = action\n    const {tokenID, loadingPromise} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loadingPromise\n        }\n    }\n}\n\nexport const volatileTokensByIdReducer = (state = VOLATILE_TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case ADD_VOLATILE_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case SET_TOKEN_LOADING_PROMISE: {\n            return setTokenLoadingPromise(state, action)\n        }\n        case SET_TOKEN_CONTRACT_INSTANCE: {\n            return setTokenContractInstance(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokens()\n        }\n        default:\n            return state\n    }\n}\n\n","import {CHANGE_TOKEN_TRACKING} from '../tokenActions'\n\nconst TRACKED_TOKENS_INITIAL = []\n\nfunction changeTokenTracking(state, action) {\n    const {payload} = action\n    const {tokenId, doTrack} = payload\n    // Check if this token is currently tracked\n    const trackedIndex = state.indexOf(tokenId)\n    if (doTrack && (trackedIndex === -1)) {\n        // Add new tracked entry\n        return state.concat(tokenId)\n    }\n    if (!doTrack && (trackedIndex > -1)) {\n        // remove existing tracked entry. Use \"filter\" instead of splice, as it returns a new array, while \"splice\"\n        // mutates the existing one.\n        return state.filter(id => (id !== tokenId))\n    }\n    // No need to change anything\n    return state\n}\n\nexport const trackedTokensReducer = (state=TRACKED_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_TRACKING:\n            return changeTokenTracking(state, action)\n        default:\n            return state\n    }\n}\n\n","import Web3 from 'web3'\n/*\n Obtain web3 instance. Based on code from\n https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nlet getWeb3 = new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n        let myWeb3\n\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            myWeb3 = new Web3(window.ethereum)\n        }\n        // Legacy dapp browser\n        else if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            myWeb3 = new Web3(window.web3.currentProvider);\n        }\n\n        if (myWeb3) {\n            console.log('Injected web3 detected.')\n            let results = {\n                web3: myWeb3\n            }\n            resolve(results)\n        } else {\n            let results = {\n                error: 'No web3 injected'\n            }\n            reject(results)\n        }\n    })\n})\n\nexport default getWeb3\n","//\n// Based on\n// https://ethereum.stackexchange.com/questions/11444/web3-js-with-promisified-api\n// and\n// https://gist.github.com/xavierlepretre/90f0feafccc07b267e44a87050b95caa\n//\n\nconst promisify = (web3) => {\n    // Pipes values from a Web3 callback.\n    let callbackToResolve = function (resolve, reject) {\n        return function (error, value) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(value);\n            }\n        };\n    };\n\n    // List synchronous functions masquerading as values.\n    const syncGetters = {\n        db: [],\n        eth: [ \"accounts\", \"blockNumber\", \"coinbase\", \"gasPrice\", \"hashrate\",\n            \"mining\", \"protocolVersion\", \"syncing\" ],\n        net: [ \"listening\", \"peerCount\" ],\n        personal: [ \"listAccounts\" ],\n        shh: [],\n        version: [ \"ethereum\", \"network\", \"node\", \"whisper\" ]\n    };\n\n    Object.keys(syncGetters).forEach(function(group) {\n        Object.keys(web3[group]).forEach(function (method) {\n            if (syncGetters[group].indexOf(method) > -1) {\n                // Skip\n            } else if (typeof web3[group][method] === \"function\") {\n                web3[group][method + \"Promise\"] = function () {\n                    let args = arguments;\n                    return new Promise(function (resolve, reject) {\n                        args[args.length] = callbackToResolve(resolve, reject);\n                        args.length++;\n                        web3[group][method].apply(web3[group], args);\n                    });\n                };\n            }\n        });\n    });\n}\n\nexport default promisify\n","import Ens from 'ethjs-ens'\nimport getWeb3 from '../../utils/getWeb3'\nimport {clearTokenList} from '../token/tokenActions'\nimport promisify from '../../utils/promisifyWeb3'\n\nexport const WEB3_STATES = {\n    UNINITIALIZED: 'uninitialized',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    ERROR: 'error'\n}\n\nexport const ETH_ENABLE_STATES = {\n    REJECTED: 'rejected', // no access to eth.accounts\n    WAITING: 'waiting', // waiting for user confirmation in UI (e.g. metamask)\n    GRANTED: 'granted', // user has granted access to eth.accounts\n}\n\nexport const SET_WEB3_STATE = 'SET_WEB3_STATE'\nexport function setWeb3State(state) {\n    return {\n        type: SET_WEB3_STATE,\n        state\n    }\n}\n\nexport const SET_ETH_ENABLE_STATE = 'SET_ETH_ENABLE_STATE'\nexport function setEthEnableState(ethEnableState) {\n    return {\n        type: SET_ETH_ENABLE_STATE,\n        ethEnableState\n    }\n}\n\nexport const SET_WEB3INSTANCE = 'SET_WEB3INSTANCE'\nexport function setWeb3Instance(web3) {\n    return {\n        type: SET_WEB3INSTANCE,\n        web3\n    }\n}\n\nexport const SET_ENS = 'SET_ENS'\nexport function setENS(ens) {\n    return {\n        type: SET_ENS,\n        ens\n    }\n}\n\nexport const SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK'\nexport function setCurrentBlock(block) {\n    return {\n        type: SET_CURRENT_BLOCK,\n        block\n    }\n}\n\nexport const SET_NETWORK = 'SET_NETWORK'\nexport function setNetwork(id, name, previousId) {\n    return {\n        type: SET_NETWORK,\n        id,\n        name,\n        previousId,\n    }\n}\n\nexport const SET_NODE_VERSION = 'SET_NODE_VERSION'\nexport function setNodeVersion(nodeVersion) {\n    return {\n        type: SET_NODE_VERSION,\n        nodeVersion\n    }\n}\n\nexport const SET_BLOCK_FILTER = 'SET_BLOCK_FILTER'\nexport function setBlockFilter(blockFilter) {\n    return {\n        type: SET_BLOCK_FILTER,\n        blockFilter\n    }\n}\n\nexport function stopBlockFilter() {\n    return (dispatch, getState) => {\n        // Clean up any blockfilter that might be active\n        const {blockFilter} = getState().web3Instance\n        if (blockFilter) {\n            blockFilter.stopWatching((error, result) => {\n                if (error) {\n                    console.log(\"Error stopping blockfilter: \" + error)\n                }\n            })\n            dispatch(setBlockFilter(null))\n        }\n    }\n}\n\nexport function initialize() {\n    return async (dispatch, getState) => {\n        // stop any running block filter, just in case...\n        dispatch(stopBlockFilter())\n\n        // signal that web3 is being initialized\n        dispatch(setWeb3State(WEB3_STATES.LOADING))\n\n        // set web3 instance\n        try {\n            var {web3} = await getWeb3\n            // stop loading\n            dispatch(setWeb3State(WEB3_STATES.INITIALIZED))\n        }\n        catch(e) {\n            console.log(\"Error getting web3: \" + e)\n            dispatch(setWeb3State(WEB3_STATES.ERROR))\n            return;\n        }\n\n        // FIXME - Promisify can be removed once web3.js 1.0 is released\n        promisify(web3)\n        dispatch(setWeb3Instance(web3))\n\n        // set node info\n        const nodeVersion = await web3.version.getNodePromise()\n        dispatch(setNodeVersion(nodeVersion))\n\n        // set network info\n        const networkIdString = await web3.version.getNetworkPromise()\n        let networkID = parseInt(networkIdString, 10)\n        const network = getNetworkName(networkID)\n        dispatch(setNetwork(networkID, network, undefined))\n\n        // setup ens system\n        const ens = new Ens({\n            provider: web3.currentProvider,\n            network: networkID\n        })\n        dispatch(setENS(ens))\n\n        // set current block\n        const block = await web3.eth.getBlockPromise('latest')\n        dispatch(setCurrentBlock(block))\n\n        // start listening for new block events\n        const filter = web3.eth.filter('latest')\n        filter.watch(async (error, blockHash) => {\n            if (error) {\n                console.log(\"Error watching for block events: \" + error)\n            } else {\n                const block = await web3.eth.getBlockPromise(blockHash)\n                if (block) {\n                    dispatch(setCurrentBlock(block))\n                }\n                else {\n                    console.log(\"Ignoring null-block!\")\n                    console.log(block)\n                }\n            }\n        })\n        dispatch(setBlockFilter(filter))\n\n        // start watching for network change events\n        setInterval(async function () {\n            const networkIdString = await web3.version.getNetworkPromise()\n            let networkID = parseInt(networkIdString, 10)\n            const oldNetworkId = getState().web3Instance.id\n            if (oldNetworkId !== networkID) {\n                const network = getNetworkName(networkID)\n                dispatch(setNetwork(networkID, network, oldNetworkId))\n                dispatch(clearTokenList())\n            }\n        }, 1000)\n    }\n}\n\nexport function requestEthEnable() {\n    return async (dispatch, getState) => {\n        if (window.ethereum) {\n            // request access to user accounts as described in EIP-1102\n            try {\n                // signal that app is waiting for user action\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.WAITING))\n                // request access\n                await window.ethereum.enable()\n                // signal success\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n            } catch(error) {\n                // user rejected access\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.REJECTED))\n            }\n        } else {\n            // must be a legacy browser, which should grant access by default.\n            dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n        }\n    }\n}\n\nfunction getNetworkName(networkId) {\n    let network = 'unknown'\n    switch (networkId) {\n        case 4447:\n            network = 'truffle test'\n            break\n        case 1:\n            network = 'mainnet'\n            break\n        case 2:\n            network = 'Morden (deprecated!)'\n            break\n        case 3:\n            network = 'Ropsten'\n            break\n        case 4:\n            network = 'Rinkeby'\n            break\n        case 42:\n            network = 'Kovan'\n            break\n        case 61:\n            network = 'ETC'\n            break\n        case 62:\n            network = 'ETC Testnet'\n            break\n        default:\n            network = 'Unknown'\n    }\n    return network\n}\n","import {CHANGE_SELECTOR_TOKENID} from '../tokenActions'\nimport {SET_NETWORK} from '../../web3/web3Actions'\n\nconst SELECTOR_INITIAL = {\n    selctedTokenId: undefined\n}\n\nfunction changeSelectorTokenId(state, action) {\n    const {payload} = action\n    const {selectedTokenId} = payload\n\n    return {\n        ...state,\n        selectedTokenId,\n    }\n}\n\nfunction setNetwork(state, action) {\n    const {id, previousId} = action\n    // if the existing network got changed, clear the selected token. If this\n    // is the initial setNetwork event after page load (previousID is undefined)\n    // keep the selectedTokenId\n    // NOTE: This will only start working when Metamask stops the full page reload on network change.\n    // See https://github.com/MetaMask/metamask-extension/issues/3599.\n    if (previousId && (previousId !== id))\n        return SELECTOR_INITIAL\n    else\n        return state\n}\n\nexport const selectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_TOKENID:\n            return changeSelectorTokenId(state, action)\n        case SET_NETWORK:\n            return setNetwork(state, action)\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {listStateReducer} from './ListStateReducer'\nimport {tokensByIdReducer} from './TokensByIdReducer'\nimport {allTokensReducer} from './AllIdsReducer'\nimport {volatileTokensByIdReducer} from './volatileTokensByIdReducer'\nimport {trackedTokensReducer} from './TrackedIdsReducer'\nimport {selectorReducer} from './SelectorReducer'\n\n/*\nState tree:\n{\n    listState: {\n        listState: 'loading'\n        filter: 'Dumb'\n        matchedTokenIds: [6]\n        total: 2\n        activePage: 1\n    }\n    byId: {\n        [1]: {\n            loading: true\n            tokenID: 1\n            name: 'GAVCoin'\n            address: '0x123456678'\n            contractInstance: null\n            supply: {\n                loading: true\n                supply: 0\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        },\n        [6]: {\n            loading: false\n            tokenID: 6\n            name: 'DumbCoin'\n            address: '0x123456678'\n            contractInstance: <truffle-contract instance>\n            supply: {\n                loading: false\n                supply: 200000\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        }\n    },\n    allIds: [1, 6],\n    trackedIds: [3, 4]\n}\n*/\n\nexport const tokens = combineReducers({\n    listState: listStateReducer,\n    byId : tokensByIdReducer,\n    allIds : allTokensReducer,\n    trackedIds: trackedTokensReducer,\n    volatileById: volatileTokensByIdReducer,\n    selector: selectorReducer,\n});\n","export function updateObject(oldObject, newValues) {\n    // Encapsulate the idea of passing a new object as the first parameter\n    // to Object.assign to ensure we correctly copy data instead of mutating\n    return Object.assign({}, oldObject, newValues);\n}\n\nexport function updateItemInArray(array, itemId, updateItemCallback) {\n    return array.map(item => {\n        if (item.id !== itemId) {\n            // Since we only want to update one item, preserve all others as they are now\n            return item;\n        }\n\n        // Use the provided callback to create an updated item\n        return updateItemCallback(item);\n    });\n}\n","import {updateObject} from \"../../utils/reducerUtils\"\nimport {\n    SET_CURRENT_BLOCK,\n    SET_WEB3INSTANCE,\n    SET_NETWORK,\n    SET_NODE_VERSION, SET_BLOCK_FILTER, WEB3_STATES, SET_WEB3_STATE, ETH_ENABLE_STATES, SET_ETH_ENABLE_STATE, SET_ENS,\n} from './web3Actions'\n\nconst WEB3_INITIAL = {\n    web3: null,\n    state: WEB3_STATES.UNINITIALIZED,\n    block: {\n        number: 0,\n        timestamp: 0\n    },\n    id: -1,\n    name: 'unknown',\n    blockFilter: null,\n    ethEnableState: ETH_ENABLE_STATES.REJECTED,\n    ens: undefined,\n}\n\nexport const web3Instance = (state=WEB3_INITIAL, action) => {\n    switch (action.type) {\n        case SET_WEB3_STATE:\n            return updateObject(state, {state: action.state})\n        case SET_ETH_ENABLE_STATE:\n            return updateObject(state, {ethEnableState: action.ethEnableState})\n        case SET_WEB3INSTANCE:\n            return updateObject(state, {web3: action.web3})\n        case SET_ENS:\n            return updateObject(state, {ens: action.ens})\n        case SET_CURRENT_BLOCK:\n            return updateObject(state, {block: action.block})\n        case SET_NETWORK:\n            return updateObject(state, {id: action.id, name: action.name})\n        case SET_NODE_VERSION:\n            return updateObject(state, {nodeVersion: action.nodeVersion})\n        case SET_BLOCK_FILTER:\n            return updateObject(state, {blockFilter: action.blockFilter})\n        default:\n    }\n    return state;\n}\n","import {loadMultiTokenBalances} from '../token/tokenActions'\nimport {clearAddressBalances} from '../balance/balanceActions'\nimport {storeLocalData, WATCHED_ADDRESSES} from \"../../utils/localStorageWrapper\"\n\nexport const ADDRESS_TYPE_EXTERNAL='ADDRESS_TYPE_EXTERNAL'\nexport const ADDRESS_TYPE_OWNED='ADDRESS_TYPE_OWNED'\nexport const ADDRESS_BALANCES_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const CHANGE_ADDRESS_BALANCES_STATE = 'CHANGE_ADDRESS_BALANCES_STATE'\nexport function addressBalancesStateChanged(addressId, addressBalancesState) {\n    return {\n        type: CHANGE_ADDRESS_BALANCES_STATE,\n        payload: {\n            addressId,\n            addressBalancesState\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS'\nexport function addAddress(address, ensName, type) {\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            addressId: address,\n            address,\n            ensName,\n            type\n        }\n    }\n}\n\n\nexport function removeAddressThunk(addressId) {\n    return (dispatch, getState) => {\n        // remove from state\n        dispatch(removeAddress(addressId))\n        // remove all balance entries\n        dispatch(clearAddressBalances(addressId))\n        // update localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n    }\n}\n\nexport const REMOVE_ADDRESS='REMOVE_ADDRESS'\nexport function removeAddress(addressId) {\n    return {\n        type: REMOVE_ADDRESS,\n        payload: {\n            addressId\n        }\n    }\n}\n\nexport const CHANGE_ADDRESS_TYPE='CHANGE_ADDRESS_TYPE'\nexport function changeAddressType(addressId, newType) {\n    return {\n        type: CHANGE_ADDRESS_TYPE,\n        payload: {\n            addressId,\n            newType,\n        }\n    }\n}\n\nexport function addNewAddress(address, ensName, type) {\n    return (dispatch, getState) => {\n        // a new address is added.\n        // make sure that all addresses are stored in lowercase\n        address = address.toLowerCase()\n        // add address to store\n        dispatch(addAddress(address, ensName, type))\n        // save address in localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n        // If i'm tracking tokens start getting balance right away\n        const trackedIds = getState().tokens.trackedIds\n        if (trackedIds.length) {\n            // load balance for all tracked tokens\n            dispatch(loadMultiTokenBalances(trackedIds, address))\n        }\n    }\n}\n\nexport function changeOwnAddresses(accounts) {\n    // for each account in accounts:\n    // -> if it is not in addresses, add it\n    // -> if it is in addresses, but marked as \"external\", change type to \"owned\"\n    return (dispatch, getState) => {\n        const addressesById = getState().addresses.byId\n\n        const newAccounts = accounts.filter(account => {\n            const existingAddress = Object.values(addressesById).filter(entry => {\n                return (entry.address === account)\n            })\n            if (existingAddress.length > 0) {\n                // check if the type has changed\n                if (existingAddress[0].type !== ADDRESS_TYPE_OWNED){\n                    console.log(\"Changing address \" + existingAddress[0].address + \" type to Owned!\")\n                    dispatch(changeAddressType(existingAddress[0].address, ADDRESS_TYPE_OWNED))\n                }\n                return false // address already known\n            }\n            return true // address needs to be added\n        })\n\n        // now check if there is any address currently marked as owned that is no more in accounts\n        const makeExternal = Object.values(addressesById).filter(entry => {\n            if (entry.type === ADDRESS_TYPE_OWNED) {\n                // if this OWNED address is not in accounts array it needs to change to EXTERNAL!\n                const idx = accounts.indexOf(entry.address)\n                return (idx === -1)\n            }\n            return false\n        })\n\n        // make old owned addresses external\n        makeExternal.forEach(address => {\n            dispatch(changeAddressType(address.address, ADDRESS_TYPE_EXTERNAL))\n        })\n\n        // add all new addresses\n        newAccounts.forEach(account => {\n            dispatch(addNewAddress(account, '', ADDRESS_TYPE_OWNED))\n        })\n    }\n}\n\nexport const CHANGE_SELECTOR_ADDRESSID = 'CHANGE_SELECTOR_ADDRESSID'\nexport function changeSelectorAddressId(selectedAddressId) {\n    return {\n        type: CHANGE_SELECTOR_ADDRESSID,\n        payload: {\n            selectedAddressId,\n        }\n    }\n}\n","import {\n    ADD_ADDRESS, ADDRESS_BALANCES_STATES, CHANGE_ADDRESS_BALANCES_STATE, CHANGE_ADDRESS_TYPE,\n    REMOVE_ADDRESS\n} from '../addressActions'\n\nconst ADDRESS_BY_ID_INITIAL = {}\n\nfunction addAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId, address, ensName, type} = payload\n    if (Object.keys(state).indexOf(addressId) > -1)\n    {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return {\n        ...state,\n        [addressId]: {\n            address,\n            ensName,\n            type,\n            balancesState: ADDRESS_BALANCES_STATES.VIRGIN,\n            eventIds: []\n        },\n    }\n}\n\nfunction removeAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    let newState = Object.assign({}, state)\n    delete newState[addressId]\n    return newState\n}\n\nfunction changeAddressType(state, action) {\n    const {payload} = action\n    const {addressId, newType} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            type: newType\n        }\n    }\n}\n\nfunction changeAddressBalancesState(state, action) {\n    const {payload} = action\n    const {addressBalancesState, addressId} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            balancesState: addressBalancesState\n        }\n    }\n}\n\nexport const addressByIdReducer = (state=ADDRESS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressEntry(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressEntry(state, action)\n        case CHANGE_ADDRESS_TYPE:\n            return changeAddressType(state, action)\n        case CHANGE_ADDRESS_BALANCES_STATE:\n            return changeAddressBalancesState(state, action)\n        default:\n    }\n    return state;\n}\n","import {ADD_ADDRESS, REMOVE_ADDRESS} from '../addressActions'\n\nconst ALL_ADDRESSES_INITIAL = []\n/*const ALL_ADDRESSES_INITIAL = [\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n]*/\n\nfunction addAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(addressId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return state.concat(addressId)\n}\n\nfunction removeAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    return state.filter(entryId => (entryId !== addressId))\n}\n\nexport const allAddressIdsReducer = (state=ALL_ADDRESSES_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressId(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressId(state, action)\n        default:\n    }\n    return state;\n}\n","import {CHANGE_SELECTOR_ADDRESSID} from '../addressActions'\n\nconst SELECTOR_INITIAL = {\n    selectedAddressId: '',\n}\n\nfunction changeSelectorAddressId(state, action){\n    const {payload} = action\n    const {selectedAddressId} = payload\n\n    return {\n        ...state,\n        selectedAddressId,\n    }\n}\n\nexport const addressSelectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_ADDRESSID:\n            return changeSelectorAddressId(state, action)\n        default:\n            return state\n    }\n}\n\n","import {addressByIdReducer} from './addressByIdReducer'\nimport {allAddressIdsReducer} from './allAddressIdsReducer'\nimport {combineReducers} from 'redux'\nimport {addressSelectorReducer} from './addressSelectorReducer'\n\n/*\nState tree:\n{\n    addresses: {\n        byId: {\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n                address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n                ensName: 'validaddress.eth',\n                type: ADDRESS_TYPE_EXTERNAL,\n                balancesState: 'virgin',\n                eventIds: []\n            },\n            ...\n        }\n\n        allIds: [\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n            '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n            '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9'\n        ]\n    }\n}\n*/\n\nexport const addresses = combineReducers({\n    byId : addressByIdReducer,\n    allIds : allAddressIdsReducer,\n    selector: addressSelectorReducer,\n});\n","import {\n    BALANCE_STATES,\n    CREATE_BALANCE_ENTRY,\n    DELETE_BALANCE_ENTRY,\n    SET_BALANCE,\n    SET_BALANCE_STATE\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\nimport {BigNumber} from 'bignumber.js'\n\nconst BALANCE_BY_ID_INITIAL = {}\n\nfunction clearAllBalances() {\n    return BALANCE_BY_ID_INITIAL;\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balance\n        }\n    };\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId, addressId, tokenId} = payload\n    return {\n        ...state,\n        [balanceId] : {\n            balanceId,\n            addressId,\n            tokenId,\n            balance: new BigNumber(0),\n            balanceState: BALANCE_STATES.VIRGIN,\n        }\n    }\n}\n\nfunction balanceStateChanged(state, action){\n    const {payload} = action\n    const {balanceId, balanceState} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balanceState,\n        }\n    }\n\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    delete state[balanceId]\n    return state\n}\n\n\nexport const byId = (state=BALANCE_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case SET_BALANCE_STATE: {\n            return balanceStateChanged(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state;\n    }\n}\n","import {CREATE_BALANCE_ENTRY, DELETE_BALANCE_ENTRY} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_BALANCES_INITIAL = []\n\nfunction clearAllBalances() {\n    return ALL_BALANCES_INITIAL;\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(balanceId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate balance \" + balanceId)\n        return state\n    }\n    return state.concat(balanceId)\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\n\nexport const allIds = (state=ALL_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state\n    }\n}\n","import {DELETE_BALANCE_ENTRY, SET_BALANCE} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst POSITIVE_BALANCES_INITIAL = []\n\nfunction clearPositiveBalances() {\n    return POSITIVE_BALANCES_INITIAL\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1) {\n        // this balance entry is currently marked as having a balance...\n        if (balance.isZero()) {\n            // no more balance. Remove from array\n            const newState = state.filter(entry => entry !== balanceId)\n            return newState\n        } else {\n            // all set, no need for action\n            return state\n        }\n    } else {\n        // this balance entry is currently marked as having NO balance...\n        if (balance.greaterThan(0)) {\n            // ... but it has a balance now! Add it to list.\n            return state.concat(balanceId)\n        } else {\n            // ... and it still has no balance. No need for action\n            return state\n        }\n    }\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\nexport const positiveIds = (state=POSITIVE_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST:\n            return clearPositiveBalances()\n        default:\n            return state;\n    }\n}\n","import {\n    CHANGE_BALANCE_FILTER_PROPS,\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst BALANCE_LISTSTATE_INITIAL = {\n    filter: '',\n    matchedBalanceIds: [],\n    displayCount: 10,\n}\n\nfunction clearBalanceListState() {\n    return BALANCE_LISTSTATE_INITIAL\n}\n\nfunction changeBalanceFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedBalanceIds} = payload\n    return {\n        ...state,\n        filter,\n        matchedBalanceIds\n    }\n}\n\nexport const listStateReducer = (state=BALANCE_LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_BALANCE_FILTER_PROPS:\n            return changeBalanceFilterProps(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearBalanceListState()\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {byId} from './balanceByIdReducer'\nimport {allIds} from './allBalancesReducer'\nimport {positiveIds} from './positiveBalancesReducer'\nimport {listStateReducer} from './BalanceListStateReducer'\n\n/*\nState tree:\n{\n    balance: {\n        byId: {\n            [1]: {\n                balanceId: 1\n                tokenId: 1\n                addressId: 1\n                balance: 22.45\n            },\n        }\n        allIds: [1],\n        positiveIds: [1]    // all balances that have an actual balance > 0\n        listState: {\n            filter: '',\n            matchedBalanceIds: [],\n            displayCount: 10,\n        }\n    }\n}\n*/\n\nexport const balance = combineReducers({\n    byId : byId,\n    allIds : allIds,\n    positiveIds: positiveIds,\n    listState: listStateReducer,\n})\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst EVENT_BY_ID_INITIAL = {}\n\nfunction addEvents(state, action) {\n    const {payload} = action\n    const {events, tokenId} = payload\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        if (Object.keys(state).includes(transferEventId ))\n        {\n            console.warn(\"Ignoring duplicate event \" + transferEventId )\n            return\n        }\n        state = {\n            ...state,\n            [transferEventId]: {\n                transferEventId,\n                tokenId,\n                transferEvent,\n            },\n        }\n    })\n    return state\n}\n\nfunction clearEvents() {\n    return EVENT_BY_ID_INITIAL\n}\n\nexport const eventByIdReducer = (state=EVENT_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEvents(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_EVENTS_INITIAL = []\n\nfunction addEventIds(state, action) {\n    const {payload} = action\n    const {events} = payload\n    let newState = state\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        const existingIndex = state.indexOf(transferEventId)\n        if (existingIndex > -1) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newState = newState.concat(transferEventId)\n    })\n    return newState\n}\n\nfunction clearEvents() {\n    return ALL_EVENTS_INITIAL\n}\n\nexport const allEventIdsReducer = (state=ALL_EVENTS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {CHANGE_EVENT_SCAN_PROPS, CHANGE_TRANSFEREVENTLIST_PAGE} from '../eventActions'\nimport {CHANGE_SELECTOR_ADDRESSID} from '../../address/addressActions'\nimport {CHANGE_SELECTOR_TOKENID, CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    activePage: 1,\n    currentChunk: 0,\n    maxChunks: 0,\n}\n\nfunction transferEventListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nfunction resetPager(state) {\n    return {\n        ...state,\n        activePage: 1\n    }\n}\n\nfunction changeEventScanProps(state, action) {\n    const {payload} = action\n    const {\n        currentChunk,\n        maxChunks,\n    } = payload.props\n\n    return {\n        ...state,\n        currentChunk,\n        maxChunks\n    }\n}\n\nexport const transferEventListStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch(action.type) {\n        case CHANGE_TRANSFEREVENTLIST_PAGE:\n            return transferEventListPageChanged(state, action)\n        case CHANGE_EVENT_SCAN_PROPS:\n            return changeEventScanProps(state, action)\n        case CHANGE_SELECTOR_ADDRESSID:\n        case CHANGE_SELECTOR_TOKENID:\n        case CLEAR_TOKEN_LIST:\n            return resetPager(state, action)\n        default:\n            return state\n    }\n}\n","import {combineReducers} from 'redux'\nimport {eventByIdReducer} from './eventByIdReducer'\nimport {allEventIdsReducer} from './allEventIdsReducer'\nimport {addressContractEventsByIdReducer} from './addressContractEventsByIdReducer'\nimport {transferEventListStateReducer} from './listStateReducer'\n\n\nexport const events = combineReducers({\n    byId : eventByIdReducer,\n    allIds : allEventIdsReducer,\n    aceById: addressContractEventsByIdReducer,\n    listState: transferEventListStateReducer,\n});\n","export const SHOW_MODAL = 'SHOW_MODAL'\nexport function showModal(modalType, modalProps) {\n    return {\n        type: SHOW_MODAL,\n        payload: {\n            modalType,\n            modalProps\n        }\n    }\n}\n\nexport const HIDE_MODAL = 'HIDE_MODAL'\nexport function hideModal() {\n    return {\n        type: HIDE_MODAL,\n        payload: {}\n    }\n}\n","import {HIDE_MODAL, SHOW_MODAL} from './modalActions'\n\nconst MODAL_INITIAL = {\n    modalType: null,\n    modalProps: {}\n}\n\nfunction showModal(state, action) {\n    const {payload} = action\n    const {modalType, modalProps} = payload\n    return {\n        modalType,\n        modalProps\n    }\n}\n\nfunction hideModal() {\n    return MODAL_INITIAL\n}\n\nexport const modal = (state=MODAL_INITIAL, action) => {\n    switch (action.type) {\n        case SHOW_MODAL:\n            return showModal(state, action)\n        case HIDE_MODAL:\n            return hideModal()\n        default:\n    }\n    return state;\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport {tokens} from \"./modules/token/reducers/tokenReducer\"\nimport {web3Instance} from \"./modules/web3/web3Reducer\"\nimport thunk from 'redux-thunk'\nimport {addresses} from './modules/address/reducers/addressReducer'\nimport {balance} from './modules/balance/reducer/balanceReducer'\nimport {createLogger} from 'redux-logger'\nimport {events} from './modules/event/reducers/eventReducer'\nimport {modal} from './modules/modal/modalReducer'\n\n\nconst reducer = combineReducers({\n    web3Instance,\n    tokens,\n    addresses,\n    balance,\n    events,\n    modal,\n})\n\nconst logger = createLogger({\n    // Would love to log state diffs, but apparently logger tries to call all web3 instance methods\n    // which will make metamask throw an error due to trying to call methods synchronous.\n    // There may be a workaround somewhere, but disabling state diff for now...\n    diff: false\n});\n\n// REDUX Dev Tools don't play well at all with web3 from Metamask extension...\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    let store = createStore(\n        reducer,\n        compose(\n            applyMiddleware(\n                thunk,\n                logger,\n            )\n        )\n    )\n    return {store}\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Modal} from 'semantic-ui-react'\n\nconst TestModal = (props) => {\n    const {closeModal} = props\n    return (\n        <Modal open onClose={closeModal}>\n            <Modal.Header>Select a Photo</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Header>Default Profile Image</Header>\n                    <p>We've found the following gravatar image associated with your e-mail address.</p>\n                    <p>Is it okay to use this photo?</p>\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTestModal.propTypes = {\n    closeModal: PropTypes.func.isRequired\n}\n\nTestModal.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TestModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {addValidationRule} from 'formsy-react'\nimport {Grid, Header, List, Modal, Segment} from 'semantic-ui-react'\nimport {Label} from 'semantic-ui-react'\nimport {Form, Input} from 'formsy-semantic-ui-react'\n\nconst TransferForm = (props) => {\n    const {\n        web3, onValidSubmit, onClose,\n        fromAddress,\n        tokenName, tokenSymbol, tokenBalance,\n        etherBalance, gasCosts } = props\n\n    const errorLabel = <Label color=\"red\" pointing/>\n\n    addValidationRule('isEthereumAddress', (values, value) => (web3.isAddress(value)))\n    addValidationRule('isLessThanOrEqual', (values, value, max) => {\n        try {\n            const bnValue = web3.toBigNumber(value)\n            const bnMax = web3.toBigNumber(max)\n            return bnValue.lessThanOrEqualTo(bnMax)\n        }\n        catch (err) {\n            // if anything goes wrong with BigNumber, just fail validation\n            return false\n        }\n    })\n\n    return (\n        <Modal open onClose={onClose} size={'small'} closeIcon>\n            <Modal.Header>Transfer '{tokenName}' Tokens</Modal.Header>\n            <Modal.Content>\n\n                <Form noValidate onValidSubmit={onValidSubmit}>\n                    <Segment>\n                        <Grid columns={2}>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account address:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>{fromAddress}</Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account balance:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>\n                                    <List>\n                                        <List.Item>\n                                            {tokenBalance.toFixed()} {tokenSymbol}\n                                        </List.Item>\n                                        <List.Item>{etherBalance.toFixed()} ETH</List.Item>\n                                    </List>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">To Address</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"toAddress\"\n                                   placeholder=\"Receiving ethereum address\"\n                                   required\n                                   instantValidation\n                                   validations=\"isEthereumAddress\"\n                                   validationErrors={{\n                                       isEthereumAddress: 'This is not a valid Ethereum address',\n                                       isDefaultRequiredValue: 'To Address is Required',\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n\n                        <Header size=\"small\">Amount to send</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"amount\"\n                                   placeholder=\"Enter amount\"\n                                   label={tokenSymbol}\n                                   labelPosition=\"right\"\n                                   required\n                                   instantValidation\n                                   validations={'isNumeric,isLessThanOrEqual:' + tokenBalance.toFixed()}\n                                   validationErrors={{\n                                       isNumeric: 'This is not a valid number',\n                                       isDefaultRequiredValue: 'Amount is Required',\n                                       isLessThanOrEqual: 'Maximum available balance is ' + tokenBalance.toFixed()\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">Estimated Gas costs</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"gasCosts\"\n                                   label=\"ETH\"\n                                   labelPosition=\"right\"\n                                   readOnly\n                                   value={gasCosts}\n                                   validations={'isLessThanOrEqual:' + etherBalance.toFixed()}\n                                   instantValidation\n                                   validationErrors={{\n                                       isLessThanOrEqual: 'Not enough ether to cover gas costs'\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n                    <Form.Group>\n                        <Form.Button content=\"Submit\" color=\"green\"/>\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTransferForm.propTypes = {\n    web3: PropTypes.object.isRequired\n}\n\nTransferForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferForm\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TransferForm from './TransferForm'\nimport {connect} from 'react-redux'\nimport {transferToken} from '../../token/tokenActions'\n\nclass TransferFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            amount: this.props.web3.toBigNumber('0'),\n            toAddressValid: false,\n            amountValid: false,\n            rateValid: false\n        }\n    }\n\n    onValidSubmit = (formData) => alert(JSON.stringify(formData));   // eslint-disable-line\n\n    render() {\n        const {fromAddress, tokenName, tokenSymbol, tokenBalance} = this.props\n\n        // TODO: Calculate real gas costs\n        const gasCosts = this.props.web3.toBigNumber('0.0022')\n        // TODO: Get real balance\n        const etherBalance = this.props.web3.toBigNumber('12.3456')\n\n        return <TransferForm onValidSubmit={this.onValidSubmit}\n                             onClose={this.props.closeModal}\n                             fromAddress={fromAddress}\n                             web3={this.props.web3}\n                             tokenName={tokenName}\n                             tokenSymbol={tokenSymbol}\n                             tokenBalance={tokenBalance}\n                             gasCosts={gasCosts}\n                             etherBalance={etherBalance}\n        />\n    }\n}\n\nTransferFormContainer.propTypes = {\n    fromAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenId: PropTypes.number.isRequired,\n    tokenBalanceId: PropTypes.number.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n}\n\nTransferFormContainer.defaultProps = {\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const fromAddress = state.addresses.byId[balanceEntry.addressId].address\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n\n    return {\n        web3: state.web3Instance.web3,\n        fromAddress,\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenId: token.id,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    transferToken: () => {\n        dispatch(transferToken())\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport TestModal from './TestModal'\nimport {hideModal} from './modalActions'\nimport TransferFormContainer from '../forms/transferForm/TransferFormContainer'\n\nexport const MODAL_COMPONENTS = {\n    'TEST_MODAL': TestModal,\n    'TRANSFER_FORM_CONTAINER': TransferFormContainer\n    /* other modals */\n}\n\nclass ModalRoot extends Component {\n    render() {\n        const {modalType, modalProps, closeModal} = this.props\n\n        if (!modalType){\n            // currently no modal needs to be shown\n            return null\n        }\n\n        const SpecificModal = MODAL_COMPONENTS[modalType]\n        return <SpecificModal closeModal={closeModal} {...modalProps} />\n    }\n}\n\nconst mapStateToProps = state => (\n    state.modal\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => {\n        dispatch(hideModal())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\n\nconst Balance = (props) => {\n    const {balance, numDecimals} = props\n    const trigger = <span>{balance.toFixed(numDecimals)}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={balance.toFixed(Math.max(numDecimals, balance.dp()))}\n        />\n    )\n}\n\nBalance.propTypes = {\n    balance: PropTypes.object.isRequired, // BigNum instance\n    numDecimals: PropTypes.number\n}\n\nBalance.defaultProps = {\n    numDecimals: 3\n}\n\nexport default Balance\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    if (ensName) {\n        return <div>\n            <div><strong>{ensName}</strong></div>\n            <div><small>{address}</small></div>\n        </div>\n    } else {\n        return <div><strong>{address}</strong></div>\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from '../address/addressActions'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst BalanceItemDetail = (props) => {\n    const {address, ensName, balance, loading, reloadBalance, url/*, addressType, openTransferModal*/} = props\n    /*const external = (addressType !== ADDRESS_TYPE_OWNED)*/\n\n    /*\n        transfer button removed until functionality gets implemented...\n\n                <Button icon='external share'\n                    size='mini'\n                    circular\n                    onClick={openTransferModal}\n                    disabled={external}\n                />\n     */\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                <Link to={url}><AddressDisplay address={address} ensName={ensName}/></Link>\n            </Table.Cell>\n            <Table.Cell><Balance balance={balance}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nBalanceItemDetail.propTypes = {\n    address: PropTypes.string.isRequired,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    ensName: PropTypes.string,\n    balance: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    url: PropTypes.string.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemDetail from './BalanceItemDetail'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport {showModal} from '../modal/modalActions'\n\nclass BalanceItemDetailContainer extends Component {\n    render() {\n        return (\n            <BalanceItemDetail address={this.props.address}\n                               addressType={this.props.addressType}\n                               balance={this.props.balance}\n                               reloadBalance={this.props.reloadBalance}\n                               loading={this.props.loading}\n                               url={this.props.url}\n                               openTransferModal={this.props.openTransferModal}\n                               ensName={this.props.ensName}\n            />\n        )\n    }\n}\n\nBalanceItemDetailContainer.propTypes = {\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.object.isRequired,\n    tokenBalanceId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n}\n\nBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const addressEntry = state.addresses.byId[balanceEntry.addressId]\n    const balance = balanceEntry.balance.dividedBy(token.decimals)\n    return {\n        balance,\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n        url: \"/events/\" + token.id + \"/\" + addressEntry.address\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    },\n    openTransferModal: () => {\n        dispatch(showModal('TRANSFER_FORM_CONTAINER',\n            {\n                tokenBalanceId: ownProps.tokenBalanceId,\n            }\n        ))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport BalanceItemDetailContainer from './BalanceItemDetailContainer'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\n\nconst BalanceItem = (props) => {\n    const {expanded, tokenName, tokenSymbol, tokenBalances, total, reloadBalance, loading, tokenEventsLinkOptions, toggleCollapse} = props\n    let eventLink = <Link to={tokenEventsLinkOptions}>{tokenName} ({tokenSymbol})</Link>\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>{eventLink}</Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value><Balance balance={total}/></Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <BalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    } else {\n        tableBody = null\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nBalanceItem.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    total: PropTypes.object.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    tokenEventsLinkOptions: PropTypes.object.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport BalanceItem from './BalanceItem'\nimport _ from 'lodash'\n\n\nclass BalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        return (\n            <BalanceItem tokenName={this.props.token.name}\n                         tokenSymbol={this.props.token.symbol}\n                         tokenBalances={this.props.tokenBalances}\n                         total={this.props.total}\n                         reloadBalance={this.reloadBalance}\n                         loading={this.props.loading}\n                         tokenEventsLinkOptions={this.props.tokenEventsLinkOptions}\n                         expanded={this.state.expanded}\n                         toggleCollapse={this.toggleCollapse}\n            />\n        )\n    }\n\n    /*\n    shouldComponentUpdate(nextProps) {\n        // Render() should only ever be necessary when loading state, token itself or\n        // it's total balance changes, i.e. an address was added/removed to\n        // the watch list or the balance of an address changed.\n        return (\n            (!nextProps.total.equals(this.props.total)) ||\n            (nextProps.tokenId !== this.props.tokenId) ||\n            (nextProps.loading !== this.props.loading)\n        )\n    }*/\n}\n\nBalanceItemContainer.propTypes = {\n}\n\nBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n\n    // calculate total balance of all addresses\n    const total = _.reduce(ownProps.tokenBalances, (sum, tokenBalance) => {\n        return sum.plus(tokenBalance.balance)\n    }, new BigNumber(0) ).dividedBy(token.decimals)\n\n    // if any of the tokenBalances is loading, the whole container is loading\n    let loading = false\n    ownProps.tokenBalances.forEach(tokenBalance => {\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n    })\n\n    const tokenEventsLinkOptions = {\n        pathname: '/events/' + ownProps.tokenId,\n    }\n\n    return {\n        token,\n        total,\n        loading,\n        tokenEventsLinkOptions,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemContainer from './BalanceItemContainer'\n\nconst BalancesList = (props) => {\n    return (\n        <div>\n            {Object.entries(props.balancesByToken).map(entry =>\n                <BalanceItemContainer key={entry[0]} tokenId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nBalancesList.propTypes = {\n    balancesByToken: PropTypes.object.isRequired\n}\n\nBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalancesList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Input, Icon} from 'semantic-ui-react'\n\nconst TokenListFilter = (props) => {\n    const {filterString, handleChange, filterIsActive, clearFilter} = props\n    let icon = null\n    if (filterIsActive) {\n        icon = <Icon name='eraser' circular link onClick={clearFilter} />\n    }\n    return (\n        <Input label='Filter'\n               name='filter'\n               placeholder='Enter name, symbol or contract address'\n               onChange={handleChange}\n               value={filterString}\n               icon={icon}\n               fluid\n        />\n    )\n}\n\nTokenListFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    displayed: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n}\n\nTokenListFilter.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenListFilter\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {setFilterProps} from './tokenActions'\nimport TokenListFilter from './TokenListFilter'\nimport {setBalanceFilterString} from '../balance/balanceActions'\n\nclass TokenListFilterContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, {name, value}) {\n        this.props.setFilterString(value)\n    }\n\n    render() {\n        return <TokenListFilter filterString={this.props.filterString}\n                                handleChange={this.handleChange}\n                                filterIsActive={this.props.filterIsActive}\n                                displayed={this.props.displayed}\n                                total={this.props.total}\n                                clearFilter={this.props.clearFilter}/>\n    }\n}\n\nTokenListFilterContainer.propTypes = {\n    target: PropTypes.string.isRequired,\n    total: PropTypes.number.isRequired,\n    displayed: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    filterString: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            total: state.tokens.allIds.length,\n            displayed: state.tokens.listState.matchedTokenIds.length,\n            filterIsActive: state.tokens.listState.filterIsActive,\n            filterString: state.tokens.listState.filter,\n            showOnlyTracked: state.tokens.listState.showOnlyTracked,\n        }\n    }\n    if (target === 'balancelist') {\n        return {\n            total: state.balance.allIds.length,\n            displayed: state.balance.listState.matchedBalanceIds.length,\n            filterIsActive: state.balance.listState.filter.length > 0,\n            filterString: state.balance.listState.filter,\n        }\n    }\n\n    return {}\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            clearFilter: () => {\n                dispatch(setFilterProps({filterString: ''}))\n            },\n            setFilterString: (filter) => {\n                dispatch(setFilterProps({filterString: filter}))\n            }\n        }\n    }\n\n    if (target === 'balancelist') {\n        return {\n            clearFilter: () => {\n                dispatch(setBalanceFilterString(''))\n            },\n            setFilterString: (filter) => {\n                dispatch(setBalanceFilterString(filter))\n            }\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenListFilterContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header} from 'semantic-ui-react'\n\nconst ScreenHeader = (props) => {\n    const {title} = props\n    /*\n     custom style \"marginTop: 0\" required to prevent header sticking just a little bit outside of its grid row.\n     Not sure if this is an error on my side, a bug of react-semantic-ui or semantic-ui itself, or intended behaviour...\n     */\n    return (\n        <Header as={'h1'} block inverted color={'green'} textAlign={'center'}\n                style={{\n                    marginTop: 0,\n                }}>\n            {title}\n        </Header>\n    )\n}\n\nScreenHeader.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    title: PropTypes.string.isRequired\n}\n\nScreenHeader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ScreenHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Divider, Message} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport BalancesList from '../balance/BalancesList'\nimport TokenListFilterContainer from '../token/TokenListFilterContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Overview = (props) => {\n    const {hasAccounts, balancesByToken} = props\n\n    let body\n    if (hasAccounts) {\n        if (Object.keys(balancesByToken).length) {\n            body = <BalancesList balancesByToken={balancesByToken}/>\n        }\n        else {\n            body = <Message>\n                <Message.Header>\n                    No balances\n                </Message.Header>\n                <Message.Content>\n                    There are no token balances to display. Things you can try:\n                </Message.Content>\n                <Message.List>\n                    <Message.Item>Change the filterstring</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to add additional accounts</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/tokenContracts/'} }>Token Manager</Link> to tracked additional tokens</Message.Item>\n                </Message.List>\n            </Message>\n        }\n    } else {\n        body = <Message>\n            <Message.Header>\n                No accounts\n            </Message.Header>\n            <p>You have no watched or unlocked accounts. Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to setup accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Overview'}/>\n            {hasAccounts && <TokenListFilterContainer target={'balancelist'} />}\n            <Divider/>\n            {body}\n        </React.Fragment>\n    )\n}\n\nOverview.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired,\n}\n\nOverview.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default Overview\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport Overview from './Overview'\nimport {connect} from 'react-redux'\nimport {groupBy} from 'lodash'\n\nclass OverviewContainer extends Component {\n    render() {\n        const {hasAccounts, balancesByToken} = this.props\n        return (\n            <Overview hasAccounts={hasAccounts} balancesByToken={balancesByToken}/>\n        )\n    }\n}\n\nOverviewContainer.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired\n}\n\nOverviewContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const hasAccounts = (state.addresses.allIds.length > 0)\n    const filterIsActive = (state.balance.listState.filter.length > 0)\n\n    // get balanceIds to display\n    const balanceIds = filterIsActive ? state.balance.listState.matchedBalanceIds : state.balance.allIds\n    // map IDs to Entries\n    const balanceEntries = balanceIds.map(id => state.balance.byId[id])\n    // now group the balances by token\n    const balancesByToken = groupBy(balanceEntries, 'tokenId')\n\n    return {\n        hasAccounts,\n        balancesByToken,\n    }\n}\n\nexport default connect(mapStateToProps)(OverviewContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Web3Info = (props) => {\n    const {name, id, nodeVersion, block} = props\n    const gitHub = 'https://github.com/TripleSpeeder/TokenStation'\n    const contact = 'michael@m-bauer.org'\n    const srcUrl = 'https://github.com/ethereum-lists/tokens'\n    return (\n        <React.Fragment>\n            <p>\n                Network: {name} ({id}) | Block: {block ? block.number : '?'} | Node version: {nodeVersion}\n            </p>\n            <p>\n                ERC20 contract data origin: <strong><a href={srcUrl} target='_blank' rel='noopener noreferrer'>{srcUrl}</a></strong>\n            </p>\n            <p>\n                GitHub: <strong><a target='_blank' rel='noopener noreferrer' href={gitHub}>{gitHub}</a></strong> | contact: <strong><a href={'mailto:' + contact}>{contact}</a></strong>\n            </p>\n        </React.Fragment>\n    )\n\n}\n\nWeb3Info.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.shape({\n            number: PropTypes.number,\n            timestamp: PropTypes.number\n        }),\n    apiVersion: PropTypes.string,\n    nodeVersion: PropTypes.string,\n}\n\nexport default Web3Info\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport Web3Info from \"./web3Info\"\nimport {Segment} from 'semantic-ui-react'\n\nclass Web3Container extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.filter = null\n    }\n\n    render() {\n        const apiVersion = this.props.web3.version.api\n        return <Segment textAlign='center'>\n            <Web3Info apiVersion={apiVersion}\n                         name={this.props.name}\n                         block={this.props.block}\n                         id={this.props.id}\n                         nodeVersion={this.props.nodeVersion}\n            />\n        </Segment>\n    }\n}\n\nWeb3Container.propTypes = {\n    web3: PropTypes.object,\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.object,\n    nodeVersion: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n    web3: state.web3Instance.web3,\n    name: state.web3Instance.name,\n    id: state.web3Instance.id,\n    block: state.web3Instance.block,\n    nodeVersion: state.web3Instance.nodeVersion\n})\n\nexport default connect(mapStateToProps)(Web3Container)\n","import React from 'react'\nimport {Icon, Menu} from 'semantic-ui-react'\nimport {NavLink} from 'react-router-dom'\n\n\nconst Sidebar = () => {\n    return (\n        <Menu icon='labeled' fluid inverted vertical pointing size={'large'}>\n            <Menu.Item header>TokenStation.io</Menu.Item>\n            <Menu.Item as={NavLink} to='/overview' name='overview'>\n                <Icon name='home' />\n                Overview\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/accounts' name='accounts'>\n                <Icon name='users' />\n                Manage Accounts\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/events' name='events' >\n                <Icon name='exchange' />\n                View Transfer Events\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/tokenContracts' name='tokenContracts'>\n                <Icon name='cube' />\n                Manage Contracts\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from './addressActions'\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst AddressRow = (props) => {\n\n    const {address, addressType, ensName, handleRemove} = props\n\n    let iconName, popupContent, removeButton\n    if (addressType === ADDRESS_TYPE_OWNED) {\n        iconName = 'unlock'\n        popupContent = 'This is one of your addresses'\n        removeButton = null\n    } else {\n        iconName = 'eye'\n        popupContent = 'This is a watch-only address'\n        removeButton = <Button size='tiny' onClick={handleRemove} icon='delete'/>\n    }\n\n    const icon = <Popup trigger={<Icon size='large' name={iconName}/>}\n                        content={popupContent}\n    />\n\n    /*\n    let listProgress = null\n    if (this.props.progressCurrent < this.props.progressTotal) {\n        listProgress = <List.Description>\n            <Progress size='small'\n                      value={this.props.progressCurrent}\n                      total={this.props.progressTotal}\n                      progress='ratio'\n                      precision={1}\n            />\n        </List.Description>\n    }*/\n    return (\n        <Table.Row>\n            <Table.Cell textAlign={'left'} collapsing>\n                {icon}\n            </Table.Cell>\n            <Table.Cell textAlign={'left'}>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n            <Table.Cell textAlign={'right'} collapsing>\n                {removeButton}\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressRow.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nAddressRow.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressRow\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {removeAddressThunk} from './addressActions'\nimport {BALANCE_STATES} from '../balance/balanceActions'\nimport AddressRow from './AddressRow'\n\n\nclass AddressContainer extends PureComponent {\n\n    handleRemove = () => {\n        this.props.removeAddress(this.props.addressId)\n    }\n\n    render() {\n        return <AddressRow address={this.props.address}\n                           addressType={this.props.addressType}\n                           ensName={this.props.ensName}\n                           handleRemove={this.handleRemove}\n        />\n    }\n}\n\nAddressContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    removeAddress: PropTypes.func.isRequired,\n    progressTotal: PropTypes.number.isRequired,\n    progressCurrent: PropTypes.number.isRequired\n}\n\nAddressContainer.defaultProps = {}\n\nconst mapStateToProps = (state, ownProps) => {\n    const addressEntry = state.addresses.byId[ownProps.addressId]\n    const progressTotal = state.tokens.listState.total\n    // count all balance entries that include addressId\n    const matchedBalanceEntries = Object.values(state.balance.byId).filter(entry => {\n        return ((entry.addressId === ownProps.addressId) &&\n            (entry.balanceState === BALANCE_STATES.INITIALIZED))\n    })\n    const progressCurrent = matchedBalanceEntries.length\n\n    return {\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        balancesState: addressEntry.balancesState,\n        progressTotal,\n        progressCurrent\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAddress: (addressId) => {\n        dispatch(removeAddressThunk(addressId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst QueryAddressForm = (props) => {\n\n    const {handleChange, handleSubmit, loading, disabled, error, address, ensName, value} = props\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group inline>\n                <Form.Input width={10}\n                            name='address'\n                            placeholder='Address or ENS Name'\n                            error={error}\n                            loading={loading}\n                            onChange={handleChange}\n                            value={value}\n                            label={'Add account'}\n                />\n                <Form.Button\n                    content='Submit'\n                    disabled={disabled}\n                    width={6}\n                />\n            </Form.Group>\n        </Form>\n    )\n}\n\nQueryAddressForm.propTypes = {\n    address: PropTypes.string,\n    ensName: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nQueryAddressForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default QueryAddressForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {addNewAddress, ADDRESS_TYPE_EXTERNAL} from './addressActions'\nimport QueryAddressForm from './QueryAddressForm'\n\n\nexport const addressStates = {\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nexport class QueryAddressFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        }\n        // kraken4='0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n    }\n\n    handleChange = async (e) => {\n        const input=e.target.value\n        let addressState = addressStates.ADDRESS_INVALID\n        let address = ''\n        let ensName = ''\n        // check for valid input (raw address and ENS name)\n        const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n        const validENSName = (/.*\\.eth$/i.test(input))\n        if (validENSName) {\n            // start resolving process\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_RESOLVING,\n                    address: '',\n                    ensName: input,\n                    input,\n                }\n            )\n            try {\n                const resolvedAddress = await this.props.ens.lookup(input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_VALID,\n                        address: resolvedAddress,\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            } catch (e) {\n                console.log(\"Could not resolve \" + input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_INVALID,\n                        address: '',\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            }\n        }\n        else if(validAddress) {\n            // TODO: Lookup reverse ENS entry\n            addressState = addressStates.ADDRESS_VALID\n            ensName = ''\n            address = input\n            this.setState(\n                {\n                    addressState,\n                    address,\n                    ensName,\n                    input,\n                }\n            )\n        }\n        else {\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_INVALID,\n                    address: '',\n                    ensName: '',\n                    input,\n                }\n            )\n        }\n    }\n\n    handleSubmit = () => {\n        const { address, ensName } = this.state\n        this.props.addNewAddress(address, ensName, ADDRESS_TYPE_EXTERNAL)\n        this.setState({\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        })\n    }\n\n    render() {\n        const error = (this.state.addressState === addressStates.ADDRESS_INVALID)\n        const loading = (this.state.addressState === addressStates.ADDRESS_RESOLVING)\n        const disabled = (error || loading)\n        return (\n            <QueryAddressForm handleChange={this.handleChange}\n                              handleSubmit={this.handleSubmit}\n                              error = {error}\n                              loading={loading}\n                              disabled={disabled}\n                              address={this.state.address}\n                              ensName={this.state.ensName}\n                              value={this.state.input}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const ens = state.web3Instance.ens\n    return {\n        ens\n    }\n}\n\nlet mapDispatchToProps = dispatch => ({\n    addNewAddress: (address, ensName, type) => {\n        dispatch(addNewAddress(address, ensName, type))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryAddressFormContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Divider, Header, Message, Segment, Table} from 'semantic-ui-react'\nimport AddressContainer from './AddressContainer'\nimport QueryAddressFormContainer from \"./QueryAddressFormContainer\"\nimport {ETH_ENABLE_STATES} from '../web3/web3Actions'\n\nconst AddressList = (props) => {\n    let ownTable, watchTable\n    const {ethEnableState, ethEnable} = props\n    let waitingGrant = (ethEnableState === ETH_ENABLE_STATES.WAITING)\n\n    if (props.ownAddressIds.length) {\n        ownTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.ownAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else if (ethEnableState === ETH_ENABLE_STATES.GRANTED) {\n        // Access granted, but no accounts? Must be either Mist with no accounts shared or locked Metamask.\n        ownTable = <Message>\n            <Message.Header>\n                No personal accounts\n            </Message.Header>\n            <p>You need to share your accounts so they are visible here. Log in to Metamask or share accounts in Mist .</p>\n        </Message>\n    } else {\n        // No accounts and no access. Ask for it.\n        ownTable = <Message>\n            <Message.Header>\n                No access to personal accounts\n            </Message.Header>\n            <p>You can grant access to your personal accounts. This will automatically put the accounts to the watch\n                list.</p>\n            <p><Button primary disabled={waitingGrant} loading={waitingGrant} onClick={ethEnable}>Grant access</Button></p>\n        </Message>\n    }\n\n    if (props.watchAddressIds.length) {\n        watchTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.watchAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else {\n        watchTable = <Message>\n            <Message.Header>\n                No watched accounts\n            </Message.Header>\n            <p>You don't have any watched accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment>\n                <Header dividing as='h2'>Personal Accounts</Header>\n                {ownTable}\n            </Segment>\n            <Segment>\n                <Header dividing as='h2'>Watched Accounts</Header>\n                {watchTable}\n                <Divider/>\n                <QueryAddressFormContainer />\n            </Segment>\n        </React.Fragment>\n    )\n}\n\nAddressList.propTypes = {\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n    ethEnableState: PropTypes.oneOf(Object.values(ETH_ENABLE_STATES)),\n    ethEnable: PropTypes.func.isRequired,\n}\n\nexport default AddressList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED, changeOwnAddresses} from './addressActions'\nimport AddressList from './AddressList'\nimport {ETH_ENABLE_STATES, requestEthEnable} from '../web3/web3Actions'\n\nclass AddressListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.updateWeb3Accounts = this.updateWeb3Accounts.bind(this)\n        this.requestEthEnable = this.requestEthEnable.bind(this)\n        this.checkAccountTimer = 0\n    }\n\n    render() {\n        const ethEnableState = this.props.web3Instance ? this.props.web3Instance.ethEnableState : ETH_ENABLE_STATES.REJECTED\n        return <AddressList watchAddressIds={this.props.watchAddressIds}\n                            ownAddressIds={this.props.ownAddressIds}\n                            ethEnableState={ethEnableState}\n                            ethEnable={this.requestEthEnable}\n        />\n    }\n\n    componentDidMount() {\n        this.initAccounts()\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.web3 && (newProps.web3 !== this.props.web3)) {\n            this.initAccounts(newProps.web3)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.checkAccountTimer) {\n            clearInterval(this.checkAccountTimer)\n            this.checkAccountTimer = 0\n        }\n    }\n\n    initAccounts(web3 = this.props.web3) {\n        if (web3) {\n            if (this.checkAccountTimer) {\n                clearInterval(this.checkAccountTimer)\n                this.checkAccountTimer = 0\n            }\n            this.updateWeb3Accounts(this.props.web3)\n            if (this.props.web3.currentProvider.isMetaMask === true) {\n                console.log(\"Metamask detected. Watching for account changes\")\n                this.checkAccountTimer = setInterval(this.updateWeb3Accounts, 100)\n            }\n        }\n    }\n\n    updateWeb3Accounts(web3 = this.props.web3) {\n        web3.eth.getAccounts((error, accounts) => {\n            if (accounts) {\n                this.props.changeOwnAddresses(accounts)\n            }\n        })\n    }\n\n    requestEthEnable() {\n        this.props.ethEnable()\n    }\n}\n\nAddressListContainer.propTypes = {\n    web3: PropTypes.object,\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n}\n\nAddressListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const ownAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_OWNED))\n    const watchAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_EXTERNAL))\n    return {\n        ownAddressIds,\n        watchAddressIds,\n        web3Instance: state.web3Instance ? state.web3Instance : null,\n        web3: state.web3Instance ? state.web3Instance.web3 : null,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeOwnAddresses: (accounts) => {\n        dispatch(changeOwnAddresses(accounts))\n    },\n    ethEnable: () => {\n        dispatch(requestEthEnable())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer)\n","import React from 'react'\nimport AddressListContainer from '../address/AddressListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Accounts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Accounts'}/>\n            <AddressListContainer />\n        </React.Fragment>\n    )\n}\n\nexport default Accounts\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Form} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst SelectableToken = (props) => {\n\n    const {address, ensName, name, symbol, checked, onChange} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell collapsing>\n                <Form.Checkbox checked={checked} onChange={onChange}/>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{name}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{symbol}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nSelectableToken.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default SelectableToken\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport SelectableToken from \"./SelectableToken\"\nimport {changeTokenTrackingThunk} from './tokenActions'\n\n\nclass SelectableTokenContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, data) {\n        const {checked} = data\n        this.props.onChange(this.props.tokenId, checked)\n    }\n\n    render() {\n        return <SelectableToken id={this.props.tokenId}\n                                address={this.props.tokenAddress}\n                                name={this.props.tokenName}\n                                symbol={this.props.tokenSymbol}\n                                onChange={this.handleChange}\n                                checked={this.props.tokenTracked}\n        />\n    }\n}\n\nSelectableTokenContainer.propTypes = {\n    tokenId: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nSelectableTokenContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n    const tracked = (state.tokens.trackedIds.indexOf(ownProps.tokenId) > -1)\n    return {\n        tokenAddress: token.address,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenTracked: tracked,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (tokenId, checked) => {\n        dispatch(changeTokenTrackingThunk(tokenId, checked))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Message} from 'semantic-ui-react'\nimport SelectableTokenContainer from \"./SelectableTokenContainer\"\n\nconst SelectableTokenList = (props) => {\n\n    const {tokenList} = props\n\n    if (tokenList.length) {\n        return (\n            <Table celled>\n                <Table.Body>\n                {tokenList.map((tokenId) => <SelectableTokenContainer\n                    key={tokenId}\n                    tokenId={tokenId}\n                />)}\n                </Table.Body>\n            </Table>\n        )\n    } else {\n        return (\n            <Message negative>\n                <Message.Header>No token contracts to display.</Message.Header>\n                <Message.Content>Things you can try:</Message.Content>\n                <Message.List items={['change/clear the filterstring', 'check if you are connected to the correct network']}>\n                </Message.List>\n            </Message>\n        )\n    }\n}\n\nSelectableTokenList.propTypes = {\n    tokenList: PropTypes.array.isRequired\n}\n\nexport default SelectableTokenList\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Grid, Divider, Checkbox, Pagination, Container, Dropdown} from 'semantic-ui-react'\nimport TokenListFilterContainer from './TokenListFilterContainer'\nimport SelectableTokenList from \"./SelectableTokenList\"\nimport {changeTokenListPage, clearTokenList, setFilterProps} from './tokenActions'\n\nclass SelectableTokenListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleShowOnlyTrackedChange = this.handleShowOnlyTrackedChange.bind(this)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n        this.handleLoadTokens = this.handleLoadTokens.bind(this)\n    }\n\n    handleShowOnlyTrackedChange(e, data) {\n        const {checked} = data\n        this.props.setShowTracked(checked)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTokenListPage(activePage)\n    }\n\n    handleLoadTokens() {\n        this.props.clearTokenList()\n    }\n\n    render() {\n        let pager = null\n        if (this.props.totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                        <Pagination activePage={this.props.activePage}\n                                    onPageChange={this.handlePaginationChange}\n                                    totalPages={this.props.totalPages}/>\n                    </Container>\n        }\n        return (\n            <React.Fragment>\n                <Grid verticalAlign='middle' columns={2} divided>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Checkbox toggle label='Only show tracked token' checked={this.props.showOnlyTracked} onChange={this.handleShowOnlyTrackedChange} />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                            <TokenListFilterContainer target={'tokenlist'}/>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Dropdown icon={'setting'}>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item text='Reload token list' onClick={this.handleLoadTokens} />\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Divider/>\n                <SelectableTokenList\n                    tokenList={this.props.tokenIds}\n                />\n                {pager}\n            </React.Fragment>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    const listState = state.tokens.listState.listState\n    const itemsPerPage = 20\n    let totalPages = 1\n    const activePage = state.tokens.listState.activePage\n    const filterIsActive = state.tokens.listState.filterIsActive\n    let tokenIds = filterIsActive ? state.tokens.listState.matchedTokenIds : state.tokens.allIds\n    const showOnlyTracked = state.tokens.listState.showOnlyTracked\n    const numVisibleTokens = tokenIds.length\n    if (numVisibleTokens) {\n        totalPages = Math.ceil(numVisibleTokens / itemsPerPage)\n    }\n    const sliceStart = (activePage-1)*itemsPerPage\n    tokenIds = tokenIds.slice(sliceStart, sliceStart+itemsPerPage)\n    return {\n        tokenIds,\n        showOnlyTracked,\n        activePage,\n        totalPages,\n        listState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setShowTracked: (showOnlyTracked) => {\n        dispatch(setFilterProps({showOnlyTracked}))\n    },\n    setTokenListPage: (activePage) => {\n        dispatch(changeTokenListPage(activePage))\n    },\n    clearTokenList: () => {\n        dispatch(clearTokenList())\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenListContainer)\n","import React from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport SelectableTokenListContainer from \"../token/SelectableTokenListContainer\"\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst TokenContracts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Token Contracts'}/>\n            <Message info icon>\n                <Icon name={'info'}/>\n                <Message.Header>Select which tokens to track</Message.Header>\n                <Message.Content>\n                    In the list below, check the tokens you want to keep track of. Use the filter to\n                    quickly find specific tokens. You can filter by token name, symbol or contract address.\n                </Message.Content>\n            </Message>\n            <SelectableTokenListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default TokenContracts\n","import React, {Component} from 'react'\nimport {Container, Dropdown, Form, Grid} from 'semantic-ui-react'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport {connect} from 'react-redux'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventFilterContainer extends Component {\n\n    render() {\n        const {\n            tokenOptions, selectedTokenId, onTokenSelect,\n            addressOptions, selectedAddressId, onAddressSelect,\n        } = this.props\n\n        return (\n            <Container>\n\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>Show Transfers of token:</label>\n                                <Dropdown fluid search selection\n                                          options={tokenOptions}\n                                          onChange={onTokenSelect}\n                                          value={selectedTokenId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>To/From Account:</label>\n                                <Dropdown fluid search selection\n                                          options={addressOptions}\n                                          onChange={onAddressSelect}\n                                          value={selectedAddressId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Container>\n        )\n    }\n}\n\nEventFilterContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventFilterContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n\n    const selectedTokenId = state.tokens.selector.selectedTokenId\n    const tokenOptions = state.tokens.trackedIds.map(id => (\n        {\n            key: id,\n            value: id,\n            text: state.tokens.byId[id].name + \" (\" + state.tokens.byId[id].symbol + \")\"\n        }\n    ))\n    tokenOptions.sort((a, b) => (a.text > b.text))\n\n    const selectedAddressId = state.addresses.selector.selectedAddressId\n    const addressOptions = state.addresses.allIds.map(id =>\n        ({\n            key: id,\n            value: id,\n            text: state.addresses.byId[id].ensName ? state.addresses.byId[id].ensName : id\n        })\n    )\n    addressOptions.sort((a, b) => (a.text > b.text))\n\n    return {\n        tokenOptions,\n        selectedTokenId,\n        addressOptions,\n        selectedAddressId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTokenSelect: (e, {value}) => {\n            dispatch(changeSelectorTokenIdThunk(value))\n        },\n        onAddressSelect: (e, {value}) => {\n            dispatch(changeSelectorAddressId(value))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFilterContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, } from 'semantic-ui-react'\n\nconst EventLoader = (props) => {\n    const {loading, loadingFromBlock, loadingToBlock, resultCount, resultFromBlock, currentChunk, maxChunks,\n        resultToBlock, onLoadMore, canLoadMore} = props\n\n    let button = <Button icon disabled={!canLoadMore} onClick={onLoadMore} labelPosition={'left'}><Icon name={'search'}/>Load more</Button>\n\n    if (loading) {\n        button = <Message warning icon>\n                    <Icon loading name={'circle notched'}/>\n            <Message.Content>\n                <Message.Header>Loading events</Message.Header>\n                Scanning {loadingFromBlock} - {loadingToBlock} - Chunk {currentChunk}/{maxChunks}\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Grid verticalAlign='middle' columns={2}>\n            <Grid.Row>\n                <Grid.Column >\n                    <Message info icon>\n                        <Icon name={'exchange'}/>\n                        <Message.Content>\n                            <Message.Header>Showing {resultCount} transfer events</Message.Header>\n                             Block {resultFromBlock} to {resultToBlock}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n                <Grid.Column>\n                    {button}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nEventLoader.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loadingFromBlock: PropTypes.number,\n    loadingToBlock: PropTypes.number,\n    loadingCurrentBlock: PropTypes.number,\n    resultCount: PropTypes.number.isRequired,\n    resultFromBlock: PropTypes.number.isRequired,\n    resultFromBlockDate: PropTypes.string.isRequired,\n    resultToBlock: PropTypes.number.isRequired,\n    onLoadMore: PropTypes.func.isRequired,\n    currentChunk: PropTypes.number.isRequired,\n    maxChunks: PropTypes.number.isRequired,\n    canLoadMore: PropTypes.bool.isRequired,\n}\n\nEventLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default EventLoader\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport EventLoader from './EventLoader'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport {loadTokenTransferEvents} from '../token/tokenActions'\n\n\nclass EventLoaderContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.loadMoreEvents = this.loadMoreEvents.bind(this)\n    }\n\n    componentDidMount() {\n        EventLoaderContainer.checkEventsLoaded(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventLoaderContainer.checkEventsLoaded(newProps)\n    }\n\n    static checkEventsLoaded(props) {\n        if (props.currentBlock && props.aceId && (props.hasAceEntry === false)) {\n            // I have an aceID, but no according entry. Better start loading...\n            //const rangeEnd = props.currentBlock\n            //const rangeStart = rangeEnd - 10000\n            console.log(\"Loading events \"/* + rangeStart + \"-\" + rangeEnd*/)\n            props.loadTokenTransferEvents(\n                0,\n                0,\n                props.tokenId,\n                props.addressId\n            )\n        }\n    }\n\n    loadMoreEvents() {\n        // query the previous 1000 blocks for token transfers to/from my addresses\n        const rangeEnd = this.props.resultFromBlock ? this.props.resultFromBlock : this.props.currentBlock\n        const rangeStart = rangeEnd - 10000\n        console.log(\"Loading events \" + rangeStart + \"-\" + rangeEnd)\n        this.props.loadTokenTransferEvents(\n            rangeStart,\n            rangeEnd,\n            this.props.tokenId,\n            this.props.addressId\n        )\n    }\n\n    render() {\n        const {\n            loading, resultCount, resultFromBlock, resultFromBlockDate, resultToBlock, canLoadMore,\n            loadingFromBlock, loadingToBlock, loadingCurrentBlock, currentChunk, maxChunks } = this.props\n        return (\n            <EventLoader\n                loading={loading}\n                resultCount={resultCount}\n                resultFromBlock={resultFromBlock}\n                resultFromBlockDate={resultFromBlockDate}\n                resultToBlock={resultToBlock}\n                onLoadMore={this.loadMoreEvents}\n                loadingFromBlock={loadingFromBlock}\n                loadingToBlock={loadingToBlock}\n                loadingCurrentBlock={loadingCurrentBlock}\n                currentChunk={currentChunk}\n                maxChunks={maxChunks}\n                canLoadMore={canLoadMore}\n            />\n        )\n    }\n}\n\nEventLoaderContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventLoaderContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    let resultCount = 0\n    let loading = false\n    let resultFromBlock = 0\n    let resultToBlock = 0\n    let resultFromBlockDate = 'XXX'\n    let aceId = undefined\n    let aceEntry = undefined\n    let loadingFromBlock = 0\n    let loadingToBlock = 0\n    let loadingCurrentBlock = 0\n    let tokenId = state.tokens.selector.selectedTokenId\n    // make sure selected token is actually existing and being tracked. Might be an old token from\n    // browser localstorage or from another network\n    if ((state.tokens.allIds.indexOf(tokenId) === -1) || (state.tokens.trackedIds.indexOf(tokenId) ===-1))\n    {\n        tokenId = undefined\n    }\n    const addressId = state.addresses.selector.selectedAddressId\n    const currentBlock = state.web3Instance.block.number\n    const currentChunk = state.events.listState.currentChunk\n    const maxChunks = state.events.listState.maxChunks\n    const canLoadMore = Boolean(tokenId && addressId)\n    if (tokenId && addressId) {\n        aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n        if (aceEntry) {\n            // okay, entry existing. Now look at checked block range\n            resultFromBlock = aceEntry.firstBlock\n            resultToBlock = aceEntry.lastBlock\n            resultCount = aceEntry.eventIds.length\n            // is aceEntry currently being loaded?\n            loading = aceEntry.isLoading\n            loadingFromBlock = aceEntry.loadingFromBlock\n            loadingToBlock = aceEntry.loadingToBlock\n            loadingCurrentBlock = aceEntry.loadingCurrentBlock\n        }\n    }\n\n    return {\n        loading,\n        resultCount,\n        resultFromBlock,\n        resultFromBlockDate,\n        resultToBlock,\n        currentBlock,\n        tokenId,\n        addressId,\n        aceId,\n        hasAceEntry: Boolean(aceEntry),\n        loadingToBlock,\n        loadingFromBlock,\n        loadingCurrentBlock,\n        currentChunk,\n        maxChunks,\n        canLoadMore\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenTransferEvents: (firstBlock, lastBlock, tokenId, addressId) => {\n        dispatch(loadTokenTransferEvents(tokenId, firstBlock, lastBlock, [addressId]))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventLoaderContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\nconst TxHashDisplay = (props) => {\n    const {txHash} = props\n    const shortHash = txHash.slice(0, 10).concat('...')\n    const trigger = <span>{shortHash}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={txHash}\n        />\n    )\n}\n\nTxHashDisplay.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    txHash: PropTypes.string.isRequired\n}\n\n\nexport default TxHashDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Table} from 'semantic-ui-react'\nimport TxHashDisplay from '../common/TxHashDisplay'\nimport AddressDisplay from '../common/AddressDisplay'\n\nexport const TRANSFER_EVENT_TYPES = {\n    NEUTRAL: 'neutral',\n    POSITIVE: 'postivie',\n    NEGATIVE: 'negative'\n}\n\nconst TransferEvent = (props) => {\n    const {txHash, blockNumber, from, fromENS, to, toENS, type} = props\n    const quantity = props.quantity.toFixed(6)\n    let icon = null\n    let positive = false\n    let negative = false\n    switch(type) {\n        case TRANSFER_EVENT_TYPES.POSITIVE:\n            icon = <Icon name='plus' color='green' circular/>\n            positive = true\n            break\n        case TRANSFER_EVENT_TYPES.NEGATIVE:\n            icon = <Icon name='minus' color='red' circular/>\n            negative = true\n            break\n        case TRANSFER_EVENT_TYPES.NEUTRAL:\n        default:\n            // no icon, neither positive nor negative hint\n    }\n\n    return (\n        <React.Fragment>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>#: </Table.Cell>\n                <Table.Cell><strong>{blockNumber}</strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>From: </Table.Cell>\n                <Table.Cell><AddressDisplay address={from} ensName={fromENS}/></Table.Cell>\n                <Table.Cell rowSpan='2' textAlign={'right'}>{icon}</Table.Cell>\n                <Table.Cell rowSpan='2' positive={positive} negative={negative} textAlign={'right'}>{quantity}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>Tx: </Table.Cell>\n                <Table.Cell><strong><TxHashDisplay txHash={txHash}/></strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>To: </Table.Cell>\n                <Table.Cell><AddressDisplay address={to} ensName={toENS}/></Table.Cell>\n            </Table.Row>\n        </React.Fragment>\n    )\n}\n\nTransferEvent.propTypes = {\n    txHash: PropTypes.string.isRequired,\n    blockNumber: PropTypes.number.isRequired,\n    from: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    fromENS: PropTypes.string,\n    toENS: PropTypes.string,\n    type: PropTypes.oneOf([\n        TRANSFER_EVENT_TYPES.NEUTRAL,\n        TRANSFER_EVENT_TYPES.POSITIVE,\n        TRANSFER_EVENT_TYPES.NEGATIVE\n    ]).isRequired,\n    quantity: PropTypes.object.isRequired, // BigNum\n}\n\nTransferEvent.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEvent\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport TransferEvent, {TRANSFER_EVENT_TYPES} from './TransferEvent'\n\nclass TransferEventContainer extends PureComponent {\n    render() {\n        const {txHash, blockNumber, from, to, type, quantity, positive, negative} = this.props\n        return (\n            <TransferEvent blockNumber={blockNumber}\n                           from={from}\n                           to={to}\n                           quantity={quantity}\n                           txHash={txHash}\n                           type={type}\n                           positive={positive}\n                           negative={negative}\n            />\n        )\n    }\n}\n\nTransferEventContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventId: PropTypes.string.isRequired,\n}\n\nTransferEventContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const transferEvent = state.events.byId[ownProps.transferEventId]\n    const addressId = state.addresses.selector.selectedAddressId\n    const rawEvent = transferEvent.transferEvent\n    const token = state.tokens.byId[transferEvent.tokenId]\n    const quantity = rawEvent.args._value.dividedBy(token.decimals)\n    const from = rawEvent.args._from\n    const to = rawEvent.args._to\n    // events that are not to/from one of the watched accounts are neutral\n    let type = TRANSFER_EVENT_TYPES.NEUTRAL\n    if (addressId) {\n        // check if transfer is to/from own address\n        type = addressId.toLowerCase() === from ? TRANSFER_EVENT_TYPES.NEGATIVE : TRANSFER_EVENT_TYPES.POSITIVE\n    }\n    return {\n        txHash: rawEvent.transactionHash,\n        blockNumber: rawEvent.blockNumber,\n        from,\n        to,\n        type,\n        quantity,\n    }\n}\n\nexport default connect(mapStateToProps)(TransferEventContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table} from 'semantic-ui-react'\nimport TransferEventContainer from './TransferEventContainer'\n\nconst TransferEventsList = (props) => {\n    return (\n        <Table compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>Block#/TransactionHash</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>From/To</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'right'}>Quantity</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {props.transferEventIds.map(transferEventId =>\n                    <TransferEventContainer key={transferEventId}\n                                            transferEventId={transferEventId}\n                    />\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n\nTransferEventsList.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventIds: PropTypes.array.isRequired,\n}\n\nTransferEventsList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEventsList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport TransferEventsList from './TransferEventsList'\nimport {Container, Pagination} from 'semantic-ui-react'\nimport {changeTransferEventListPage} from './eventActions'\n\nclass TransferEventsListContainer extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTransferEventListPage(activePage)\n    }\n\n    render() {\n        const {aceEventIds, totalPages, activePage} = this.props\n\n        let pager = null\n        if (totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                <Pagination activePage={activePage}\n                            onPageChange={this.handlePaginationChange}\n                            totalPages={totalPages}/>\n            </Container>\n        }\n\n        return (\n            <React.Fragment>\n                <TransferEventsList transferEventIds={aceEventIds}/>\n                {pager}\n            </React.Fragment>\n        )\n    }\n}\n\nTransferEventsListContainer.propTypes = {\n    token: PropTypes.object\n}\n\nTransferEventsListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    const tokenId = state.tokens.selector.selectedTokenId\n    const addressId = state.addresses.selector.selectedAddressId\n    const activePage = state.events.listState.activePage\n\n    const itemsPerPage = 15\n    let totalPages = 1\n    let aceEntry = undefined\n    let aceEventIds = []\n\n    // first try to get aceEntry\n    if (tokenId && addressId) {\n        const aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n    }\n\n    // if there is an aceEntry get actual events and prepare paginator\n    if (aceEntry) {\n        aceEventIds = aceEntry.eventIds\n        totalPages = Math.ceil(aceEventIds.length / itemsPerPage)\n        const sliceStart = (activePage-1)*itemsPerPage\n        aceEventIds = aceEventIds.slice(sliceStart, sliceStart+itemsPerPage)\n    }\n\n    return {\n        aceEventIds,\n        activePage,\n        totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setTransferEventListPage: (activePage) => {\n        dispatch(changeTransferEventListPage(activePage))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferEventsListContainer)\n","import React from 'react'\nimport EventFilterContainer from '../event/EventFilterContainer'\nimport EventLoaderContainer from '../event/EventLoaderContainer'\nimport TransferEventsListContainer from '../event/TransferEventsListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Events = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Transfer Events'}/>\n            <EventFilterContainer/>\n            <EventLoaderContainer/>\n            <TransferEventsListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default Events\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport Events from './Events'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventsContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        EventsContainer.mapRouteParamsToState(props)\n    }\n\n    /* If route params contain tokenId and/or address trigger according actions to have them in store */\n    static mapRouteParamsToState(props) {\n        if (props.match.params.tokenId) {\n            props.setSelectedToken(props.match.params.tokenId)\n            if (props.match.params.address) {\n                props.setSelectedAddress(props.match.params.address)\n            } else {\n                // if a token is provided, but no address -> make sure to display events of all watched addresses\n                props.setSelectedAddress(undefined)\n            }\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventsContainer.mapRouteParamsToState(newProps)\n    }\n\n    render() {\n        return <Events/>\n    }\n}\n\nEventsContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventsContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedToken: (tokenId) => {\n        dispatch(changeSelectorTokenIdThunk(tokenId))\n    },\n    setSelectedAddress: (address) => {\n        dispatch(changeSelectorAddressId(address))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Message} from 'semantic-ui-react'\n\nconst NetworkWarning = (props) => {\n    const {networkId, networkName} = props\n\n    return(\n        <Message size={'small'} icon warning>\n            <Icon name='warning' />\n            <Message.Content>\n                <Message.Header>\n                    You are not connected to mainnet!\n                </Message.Header>\n                Your current network: {networkName} (ID: {networkId})\n            </Message.Content>\n        </Message>\n    )\n}\n\nNetworkWarning.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired\n}\n\n\nexport default NetworkWarning\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport NetworkWarning from './NetworkWarning'\nimport Grid from 'semantic-ui-react/dist/es/collections/Grid/Grid'\n\nclass NetworkWarningController extends Component {\n    render() {\n        const {networkId, networkName} = this.props\n        if (networkId === 1) {\n            // mainnet. No need for a warning!\n            return null\n        }\n\n        return (\n            <Grid.Row>\n                <NetworkWarning networkId={networkId} networkName={networkName}/>\n            </Grid.Row>\n        )\n    }\n}\n\nNetworkWarningController.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => {\n    return {\n        networkId: state.web3Instance.id,\n        networkName: state.web3Instance.name,\n    }\n}\n\nexport default connect(mapStateToProps)(NetworkWarningController)\n","import React, {Component} from 'react'\nimport OverviewContainer from '../segments/OverviewContainer'\nimport Web3Container from '../web3/web3Container'\nimport {Grid} from 'semantic-ui-react'\nimport {Route, Switch} from 'react-router-dom'\nimport Sidebar from '../segments/Sidebar'\nimport Accounts from '../segments/Accounts'\nimport TokenContracts from '../segments/TokenContracts'\nimport EventsContainer from '../segments/EventsContainer'\nimport NetworkWarningController from '../web3/NetworkWarningController'\n\nclass LayoutContainer extends Component {\n    render() {\n        const NoMatch = ({ location }) => (\n            <div>\n                <h3>No match for <code>{location.pathname}</code></h3>\n            </div>\n        )\n\n        return (\n            <Grid padded={'vertically'}>\n                <NetworkWarningController/>\n                <Grid.Row>\n                    <Grid.Column width={4} /*style={{ backgroundColor: 'rgb(27, 28, 29)' }}*/>\n                        <Sidebar/>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Switch>\n                            <Route exact path='/' component={OverviewContainer}/>\n                            <Route exact path='/overview/' component={OverviewContainer}/>\n                            <Route path='/accounts/' component={Accounts}/>\n                            <Route path='/events/:tokenId/:address' component={EventsContainer}/>\n                            <Route path='/events/:tokenId/' component={EventsContainer}/>\n                            <Route path='/events/' component={EventsContainer}/>\n                            <Route path='/tokenContracts/' component={TokenContracts}/>\n\n                            <Route component={NoMatch} />\n                        </Switch>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Web3Container/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default LayoutContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Icon, Modal} from 'semantic-ui-react'\n\nconst ModalLoader = (props) => {\n    const {content} = props\n    return (\n        <Modal open={true}>\n            <Header>\n                <Icon loading name={'spinner'}></Icon>\n                <Header.Content>\n                    {content}\n                </Header.Content>\n            </Header>\n        </Modal>\n    )\n}\n\nModalLoader.propTypes = {\n    content: PropTypes.string.isRequired\n}\n\nModalLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ModalLoader\n","import React, {Component, Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {loadTokenList, TOKEN_LIST_STATES} from './tokenActions'\nimport ModalLoader from '../common/ModalLoader'\n\nclass TokenLoaderGate extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.tokenListUrl = \"/tokens_1.json\"\n    }\n\n    componentDidMount() {\n        if (this.props.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(this.props)\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(newProps)\n        }\n    }\n\n    loadTokenList(props) {\n        if (props.networkId >=1 ) {\n            const url = \"/tokens_\" + props.networkId + \".json\"\n            props.loadTokenList(url)\n        }\n    }\n\n    render() {\n        if (this.props.listState === TOKEN_LIST_STATES.INITIALIZED)\n        {\n            // Load the dapp.\n            return Children.only(this.props.children)\n        }\n\n        return(\n            // Display a loading indicator.\n            <ModalLoader content={\"Loading token contracts\"}/>\n        )\n    }}\n\nTokenLoaderGate.propTypes = {\n    listState: PropTypes.string\n}\n\nconst mapStateToProps = (state) => ({\n    listState: state.tokens.listState.listState,\n    networkId: state.web3Instance.id,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenList: (url) => {\n        dispatch(loadTokenList(url))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenLoaderGate)\n","import React, {Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {WEB3_STATES} from './web3Actions'\nimport ModalLoader from '../common/ModalLoader'\nimport {Button, Icon, Modal} from 'semantic-ui-react'\n\nconst Web3Gate = (props) => {\n    const {state, onRetry, children} = props\n\n    switch (state) {\n        case WEB3_STATES.INITIALIZED: {\n            // Gateway passed, render actual content.\n            return Children.only(children)\n        }\n        case WEB3_STATES.ERROR:\n            return (\n                <Modal open={true}>\n                    <Modal.Header>\n                        <Icon name='exclamation'/> No web3 found\n                    </Modal.Header>\n                    <Modal.Content>\n                        <p>Failed to initialize web3. Please enable web3 in your browser, e.g by using the Metamask extension.</p>\n                        <p><Button onClick={onRetry}>Retry</Button></p>\n                    </Modal.Content>\n                </Modal>\n\n            )\n        case WEB3_STATES.LOADING:\n        default: {\n            return (\n                <ModalLoader content={'Waiting on web3 initialization'}/>\n            )\n        }\n    }\n}\n\nWeb3Gate.propTypes = {\n    state: PropTypes.string.isRequired,\n    onRetry: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n}\n\nexport default Web3Gate\n","import React, {Component} from 'react'\nimport {initialize, stopBlockFilter} from './web3Actions'\nimport {connect} from 'react-redux'\nimport Web3Gate from './web3Gate'\n\nclass Web3GateContainer extends Component {\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n    componentWillUnmount() {\n        // Stop listening to new block events\n        this.props.stopBlockFilter()\n    }\n\n    onRetry = () => {\n        this.props.initialize()\n    }\n\n    render() {\n        const {state, children} = this.props\n        return <Web3Gate state={state} onRetry={this.onRetry} children={children}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    state: state.web3Instance.state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialize: () => {\n        dispatch(initialize())\n    },\n    stopBlockFilter: () => {\n        dispatch(stopBlockFilter())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Web3GateContainer)\n","import {Component, Children} from 'react'\nimport {connect} from 'react-redux'\nimport {getLocalData, SELECTED_TOKEN_KEY, TRACKED_TOKEN_KEYS, WATCHED_ADDRESSES} from \"./localStorageWrapper\"\nimport {changeSelectorTokenId, changeTokenTracking, loadMultiTokenBalances} from \"../modules/token/tokenActions\"\nimport {addAddress, ADDRESS_TYPE_EXTERNAL} from \"../modules/address/addressActions\"\n\nclass LocalStorageGate extends Component {\n\n    componentDidMount() {\n        // Get tracked tokens from localstorage\n        const trackedTokens = getLocalData(TRACKED_TOKEN_KEYS, []);\n        trackedTokens.forEach((tokenId) => {\n            this.props.changeTokenTracking(tokenId)\n        })\n        // get selected token from localstorage\n        const selectedTokendId = getLocalData(SELECTED_TOKEN_KEY, null)\n        if (selectedTokendId) {\n            this.props.changeSelectorTokenId(selectedTokendId)\n        }\n        // Get addresses from localstorage\n        const watchedAddresses = getLocalData(WATCHED_ADDRESSES, [])\n        watchedAddresses.forEach((addressEntry) => {\n            this.props.addAddress(addressEntry.address, addressEntry.ensName)\n            // load balance for all tracked tokens\n            this.props.loadMultiTokenBalances(trackedTokens, addressEntry.address)\n        })\n    }\n\n    render() {\n        // Load the dapp.\n        return Children.only(this.props.children)\n    }\n}\n\nconst mapStateToProps = (state) => ({\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeTokenTracking: (tokenId) => {\n        dispatch(changeTokenTracking(tokenId, true))\n    },\n    changeSelectorTokenId: (tokenId) => {\n        dispatch(changeSelectorTokenId(tokenId))\n    },\n    addAddress: (address, ensName) => {\n        dispatch(addAddress(address, ensName, ADDRESS_TYPE_EXTERNAL))\n    },\n    loadMultiTokenBalances: (trackedTokens, address) => {\n        dispatch(loadMultiTokenBalances(trackedTokens, address))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalStorageGate)\n","import React, {Component} from 'react'\nimport {Provider} from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store'\nimport {Container} from 'semantic-ui-react'\nimport ModalRoot from './modules/modal/ModalRoot'\nimport LayoutContainer from './modules/layout/LayoutContainer'\nimport TokenLoaderGate from './modules/token/TokenLoaderGate'\nimport Web3GateContainer from './modules/web3/web3GateContainer'\nimport LocalStorageGate from \"./utils/LocalStorageGate\"\n\nlet {store} = configureStore()\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Web3GateContainer>\n                    <TokenLoaderGate>\n                        <LocalStorageGate>\n                            <BrowserRouter>\n                                <Container>\n                                    <ModalRoot/>\n                                    <LayoutContainer/>\n                                </Container>\n                            </BrowserRouter>\n                        </LocalStorageGate>\n                    </TokenLoaderGate>\n                </Web3GateContainer>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}