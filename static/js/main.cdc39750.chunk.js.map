{"version":3,"sources":["modules/balance/balanceActions.js","modules/event/reducers/addressContractEventsByIdReducer.js","modules/event/eventActions.js","utils/localStorageWrapper.js","modules/token/tokenActions.js","modules/token/reducers/ListStateReducer.js","modules/token/reducers/TokensByIdReducer.js","modules/token/reducers/AllIdsReducer.js","modules/token/reducers/volatileTokensByIdReducer.js","modules/token/reducers/TrackedIdsReducer.js","utils/getWeb3.js","modules/web3/web3Actions.js","modules/token/reducers/SelectorReducer.js","modules/token/reducers/tokenReducer.js","utils/reducerUtils.js","modules/web3/web3Reducer.js","modules/address/addressActions.js","modules/address/reducers/addressByIdReducer.js","modules/address/reducers/allAddressIdsReducer.js","modules/address/reducers/addressSelectorReducer.js","modules/address/reducers/addressReducer.js","modules/balance/reducer/balanceByIdReducer.js","modules/balance/reducer/allBalancesReducer.js","modules/balance/reducer/positiveBalancesReducer.js","modules/balance/reducer/BalanceListStateReducer.js","modules/balance/reducer/balanceReducer.js","modules/event/reducers/eventByIdReducer.js","modules/event/reducers/allEventIdsReducer.js","modules/event/reducers/listStateReducer.js","modules/event/reducers/eventReducer.js","modules/modal/modalActions.js","modules/modal/modalReducer.js","store.js","modules/modal/TestModal.js","modules/forms/transferForm/TransferForm.js","modules/forms/transferForm/TransferFormContainer.js","modules/modal/ModalRoot.js","modules/layout/ScreenHeader.js","modules/balance/Balance.js","modules/common/AddressDisplay.js","modules/balance/TokenBalanceItemDetail.js","modules/balance/TokenBalanceItemDetailContainer.js","modules/balance/TokenBalanceItem.js","modules/balance/TokenBalanceItemContainer.js","modules/balance/TokenBalancesList.js","modules/balance/AddressBalanceItemDetail.js","modules/balance/AddressBalanceItemDetailContainer.js","modules/balance/AddressBalanceItem.js","modules/balance/AddressBalanceItemContainer.js","modules/balance/AddressBalancesList.js","modules/segments/OverviewBodyContainer.js","modules/token/TokenListFilter.js","modules/token/TokenListFilterContainer.js","modules/segments/OverviewOptions.js","modules/segments/OverviewContainer.js","modules/web3/web3Info.js","modules/web3/web3Container.js","modules/segments/Sidebar.js","modules/address/AddressRow.js","modules/address/AddressContainer.js","modules/address/QueryAddressForm.js","modules/address/QueryAddressFormContainer.js","modules/address/AddressList.js","modules/address/AddressListContainer.js","modules/segments/Accounts.js","modules/token/SelectableToken.js","modules/token/SelectableTokenContainer.js","modules/token/SelectableTokenList.js","modules/token/SelectableTokenListContainer.js","modules/segments/TokenContracts.js","modules/event/EventFilterContainer.js","modules/event/EventLoader.js","modules/event/EventLoaderContainer.js","modules/common/TxHashDisplay.js","modules/event/TransferEvent.js","modules/event/TransferEventContainer.js","modules/event/TransferEventsList.js","modules/event/TransferEventsListContainer.js","modules/segments/Events.js","modules/segments/EventsContainer.js","modules/web3/NetworkWarning.js","modules/web3/NetworkWarningController.js","modules/layout/LayoutContainer.js","modules/common/ModalLoader.js","modules/token/TokenLoaderGate.js","modules/web3/web3Gate.js","modules/web3/web3GateContainer.js","utils/LocalStorageGate.js","App.js","registerServiceWorker.js","index.js","../node_modules/web3-eth-accounts/src sync"],"names":["BALANCE_STATES","VIRGIN","LOADING","INITIALIZED","SET_BALANCE","SET_BALANCE_STATE","CREATE_BALANCE_ENTRY","createBalanceEntry","balanceId","addressId","tokenId","type","payload","DELETE_BALANCE_ENTRY","deleteBalanceEntry","CHANGE_BALANCE_FILTER_PROPS","setBalanceFilterString","filterString","dispatch","getState","searchString","toLowerCase","balanceIds","balance","allIds","length","filter","balanceEntry","byId","token","tokens","name","includes","symbol","address","matchedBalanceIds","setBalanceByAddressAndToken","buildBalanceId","undefined","setBalance","balanceStateChanged","balanceState","setBalanceState","reloadBalance","loadTokenBalance","ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL","clearAceEntries","createAceEntry","state","action","acesId","buildAddressContractEventId","isLoading","firstBlock","lastBlock","eventIds","loadingFromBlock","loadingToBlock","loadingCurrentBlock","addTransferEvents","events","newState","forEach","transferEvent","transferEventId","buildEventId","args","_from","_to","aceFromId","aceId","console","warn","concat","aceEntriesLoadingChange","aceIds","aceEntry","aceEntriesBlockRangeChange","fromBlock","toBlock","Math","min","max","setAceEntryEventIds","ADD_EVENTS","CHANGE_TRANSFEREVENTLIST_PAGE","CREATE_ACE_ENTRY","ACE_ENTRIES_LOADING_CHANGE","addressIds","map","ACE_ENTRIES_BLOCK_RANGE_CHANGE","SET_ACE_ENTRY_EVENT_IDS","CHANGE_EVENT_SCAN_PROPS","aceEntriesLoadingChangeWrapper","a","aceById","addEventsThunk","aceIdsToSort","watchedAddressIds","addresses","push","aceToId","addEvents","eventsById","slice","sort","eventA","eventB","blockNumber","event","transactionHash","logIndex","TRACKED_TOKEN_KEYS","SELECTED_TOKEN_KEY","WATCHED_ADDRESSES","storeLocalData","key","data","localStorage","setItem","JSON","stringify","getLocalData","defaultValue","parse","getItem","e","ETH_TOKEN_MAGIC_ADDRESS","ETH_TOKEN_DUMMY","TOKEN_LIST_STATES","CHANGE_TOKEN_LIST_STATE","tokenListStateChanged","tokenListState","listState","ADD_TOKEN","addToken","tokenID","ADD_VOLATILE_TOKEN","IS_LOADING_TOKEN","loadingTokenChanged","SET_TOKEN_SUPPLY","IS_LOADING_SUPPLY","SET_TOKEN_CONTRACT_INSTANCE","setTokenContractInstance","contractInstance","SET_TOKEN_LOADING_PROMISE","changeSelectorTokenIdThunk","selectedTokenId","changeSelectorTokenId","selector","CHANGE_SELECTOR_TOKENID","CLEAR_TOKEN_LIST","clearTokenList","CHANGE_VALID_TOKEN_COUNT","CHANGE_FILTER_PROPS","RESET_DISPLAY_COUNT","CHANGE_TOKEN_TRACKING","changeTokenTracking","doTrack","CHANGE_TOKEN_LIST_PAGE","changeTokenListPage","activePage","changeTokenTrackingThunk","trackedIds","Object","values","clearTokenBalances","setFilterProps","filterProps","showOnlyTracked","oldFilterString","oldShowOnlyTracked","filterIsActive","tokenIds","matchedTokenIds","changeFilterProps","mapListToken","listToken","id","decimals","pow","description","website","imageUrl","supply","loading","instantiateTokenContract","loadingPromise","Promise","resolve","reject","web3","web3Instance","ERC20Contract","contract","abi","erc20ABI","setProvider","currentProvider","at","setTokenLoadingPromise","loadMultiTokenBalances","tokenIDs","eth","getBalancePromise","verifyContractInstance","volatileToken","volatileById","balanceOf","LISTSTATE_INITIAL","total","displayCount","resetDisplayCount","changeValidTokenCount","count","tokenListPageChanged","TOKENS_BY_ID_INITIAL","clearTokensById","addTokenEntry","setTokenSupply","loadingSupplyChanged","newEventIds","ALL_TOKENS_INITIAL","addTokenId","indexOf","clearAllTokens","VOLATILE_TOKENS_BY_ID_INITIAL","clearTokens","TRACKED_TOKENS_INITIAL","trackedIndex","getWeb3","window","addEventListener","ethereum","myWeb3","Web3","log","error","WEB3_STATES","UNINITIALIZED","ERROR","ETH_ENABLE_STATES","REJECTED","WAITING","GRANTED","SET_WEB3_STATE","setWeb3State","SET_ETH_ENABLE_STATE","setEthEnableState","ethEnableState","SET_WEB3INSTANCE","setWeb3Instance","SET_ENS","setENS","ens","SET_CURRENT_BLOCK","setCurrentBlock","block","SET_NETWORK","setNetwork","previousId","SET_NODE_VERSION","setNodeVersion","nodeVersion","SET_BLOCK_FILTER","setBlockFilter","blockFilter","stopBlockFilter","stopWatching","result","getNetworkName","networkId","network","SELECTOR_INITIAL","selctedTokenId","combineReducers","updateObject","oldObject","newValues","assign","WEB3_INITIAL","number","timestamp","ADDRESS_TYPE_EXTERNAL","ADDRESS_TYPE_OWNED","ADDRESS_BALANCES_STATES","CHANGE_ADDRESS_BALANCES_STATE","ADD_ADDRESS","addAddress","ensName","removeAddressThunk","REMOVE_ADDRESS","removeAddress","clearAddressBalances","addressesToStore","o","CHANGE_ADDRESS_TYPE","changeAddressType","newType","addNewAddress","CHANGE_SELECTOR_ADDRESSID","changeSelectorAddressId","selectedAddressId","ADDRESS_BY_ID_INITIAL","addAddressEntry","keys","balancesState","removeAddressEntry","addressEntry","changeAddressBalancesState","addressBalancesState","ALL_ADDRESSES_INITIAL","addAddressId","removeAddressId","entryId","BALANCE_BY_ID_INITIAL","clearAllBalances","BigNumber","ALL_BALANCES_INITIAL","index","splice","POSITIVE_BALANCES_INITIAL","clearPositiveBalances","isZero","entry","greaterThan","BALANCE_LISTSTATE_INITIAL","clearBalanceListState","changeBalanceFilterProps","positiveIds","EVENT_BY_ID_INITIAL","clearEvents","ALL_EVENTS_INITIAL","addEventIds","currentChunk","maxChunks","transferEventListPageChanged","resetPager","changeEventScanProps","props","SHOW_MODAL","HIDE_MODAL","MODAL_INITIAL","modalType","modalProps","showModal","hideModal","reducer","modal","logger","createLogger","diff","TestModal","closeModal","Modal","open","onClose","Header","Content","Description","defaultProps","TransferForm","onValidSubmit","fromAddress","tokenName","tokenSymbol","tokenBalance","etherBalance","gasCosts","errorLabel","Label","color","pointing","addValidationRule","value","isAddress","bnValue","toBigNumber","bnMax","lessThanOrEqualTo","err","size","closeIcon","noValidate","Segment","Grid","columns","Row","Column","width","List","Item","toFixed","Group","placeholder","required","instantValidation","validations","validationErrors","isEthereumAddress","isDefaultRequiredValue","label","labelPosition","isNumeric","isLessThanOrEqual","readOnly","Button","content","TransferFormContainer","context","formData","alert","amount","toAddressValid","amountValid","rateValid","this","Component","MODAL_COMPONENTS","connect","ownProps","tokenBalanceId","dividedBy","transferToken","ModalRoot","SpecificModal","ScreenHeader","title","as","inverted","textAlign","style","marginTop","Balance","numDecimals","trigger","Popup","dp","AddressDisplay","TokenBalanceItemDetail","url","Table","Cell","to","circular","icon","onClick","TokenBalanceItemDetailContainer","addressType","openTransferModal","TokenBalanceItem","expanded","tokenBalances","tokenEventsLinkOptions","toggleCollapse","eventLink","tableHeader","HeaderCell","Statistic","Value","tableBody","Body","compact","TokenBalanceItemContainer","bind","setState","_","reduce","sum","plus","pathname","TokenBalancesList","balancesByToken","AddressBalanceItemDetail","AddressBalanceItemDetailContainer","AddressBalanceItem","numTokens","AddressBalanceItemContainer","AddressBalancesList","balancesByAddress","OverviewBodyContainer","groupedBalances","showEmpty","hasAccounts","groupBy","Message","balanceEntries","groupedBalancesObject","entries","b","toUpperCase","addressA","addressB","stringA","stringB","TokenListFilter","handleChange","clearFilter","Icon","link","Input","onChange","fluid","TokenListFilterContainer","setFilterString","displayed","target","OverviewOptions","toggleShowEmpty","setGroupBy","verticalAlign","divided","Dropdown","inline","options","text","Checkbox","toggle","checked","OverviewContainer","Fragment","Divider","Web3Info","gitHub","srcUrl","href","rel","Web3Container","apiVersion","version","api","Sidebar","Menu","vertical","header","NavLink","AddressRow","iconName","popupContent","removeButton","handleRemove","collapsing","AddressContainer","PureComponent","progressTotal","progressCurrent","QueryAddressForm","handleSubmit","disabled","Form","onSubmit","addressStates","ADDRESS_RESOLVING","ADDRESS_VALID","ADDRESS_INVALID","QueryAddressFormContainer","input","addressState","validAddress","test","lookup","resolvedAddress","AddressList","ownTable","watchTable","ethEnable","waitingGrant","ownAddressIds","basic","selectable","primary","watchAddressIds","dividing","AddressListContainer","updateWeb3Accounts","requestEthEnable","checkAccountTimer","initAccounts","newProps","clearInterval","isMetaMask","setInterval","getAccounts","accounts","changeOwnAddresses","addressesById","newAccounts","account","existingAddress","enable","Accounts","SelectableToken","SelectableTokenContainer","tokenAddress","tokenTracked","tracked","SelectableTokenList","tokenList","celled","negative","items","SelectableTokenListContainer","handleShowOnlyTrackedChange","handlePaginationChange","handleLoadTokens","setShowTracked","setTokenListPage","pager","totalPages","Container","Pagination","onPageChange","numVisibleTokens","ceil","sliceStart","TokenContracts","info","EventFilterContainer","tokenOptions","onTokenSelect","addressOptions","onAddressSelect","Field","search","selection","EventLoader","resultCount","resultFromBlock","resultToBlock","onLoadMore","canLoadMore","button","warning","EventLoaderContainer","loadMoreEvents","checkEventsLoaded","rangeEnd","currentBlock","rangeStart","loadTokenTransferEvents","resultFromBlockDate","hasAceEntry","Boolean","chunkSize","maxEvents","numEvents","currentToBlock","currentFromBlock","transferEventsFrom","Transfer","transferEventsTo","eventPromises","get","all","loggedEvents","foundEvents","TxHashDisplay","txHash","shortHash","TRANSFER_EVENT_TYPES","TransferEvent","from","fromENS","toENS","quantity","positive","rowSpan","TransferEventContainer","rawEvent","_value","TransferEventsList","colSpan","transferEventIds","TransferEventsListContainer","setTransferEventListPage","aceEventIds","changeTransferEventListPage","Events","EventsContainer","mapRouteParamsToState","match","params","setSelectedToken","setSelectedAddress","NetworkWarning","networkName","NetworkWarningController","LayoutContainer","padded","exact","path","component","location","ModalLoader","TokenLoaderGate","tokenListUrl","loadTokenList","Children","only","children","fetch","response","json","jsonTokens","allTokenIds","existingTrackedTokens","Web3Gate","onRetry","Web3GateContainer","initialize","getNodePromise","getNetworkPromise","networkIdString","networkID","parseInt","Ens","provider","getBlockPromise","watch","blockHash","oldNetworkId","LocalStorageGate","trackedTokens","selectedTokendId","store","createStore","compose","applyMiddleware","thunk","App","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","webpackEmptyContext","req","Error","code","module","exports"],"mappings":"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","file":"static/js/main.cdc39750.chunk.js","sourcesContent":["import {loadTokenBalance} from '../token/tokenActions'\n\nexport const BALANCE_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const SET_BALANCE = 'SET_BALANCE'\nexport function setBalance(balanceId, balance) {\n    return {\n        type: SET_BALANCE,\n        payload: {\n            balanceId,\n            balance,\n        }\n    }\n}\n\nexport const SET_BALANCE_STATE = 'SET_BALANCE_STATE'\nexport function setBalanceState(balanceId, balanceState) {\n    return {\n        type: SET_BALANCE_STATE,\n        payload: {\n            balanceId,\n            balanceState,\n        }\n    }\n}\n\nexport const CREATE_BALANCE_ENTRY = 'CREATE_BALANCE_ENTRY'\nexport function createBalanceEntry(balanceId, addressId, tokenId) {\n    return {\n        type: CREATE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const DELETE_BALANCE_ENTRY = 'DELETE_BALANCE_ENTRY'\nexport function deleteBalanceEntry(balanceId) {\n    return {\n        type: DELETE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n        }\n    }\n}\n\nexport const CHANGE_BALANCE_FILTER_PROPS = 'CHANGE_BALANCE_FILTER_PROPS'\nexport function changeBalanceFilterProps(filter, matchedBalanceIds) {\n    return {\n        type: CHANGE_BALANCE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedBalanceIds\n        }\n    }\n}\n\nexport function setBalanceFilterString(filterString) {\n    return (dispatch, getState) => {\n        // Filter balance list based on filterstring.\n        const searchString = filterString.toLowerCase()\n\n        // Default: Show all balances\n        let balanceIds = getState().balance.allIds\n\n        // If a searchstring is provided, filter balanceIds\n        if (searchString.length) {\n            balanceIds = balanceIds.filter(balanceId => {\n                const balanceEntry = getState().balance.byId[balanceId]\n                const token = getState().tokens.byId[balanceEntry.tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n        dispatch(changeBalanceFilterProps(searchString, balanceIds))\n    }\n}\n\n\nexport function setBalanceByAddressAndToken(addressId, tokenId, balance) {\n    return(dispatch, getState) => {\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set balance\n        dispatch(setBalance(balanceId, balance))\n    }\n}\n\nexport function balanceStateChanged(tokenId, addressId, balanceState) {\n    return(dispatch, getState) => {\n        // obtain balanceID\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set loading state\n        dispatch(setBalanceState(balanceId, balanceState))\n    }\n}\n\nexport function reloadBalance(balanceId) {\n    return (dispatch, getState) => {\n        const balance = getState().balance.byId[balanceId]\n        dispatch(loadTokenBalance(balance.tokenId, balance.addressId))\n    }\n}\n\nexport function clearTokenBalances(tokenId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.tokenId === tokenId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function clearAddressBalances(addressId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.addressId === addressId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function buildBalanceId(addressId, tokenId) {\n    return (addressId + '-' + tokenId)\n}\n","import {\n    ACE_ENTRIES_BLOCK_RANGE_CHANGE, ACE_ENTRIES_LOADING_CHANGE, ADD_EVENTS, buildEventId,\n    CREATE_ACE_ENTRY, SET_ACE_ENTRY_EVENT_IDS\n} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\n/*\nPurpose: Store list of transfer events involving certain address\nand certain token contract.\nKeeps track of the block range already queried from web3 (firstBlock, lastBlock),\nso i can easily extend checked block range or refresh if outdated.\n */\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {\n    0xabc123-12: {\n        acesId: '0xabc123-12',    // <addressId>-<tokenId>\n        addressId: '0xabc123',\n        tokenId: 12\n        loading: false,\n        firstBlock: 0,\n        lastBlock: 0,\n        loadingFromBlock: 0,\n        loadingToBlock: 0,\n        loadingCurrentBlock: 0,\n        eventIds: [],\n    },\n}\n*/\n\nfunction clearAceEntries() {\n    return ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL\n}\n\nfunction createAceEntry(state, action) {\n    const {payload} = action\n    const {addressId, tokenId} = payload\n    const acesId = buildAddressContractEventId(addressId, tokenId)\n    return {\n        ...state,\n        [acesId] : {\n            acesId,\n            addressId,\n            tokenId,\n            isLoading: false,\n            firstBlock: 0,\n            lastBlock: 0,\n            eventIds: [],\n            loadingFromBlock: 0,\n            loadingToBlock: 0,\n            loadingCurrentBlock: 0,\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new events to the address, if it is \"to\" or \"from\"\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    const newState = {...state}\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        const {_from, _to} = transferEvent.args\n        const aceFromId = buildAddressContractEventId(_from, tokenId)\n        const aceToId = buildAddressContractEventId(_to, tokenId)\n        const aceIds = [aceToId, aceFromId]\n        aceIds.forEach(aceId => {\n            // only add event if an according aceEntry is existing!\n            if (newState[aceId]) {\n                // prevent duplicate eventID entries\n                    if (newState[aceId].eventIds.includes(transferEventId)) {\n                        console.warn(\"Ignoring duplicate event \" + transferEventId)\n                        return\n                    }\n                newState[aceId].eventIds = newState[aceId].eventIds.concat(transferEventId)\n            }\n        })\n    })\n    return newState\n}\n\nfunction aceEntriesLoadingChange(state, action) {\n    const {payload} = action\n    const {aceIds, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            newState[aceId] = {\n                ...aceEntry,\n                isLoading,\n                loadingFromBlock,\n                loadingToBlock,\n                loadingCurrentBlock,\n            }\n        }\n    })\n    return newState\n}\n\nfunction aceEntriesBlockRangeChange(state, action) {\n    const {payload} = action\n    const {aceIds, fromBlock, toBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            // update checked block range\n            if (aceEntry.firstBlock === 0) {\n                aceEntry.firstBlock = fromBlock\n            } else {\n                aceEntry.firstBlock = Math.min(fromBlock, aceEntry.firstBlock)\n            }\n            if (aceEntry.lastBlock === 0) {\n                aceEntry.lastBlock = toBlock\n            } else {\n                aceEntry.lastBlock = Math.max(toBlock, aceEntry.lastBlock)\n            }\n            newState[aceId] = aceEntry\n        }\n    })\n    return newState\n}\n\nfunction setAceEntryEventIds(state, action) {\n    const {payload} = action\n    const {aceId, eventIds} = payload\n\n    return {\n        ...state,\n        [aceId]: {\n            ...state[aceId],\n            eventIds\n        }\n    }\n}\n\nexport const addressContractEventsByIdReducer = (state=ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_ACE_ENTRY:\n            return createAceEntry(state, action)\n        case ADD_EVENTS:\n            return addTransferEvents(state, action)\n        case ACE_ENTRIES_LOADING_CHANGE:\n            return aceEntriesLoadingChange(state, action)\n        case ACE_ENTRIES_BLOCK_RANGE_CHANGE:\n            return aceEntriesBlockRangeChange(state, action)\n        case SET_ACE_ENTRY_EVENT_IDS:\n            return setAceEntryEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearAceEntries()\n        default:\n    }\n    return state;\n}\n\n\nexport function buildAddressContractEventId(addressId, tokenId) {\n    return ''+addressId.toLowerCase()+'-'+tokenId\n}\n","import {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\n\nexport const ADD_EVENTS = 'ADD_EVENTS'\nexport function addEvents(events, tokenId) {\n    return {\n        type: ADD_EVENTS,\n        payload: {\n            events,\n            tokenId,\n        }\n    }\n}\n\nexport const CHANGE_TRANSFEREVENTLIST_PAGE = 'CHANGE_TRANSFEREVENTLIST_PAGE'\nexport function changeTransferEventListPage(activePage) {\n    return {\n        type: CHANGE_TRANSFEREVENTLIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\n\nexport const CREATE_ACE_ENTRY = 'CREATE_ACE_ENTRY'\nexport function createAceEntry(addressId, tokenId) {\n    return {\n        type: CREATE_ACE_ENTRY,\n        payload: {\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const ACE_ENTRIES_LOADING_CHANGE = 'ACE_ENTRIES_LOADING_CHANGE'\nexport function aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_LOADING_CHANGE,\n        payload: {\n            aceIds,\n            isLoading,\n            loadingFromBlock,\n            loadingToBlock,\n            loadingCurrentBlock,\n        }\n    }\n}\n\nexport const ACE_ENTRIES_BLOCK_RANGE_CHANGE = 'ACE_ENTRIES_BLOCK_RANGE_CHANGE'\nexport function aceEntriesBlockRangeChange(addressIds, tokenId, fromBlock, toBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_BLOCK_RANGE_CHANGE,\n        payload: {\n            aceIds,\n            fromBlock,\n            toBlock,\n        }\n    }\n}\n\nexport const SET_ACE_ENTRY_EVENT_IDS = 'SET_ACE_ENTRY_EVENT_IDS'\nexport function setAceEntryEventIds(aceId, eventIds) {\n    return {\n        type: SET_ACE_ENTRY_EVENT_IDS,\n        payload: {\n            aceId,\n            eventIds\n        }\n    }\n}\n\nexport const CHANGE_EVENT_SCAN_PROPS = 'CHANGE_EVENT_SCAN_PROPS'\nexport function changeEventScanProps(props) {\n    return {\n        type: CHANGE_EVENT_SCAN_PROPS,\n        payload: {\n            props,\n        }\n    }\n}\n\nexport function aceEntriesLoadingChangeWrapper(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    return async (dispatch, getState) => {\n        addressIds.forEach(addressId => {\n            const aceId = buildAddressContractEventId(addressId, tokenId)\n            if (getState().events.aceById[aceId] === undefined) {\n                // create a new entry for this token and address\n                dispatch(createAceEntry(addressId, tokenId))\n            }\n        })\n        dispatch(aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock))\n    }\n}\n\nexport function addEventsThunk(events, tokenId, fromBlock, toBlock) {\n    return (dispatch, getState) => {\n        // Make sure that there are AddressContractEvent entries\n        // for all events and to/from addresses\n        let aceIdsToSort = []\n        const watchedAddressIds = getState().addresses.allIds\n        events.forEach(transferEvent => {\n            const {_from, _to} = transferEvent.args\n            // TODO: Collect all new entries and just dispatch one batch event\n            if (watchedAddressIds.includes(_from.toLowerCase())) {\n                const aceFromId = buildAddressContractEventId(_from, tokenId)\n                aceIdsToSort.push(aceFromId)\n                if (getState().events.aceById[aceFromId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_from, tokenId))\n                }\n            }\n            if (watchedAddressIds.includes(_to.toLowerCase())) {\n                const aceToId = buildAddressContractEventId(_to, tokenId)\n                aceIdsToSort.push(aceToId)\n                if (getState().events.aceById[aceToId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_to, tokenId))\n                }\n            }\n        })\n        // now it's safe to do the actual dispatch of addEvents\n        dispatch(addEvents(events, tokenId, fromBlock, toBlock))\n        // finally re-sort eventIds of all changed aceIds\n        dispatch(sortEventsThunk(aceIdsToSort))\n    }\n}\n\nexport function sortEventsThunk(aceIds) {\n    return (dispatch, getState) => {\n        const eventsById = getState().events.byId\n        // sort eventIds of provided ace entries based on the blockheight they appeared at\n        aceIds.forEach(aceId => {\n            // sort eventIds based on blockheight\n            // use .slice() to work on a copy of the eventIds array, otherwise i would mutate current state...\n            let eventIds = getState().events.aceById[aceId].eventIds.slice().sort((eventA, eventB) => {\n                return eventsById[eventB].transferEvent.blockNumber - eventsById[eventA].transferEvent.blockNumber\n            })\n            // set new eventIds array via dedicated action\n            dispatch(setAceEntryEventIds(aceId, eventIds))\n        })\n    }\n}\n\nexport function buildEventId(event) {\n    return '' + event.transactionHash + '-' + event.logIndex\n}\n","\nexport const TRACKED_TOKEN_KEYS = 'TRACKED_TOKEN_KEYS'\nexport const SELECTED_TOKEN_KEY = 'SELECTED_TOKEN_KEY'\nexport const WATCHED_ADDRESSES = 'WATCHED_ADDRESSES'\n\nexport function storeLocalData(key, data) {\n    // console.log(\"Storing \" + key + \" -> \" + data)\n    localStorage.setItem(key, JSON.stringify(data))\n}\n\nexport function getLocalData(key, defaultValue) {\n    try {\n        let data = JSON.parse(localStorage.getItem(key))\n        if (data) {\n            // console.log(\"Loaded data for key \" + key + \": \" + data)\n            return data\n        }\n    }\n    catch (e) {\n        // console.log(\"Exception \" + e + \" looking for \" + key)\n    }\n    // console.log(\"No data found for key \" + key)\n    return defaultValue\n}\n","import contract from '@truffle/contract'\r\nimport erc20ABI from 'human-standard-token-abi'\r\nimport {\r\n    BALANCE_STATES,\r\n    balanceStateChanged,\r\n    clearTokenBalances,\r\n    setBalanceByAddressAndToken\r\n} from '../balance/balanceActions'\r\nimport {\r\n    aceEntriesBlockRangeChange, aceEntriesLoadingChange, aceEntriesLoadingChangeWrapper,\r\n    addEventsThunk, changeEventScanProps\r\n} from '../event/eventActions'\r\nimport {\r\n    storeLocalData,\r\n    SELECTED_TOKEN_KEY,\r\n    TRACKED_TOKEN_KEYS,\r\n} from \"../../utils/localStorageWrapper\"\r\n\r\nexport const ETH_TOKEN_MAGIC_ADDRESS = \"0x1000000000000000000000000000000000000001\"\r\nexport const ETH_TOKEN_DUMMY = {\r\n    \"name\": \"Ethereum\",\r\n    \"symbol\": \"ETH\",\r\n    \"address\": ETH_TOKEN_MAGIC_ADDRESS,\r\n    \"decimals\": 18\r\n}\r\n\r\nexport const TOKEN_LIST_STATES = {\r\n    VIRGIN: 'virgin',\r\n    LOADING: 'loading',\r\n    INITIALIZED: 'initialized'\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_STATE = 'IS_LOADING_TOKEN_LIST'\r\nexport function tokenListStateChanged(tokenListState) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_STATE,\r\n        payload: {\r\n            listState: tokenListState\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_TOKEN = 'ADD_TOKEN'\r\nexport function addToken(tokenID, token) {\r\n    return {\r\n        type: ADD_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            token\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_VOLATILE_TOKEN = 'ADD_VOLATILE_TOKEN'\r\nexport function addVolatileToken(tokenID) {\r\n    return {\r\n        type: ADD_VOLATILE_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_TOKEN = 'IS_LOADING_TOKEN'\r\nexport function loadingTokenChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_SUPPLY = 'SET_TOKEN_SUPPLY'\r\nexport function setTokenSupply(tokenID, supply) {\r\n    return {\r\n        type: SET_TOKEN_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            supply,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_SUPPLY = 'IS_LOADING_SUPPLY'\r\nexport function loadingSupplyChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_CONTRACT_INSTANCE = 'SET_TOKEN_CONTRACT_INSTANCE'\r\nexport function setTokenContractInstance(tokenID, contractInstance) {\r\n    return {\r\n        type: SET_TOKEN_CONTRACT_INSTANCE,\r\n        payload: {\r\n            tokenID,\r\n            contractInstance\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_LOADING_PROMISE = 'SET_TOKEN_LOADING_PROMISE'\r\nexport function setTokenLoadingPromise(tokenID, loadingPromise) {\r\n    return {\r\n        type: SET_TOKEN_LOADING_PROMISE,\r\n        payload: {\r\n            tokenID,\r\n            loadingPromise\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeSelectorTokenIdThunk(selectedTokenId) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeSelectorTokenId(selectedTokenId))\r\n        // update localstorage\r\n        storeLocalData(SELECTED_TOKEN_KEY, getState().tokens.selector.selectedTokenId)\r\n    }\r\n}\r\n\r\nexport const CHANGE_SELECTOR_TOKENID = 'CHANGE_SELECTOR_TOKENID'\r\nexport function changeSelectorTokenId(selectedTokenId) {\r\n    return {\r\n        type: CHANGE_SELECTOR_TOKENID,\r\n        payload: {\r\n            selectedTokenId,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CLEAR_TOKEN_LIST = 'CLEAR_TOKEN_LIST'\r\nexport function clearTokenList() {\r\n    return {\r\n        type: CLEAR_TOKEN_LIST,\r\n    }\r\n}\r\n\r\nexport const CHANGE_VALID_TOKEN_COUNT = 'CHANGE_VALID_TOKEN_COUNT'\r\nexport function changeValidTokenCount(count) {\r\n    return {\r\n        type: CHANGE_VALID_TOKEN_COUNT,\r\n        payload: {\r\n            count\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_FILTER_PROPS = 'CHANGE_FILTER_PROPS'\r\nexport function changeFilterProps(filter, matchedTokenIds, showOnlyTracked, filterIsActive) {\r\n    return {\r\n        type: CHANGE_FILTER_PROPS,\r\n        payload: {\r\n            filter,\r\n            matchedTokenIds,\r\n            showOnlyTracked,\r\n            filterIsActive,\r\n        }\r\n    }\r\n}\r\n\r\nexport const RESET_DISPLAY_COUNT = 'RESET_DISPLAY_COUNT'\r\nexport function resetDisplayCount() {\r\n    return {\r\n        type: RESET_DISPLAY_COUNT,\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_TRACKING = 'CHANGE_TOKEN_TRACKING'\r\nexport function changeTokenTracking(tokenId, doTrack) {\r\n    return {\r\n        type: CHANGE_TOKEN_TRACKING,\r\n        payload: {\r\n            tokenId,\r\n            doTrack,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_PAGE = 'CHANGE_TOKENLIST_PAGE'\r\nexport function changeTokenListPage(activePage) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_PAGE,\r\n        payload: {\r\n            activePage\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeTokenTrackingThunk(tokenId, doTrack) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeTokenTracking(tokenId, doTrack))\r\n        // update localstorage\r\n        storeLocalData(TRACKED_TOKEN_KEYS, getState().tokens.trackedIds)\r\n        // if I start tracking a token, start getting balances right away\r\n        if (doTrack) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadTokenBalance(tokenId, addressId))\r\n                }\r\n            )\r\n        } else {\r\n            // If I stop tracking a token, also clear all balances for it\r\n            dispatch(clearTokenBalances(tokenId))\r\n        }\r\n    }\r\n}\r\n\r\nexport function setFilterProps(filterProps) {\r\n    return (dispatch, getState) => {\r\n\r\n        let {filterString, showOnlyTracked} = filterProps\r\n        const oldFilterString = getState().tokens.listState.filter.toLowerCase()\r\n        const oldShowOnlyTracked = getState().tokens.listState.showOnlyTracked\r\n        if (filterString === undefined) {\r\n            filterString = oldFilterString\r\n        }\r\n        if (showOnlyTracked === undefined) {\r\n            showOnlyTracked = oldShowOnlyTracked\r\n        }\r\n\r\n        // Filter token list based on filterstring and show tracked only/all\r\n        const searchString = filterString.toLowerCase()\r\n        const filterIsActive = ((searchString.length > 0) || showOnlyTracked)\r\n        const filterChanged = ((oldFilterString !== searchString) || (oldShowOnlyTracked !== showOnlyTracked))\r\n\r\n        if (filterChanged) {\r\n            // in case filter props changed, reset the number of displayed tokens to it's default value and set\r\n            // default page\r\n            dispatch(resetDisplayCount())\r\n            dispatch(changeTokenListPage(1))\r\n        }\r\n\r\n        // start with all tokens\r\n        let tokenIds = getState().tokens.allIds\r\n\r\n        // filter by tracked status\r\n        if (showOnlyTracked) {\r\n            // get all tokens that are being tracked\r\n            tokenIds = getState().tokens.trackedIds\r\n        }\r\n\r\n        // filter by search string\r\n        if (searchString.length) {\r\n            tokenIds = tokenIds.filter(tokenId => {\r\n                const token = getState().tokens.byId[tokenId]\r\n                return (\r\n                    token.name.toLowerCase().includes(searchString) ||\r\n                    token.symbol.toLowerCase().includes(searchString) ||\r\n                    token.address.toLowerCase().includes(searchString)\r\n                )\r\n            })\r\n        }\r\n\r\n        dispatch(changeFilterProps(searchString, tokenIds, showOnlyTracked, filterIsActive))\r\n    }\r\n}\r\n\r\n\r\nexport function loadTokenList(url) {\r\n    return async (dispatch, getState) => {\r\n        // clear existing tokens\r\n        dispatch(clearTokenList())\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.LOADING))\r\n        // fetch json file from url\r\n        const response = await fetch(url)\r\n        // parse json\r\n        const jsonTokens = await response.json()\r\n\r\n        // inject ETH dummy token\r\n        jsonTokens.push(ETH_TOKEN_DUMMY)\r\n\r\n        // sort token list alphabetically\r\n        jsonTokens.sort((a, b) => ( (a.name.toUpperCase() < b.name.toUpperCase()) ? -1 : 1))\r\n\r\n        // set total number of tokens (for loading progress)\r\n        dispatch(changeValidTokenCount(jsonTokens.length))\r\n\r\n        // add tokens\r\n        jsonTokens.forEach((listToken) => {\r\n            const token = mapListToken(listToken)\r\n            dispatch(addToken(token.address, token))\r\n        })\r\n\r\n        // if there is already a filter set, re-evaluate the filter results\r\n        if (getState().tokens.listState.filterIsActive) {\r\n            dispatch(setFilterProps({}))\r\n        }\r\n\r\n        // Crosscheck tokens with currently tracked tokens\r\n        const allTokenIds = getState().tokens.allIds\r\n        const existingTrackedTokens = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (allTokenIds.indexOf(tokenId) > -1)\r\n        })\r\n        // load balances for tracked tokens\r\n        if (existingTrackedTokens.length) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadMultiTokenBalances(existingTrackedTokens, addressId))\r\n                }\r\n            )\r\n        }\r\n\r\n        // stop tracking non-existing tokens\r\n        const trackedTokensToRemove = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (existingTrackedTokens.indexOf(tokenId) === -1)\r\n        })\r\n        trackedTokensToRemove.forEach(tokenId => {\r\n            dispatch(changeTokenTracking(tokenId, false))\r\n        })\r\n\r\n        // Finished loading\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.INITIALIZED))\r\n    }\r\n}\r\n\r\nfunction mapListToken(listToken) {\r\n    return {\r\n        id: listToken['address'],\r\n        address: listToken['address'],\r\n        symbol: listToken['symbol'],\r\n        decimals: Math.pow(10, listToken['decimals']),\r\n        name: listToken['name'],\r\n        description: null,\r\n        website: listToken['website'],\r\n        imageUrl: null,\r\n\r\n        supply: {\r\n            loading: false,\r\n            supply: undefined\r\n        },\r\n        balance: undefined,\r\n        eventIds: [],\r\n        loading: false,\r\n    }\r\n}\r\n\r\nexport function instantiateTokenContract(tokenID) {\r\n    return (dispatch, getState) => {\r\n        // create promise that resolves as soon as the contract is instantiated.\r\n        const loadingPromise = new Promise(\r\n            async function(resolve, reject) {\r\n                if (tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                    // This is the dummy token entry for plain ether\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                } else {\r\n                    // indicate we are loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, true))\r\n                    // create token contract instance and store it for later use in state\r\n                    const token = getState().tokens.byId[tokenID]\r\n                    const {web3} = getState().web3Instance\r\n                    const ERC20Contract = contract({abi: erc20ABI})\r\n                    ERC20Contract.setProvider(web3.currentProvider)\r\n                    const contractInstance = await ERC20Contract.at(token.address)\r\n                    dispatch(setTokenContractInstance(tokenID, contractInstance))\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                }\r\n            }\r\n        )\r\n        dispatch(setTokenLoadingPromise(tokenID, loadingPromise))\r\n    }\r\n}\r\n\r\nexport function loadTokenBalance(tokenID, addressId) {\r\n    return loadMultiTokenBalances([tokenID], addressId)\r\n}\r\n\r\nexport function loadMultiTokenBalances(tokenIDs, addressId) {\r\n    return async (dispatch, getState) => {\r\n        tokenIDs.forEach(async tokenId => {\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.LOADING))\r\n            const address = getState().addresses.byId[addressId].address\r\n            let balance\r\n            if (tokenId === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                balance = await getState().web3Instance.web3.eth.getBalancePromise(address)\r\n            } else {\r\n                await verifyContractInstance(tokenId, dispatch, getState)\r\n                const volatileToken = getState().tokens.volatileById[tokenId]\r\n                balance = await volatileToken.contractInstance.balanceOf(address)\r\n            }\r\n            dispatch(setBalanceByAddressAndToken(addressId, tokenId, balance))\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.INITIALIZED))\r\n        })\r\n    }\r\n}\r\n\r\nexport function loadTokenTransferEvents(tokenID, fromBlock, toBlock, addresses) {\r\n    return async (dispatch, getState) => {\r\n        if(tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n            // FIXME - Implement this.\r\n            //  See https://ethereum.stackexchange.com/questions/2531/common-useful-javascript-snippets-for-geth/3478#3478\r\n            //  for sample code to get started\r\n            return\r\n        }\r\n\r\n        const chunkSize = 100\r\n        const maxChunks = 100\r\n        const maxEvents = 50\r\n\r\n        let currentChunk = 1\r\n        let numEvents = 0\r\n\r\n        // if no from/toblock are provided, use default values\r\n        if (fromBlock === 0)\r\n            fromBlock = getState().web3Instance.block.number - (chunkSize * maxChunks)\r\n        if (toBlock === 0)\r\n            toBlock = getState().web3Instance.block.number\r\n\r\n        dispatch(aceEntriesLoadingChangeWrapper(addresses, tokenID, true, fromBlock, toBlock, fromBlock))\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n\r\n        while ((currentChunk <= maxChunks) && (numEvents <= maxEvents)) {\r\n            // calculate fromBlock for current chunk\r\n            let currentFromBlock = fromBlock + ((currentChunk-1) * chunkSize)\r\n            // calculate toBlock for current chunk\r\n            let currentToBlock = currentFromBlock + chunkSize\r\n\r\n            // update progress info\r\n            dispatch(changeEventScanProps({\r\n                tokenID,\r\n                addresses,\r\n                numEvents,\r\n                currentChunk,\r\n                maxEvents,\r\n                maxChunks,\r\n                fromBlock,\r\n                toBlock,\r\n                state: 'scanning'\r\n            }))\r\n\r\n            // obtain events for this chunk\r\n            // console.log(\"Calling 'Transfer' from \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\r\n            const transferEventsFrom = contractInstance.Transfer(\r\n                {\r\n                    // These are the standard ERC20 Transfer event fields\r\n                    _from: addresses,    // addresses sending token\r\n                    _to: null,      // addresses receiving token\r\n                },\r\n                {\r\n                    fromBlock: currentFromBlock,\r\n                    toBlock: currentToBlock,\r\n                }\r\n            )\r\n            //console.log(\"Calling 'Transfer' to \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\r\n            const transferEventsTo = contractInstance.Transfer(\r\n                {\r\n                    // These are the standard ERC20 Transfer event fields\r\n                    _from: null,    // addresses sending token\r\n                    _to: addresses,      // addresses receiving token\r\n                },\r\n                {\r\n                    fromBlock: currentFromBlock,\r\n                    toBlock: currentToBlock,\r\n                }\r\n            )\r\n\r\n            // Wrap this into promise and await it, otherwise loading:false action will be dispatched too early!\r\n            let eventPromises = []\r\n            eventPromises.push(new Promise((resolve, reject) => {\r\n                transferEventsFrom.get(function (error, events) {\r\n                    if (error) {\r\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                    } else {\r\n                        // console.log(\"Found \" + events.length + \" 'from' Events: \" + events)\r\n                        if (events.length) {\r\n                            dispatch(addEventsThunk(events, tokenID))\r\n                        }\r\n                        resolve(events.length)\r\n                    }\r\n                })\r\n            }))\r\n            eventPromises.push(new Promise((resolve, reject) => {\r\n                transferEventsTo.get(function (error, events) {\r\n                    if (error) {\r\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\r\n                    } else {\r\n                        //console.log(\"Found \" + events.length + \" 'to' Events: \" + events)\r\n                        if (events.length) {\r\n                            dispatch(addEventsThunk(events, tokenID))\r\n                        }\r\n                        resolve(events.length)\r\n                    }\r\n                })\r\n            }))\r\n            // Wait till both promises are resolved and add up the found number of events.\r\n            const loggedEvents = await Promise.all(eventPromises)\r\n            const foundEvents = loggedEvents.reduce((a, b) => a + b, 0)\r\n\r\n            dispatch(aceEntriesBlockRangeChange(addresses, tokenID, currentFromBlock, currentToBlock))\r\n            // increment currentChunk\r\n            currentChunk++\r\n            // update numEvents with number of found events\r\n            numEvents += foundEvents\r\n        }\r\n\r\n        dispatch(aceEntriesLoadingChange(addresses, tokenID, false, 0, 0, 0))\r\n    }\r\n}\r\n\r\nasync function verifyContractInstance(tokenId, dispatch, getState) {\r\n    let volatileToken = getState().tokens.volatileById[tokenId]\r\n    if (volatileToken === undefined) {\r\n        // Create an entry to continue\r\n        dispatch(addVolatileToken(tokenId))\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n    }\r\n    if (volatileToken.loadingPromise) {\r\n        // token is already loading. Just return the promise.\r\n        return volatileToken.loadingPromise\r\n    }\r\n    else {\r\n        dispatch(instantiateTokenContract(tokenId))\r\n        // refresh token, as the loadingPromise has just been added to state\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n        return volatileToken.loadingPromise\r\n    }\r\n}\r\n\r\nexport const TRANSACTION_STATES = {\r\n    IDLE: 'IDLE',\r\n    INITIALIZING: 'INITIALIZING',\r\n    WAITING_FOR_SIGNATURE: 'WAITING_FOR_SIGNATURE',\r\n    WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',\r\n    CONFIRMED: 'CONFIRMED',\r\n    FAILED: 'FAILED'\r\n}\r\n\r\nexport function transferToken(tokenID, tokenAmount, fromAddress, toAddress) {\r\n    return async (dispatch, getState) => {\r\n        /*\r\n            Commented out until doing implementation\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.INITIALIZING))\r\n\r\n        // obtain token contract instance\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n        // TODO: check if eth balance is sufficient for required gas\r\n        // TODO: check if token balance is sufficient\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_SIGNATURE))\r\n        // TODO: initialize transfer\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_CONFIRMATION))\r\n\r\n        // finalize transfer\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.CONFIRMED))\r\n\r\n         */\r\n    }\r\n}\r\n\r\nexport const CHANGE_TRANSACTION_STATE = 'CHANGE_TRANSACTION_STATE'\r\nexport function changeTransactionState(transactionState, message='') {\r\n    return {\r\n        type: CHANGE_TRANSACTION_STATE,\r\n        payload: {\r\n            transactionState,\r\n            message\r\n        }\r\n    }\r\n}\r\n","import {\n    CHANGE_FILTER_PROPS,\n    CHANGE_TOKEN_LIST_PAGE,\n    CHANGE_TOKEN_LIST_STATE,\n    CHANGE_VALID_TOKEN_COUNT, CLEAR_TOKEN_LIST,\n    RESET_DISPLAY_COUNT,\n    TOKEN_LIST_STATES\n} from '../tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    listState: TOKEN_LIST_STATES.VIRGIN,\n    total: 0,\n    filter: '',\n    matchedTokenIds: [],\n    displayCount: 10,\n    showOnlyTracked: false,\n    filterIsActive: false,\n    activePage: 1,\n}\n\nfunction clearTokenList(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount,\n        matchedTokenIds: LISTSTATE_INITIAL.matchedTokenIds,\n        activePage: LISTSTATE_INITIAL.activePage,\n        total: LISTSTATE_INITIAL.total,\n        listState: LISTSTATE_INITIAL.listState,\n    }\n}\n\nfunction resetDisplayCount(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount\n    }\n}\n\nfunction tokenListStateChanged(state, action) {\n    // very simple reducer, just set a new state\n    const {payload} = action\n    const {listState} = payload\n    return {\n        ...state,\n        listState\n    }\n}\n\nfunction changeValidTokenCount(state, action){\n    const {payload} = action\n    const {count} = payload\n    return {\n        ...state,\n        total: count\n    }\n}\n\nfunction changeFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedTokenIds, showOnlyTracked, filterIsActive} = payload\n    return {\n        ...state,\n        filter,\n        matchedTokenIds,\n        showOnlyTracked,\n        filterIsActive,\n    }\n}\n\nfunction tokenListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nexport const listStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_LIST_STATE:\n            return tokenListStateChanged(state, action)\n        case CHANGE_VALID_TOKEN_COUNT:\n            return changeValidTokenCount(state, action)\n        case CHANGE_FILTER_PROPS:\n            return changeFilterProps(state, action)\n        case RESET_DISPLAY_COUNT:\n            return resetDisplayCount(state)\n        case CHANGE_TOKEN_LIST_PAGE:\n            return tokenListPageChanged(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearTokenList(state)\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, CLEAR_TOKEN_LIST, IS_LOADING_SUPPLY, IS_LOADING_TOKEN,\n    SET_TOKEN_SUPPLY\n} from '../tokenActions'\nimport {ADD_EVENTS, buildEventId} from '../../event/eventActions'\n\nconst TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokensById() {\n    return TOKENS_BY_ID_INITIAL\n}\n\nfunction addTokenEntry(state, action) {\n    const {payload} = action\n    const {tokenID, token} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: token\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\nfunction loadingTokenChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loading: isLoading\n        }\n    }\n}\n\nfunction setTokenSupply(state, action) {\n    const {payload} = action\n    const {tokenID, supply} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                supply\n            }\n        }\n    }\n}\n\nfunction loadingSupplyChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                loading: isLoading\n            }\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new event to the according token contract\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenId]\n\n    let newEventIds = token.eventIds\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n\n        if (newEventIds.includes(transferEventId)) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newEventIds = newEventIds.concat(transferEventId)\n    })\n\n    return {\n        ...state,\n        [tokenId]: {\n            ...token,\n            eventIds: newEventIds\n        }\n    }\n}\n\nexport const tokensByIdReducer = (state = TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenEntry(state, action)\n        }\n        case IS_LOADING_TOKEN: {\n            return loadingTokenChanged(state, action)\n        }\n        case SET_TOKEN_SUPPLY: {\n            return setTokenSupply(state, action)\n        }\n        case IS_LOADING_SUPPLY: {\n            return loadingSupplyChanged(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokensById(state, action)\n        }\n        case ADD_EVENTS: {\n            return addTransferEvents(state, action)\n        }\n        default:\n            return state\n    }\n}\n","import {ADD_TOKEN, CLEAR_TOKEN_LIST} from '../tokenActions'\n\nconst ALL_TOKENS_INITIAL = []\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate token\n    if (state.indexOf(tokenID) === -1) {\n        // append the new token's ID to the list of all IDs\n        return state.concat(tokenID);\n    }\n    else {\n        // duplicate\n        return state\n    }\n}\n\nfunction clearAllTokens() {\n    return ALL_TOKENS_INITIAL\n}\n\nexport const allTokensReducer = (state=ALL_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllTokens(state, action)\n        }\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, ADD_VOLATILE_TOKEN, CLEAR_TOKEN_LIST,\n    SET_TOKEN_CONTRACT_INSTANCE,\n    SET_TOKEN_LOADING_PROMISE,\n} from '../tokenActions'\n\nconst VOLATILE_TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokens() {\n    return VOLATILE_TOKENS_BY_ID_INITIAL\n}\n\nfunction setTokenContractInstance(state, action) {\n    const {payload} = action\n    const {tokenID, contractInstance} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        [tokenID]: {\n            ...token,\n            contractInstance: contractInstance\n        }\n    }\n}\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: {\n                tokenID,\n            }\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\n\nfunction setTokenLoadingPromise(state, action) {\n    const {payload} = action\n    const {tokenID, loadingPromise} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loadingPromise\n        }\n    }\n}\n\nexport const volatileTokensByIdReducer = (state = VOLATILE_TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case ADD_VOLATILE_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case SET_TOKEN_LOADING_PROMISE: {\n            return setTokenLoadingPromise(state, action)\n        }\n        case SET_TOKEN_CONTRACT_INSTANCE: {\n            return setTokenContractInstance(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokens()\n        }\n        default:\n            return state\n    }\n}\n\n","import {CHANGE_TOKEN_TRACKING} from '../tokenActions'\n\nconst TRACKED_TOKENS_INITIAL = []\n\nfunction changeTokenTracking(state, action) {\n    const {payload} = action\n    const {tokenId, doTrack} = payload\n    // Check if this token is currently tracked\n    const trackedIndex = state.indexOf(tokenId)\n    if (doTrack && (trackedIndex === -1)) {\n        // Add new tracked entry\n        return state.concat(tokenId)\n    }\n    if (!doTrack && (trackedIndex > -1)) {\n        // remove existing tracked entry. Use \"filter\" instead of splice, as it returns a new array, while \"splice\"\n        // mutates the existing one.\n        return state.filter(id => (id !== tokenId))\n    }\n    // No need to change anything\n    return state\n}\n\nexport const trackedTokensReducer = (state=TRACKED_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_TRACKING:\n            return changeTokenTracking(state, action)\n        default:\n            return state\n    }\n}\n\n","import Web3 from 'web3'\n/*\n Obtain web3 instance. Based on code from\n https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nlet getWeb3 = new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n        let myWeb3\n\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            myWeb3 = new Web3(window.ethereum)\n        }\n        // Legacy dapp browser\n        else if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            myWeb3 = new Web3(window.web3.currentProvider);\n        }\n\n        if (myWeb3) {\n            console.log('Injected web3 detected.')\n            let results = {\n                web3: myWeb3\n            }\n            resolve(results)\n        } else {\n            let results = {\n                error: 'No web3 injected'\n            }\n            reject(results)\n        }\n    })\n})\n\nexport default getWeb3\n","import Ens from 'ethjs-ens'\nimport getWeb3 from '../../utils/getWeb3'\nimport {clearTokenList} from '../token/tokenActions'\nimport promisify from '../../utils/promisifyWeb3'\n\nexport const WEB3_STATES = {\n    UNINITIALIZED: 'uninitialized',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    ERROR: 'error'\n}\n\nexport const ETH_ENABLE_STATES = {\n    REJECTED: 'rejected', // no access to eth.accounts\n    WAITING: 'waiting', // waiting for user confirmation in UI (e.g. metamask)\n    GRANTED: 'granted', // user has granted access to eth.accounts\n}\n\nexport const SET_WEB3_STATE = 'SET_WEB3_STATE'\nexport function setWeb3State(state) {\n    return {\n        type: SET_WEB3_STATE,\n        state\n    }\n}\n\nexport const SET_ETH_ENABLE_STATE = 'SET_ETH_ENABLE_STATE'\nexport function setEthEnableState(ethEnableState) {\n    return {\n        type: SET_ETH_ENABLE_STATE,\n        ethEnableState\n    }\n}\n\nexport const SET_WEB3INSTANCE = 'SET_WEB3INSTANCE'\nexport function setWeb3Instance(web3) {\n    return {\n        type: SET_WEB3INSTANCE,\n        web3\n    }\n}\n\nexport const SET_ENS = 'SET_ENS'\nexport function setENS(ens) {\n    return {\n        type: SET_ENS,\n        ens\n    }\n}\n\nexport const SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK'\nexport function setCurrentBlock(block) {\n    return {\n        type: SET_CURRENT_BLOCK,\n        block\n    }\n}\n\nexport const SET_NETWORK = 'SET_NETWORK'\nexport function setNetwork(id, name, previousId) {\n    return {\n        type: SET_NETWORK,\n        id,\n        name,\n        previousId,\n    }\n}\n\nexport const SET_NODE_VERSION = 'SET_NODE_VERSION'\nexport function setNodeVersion(nodeVersion) {\n    return {\n        type: SET_NODE_VERSION,\n        nodeVersion\n    }\n}\n\nexport const SET_BLOCK_FILTER = 'SET_BLOCK_FILTER'\nexport function setBlockFilter(blockFilter) {\n    return {\n        type: SET_BLOCK_FILTER,\n        blockFilter\n    }\n}\n\nexport function stopBlockFilter() {\n    return (dispatch, getState) => {\n        // Clean up any blockfilter that might be active\n        const {blockFilter} = getState().web3Instance\n        if (blockFilter) {\n            blockFilter.stopWatching((error, result) => {\n                if (error) {\n                    console.log(\"Error stopping blockfilter: \" + error)\n                }\n            })\n            dispatch(setBlockFilter(null))\n        }\n    }\n}\n\nexport function initialize() {\n    return async (dispatch, getState) => {\n        // stop any running block filter, just in case...\n        dispatch(stopBlockFilter())\n\n        // signal that web3 is being initialized\n        dispatch(setWeb3State(WEB3_STATES.LOADING))\n\n        // set web3 instance\n        try {\n            var {web3} = await getWeb3\n            // stop loading\n            dispatch(setWeb3State(WEB3_STATES.INITIALIZED))\n        }\n        catch(e) {\n            console.log(\"Error getting web3: \" + e)\n            dispatch(setWeb3State(WEB3_STATES.ERROR))\n            return;\n        }\n\n        dispatch(setWeb3Instance(web3))\n\n        // set node info\n        const nodeVersion = await web3.version.getNodePromise()\n        dispatch(setNodeVersion(nodeVersion))\n\n        // set network info\n        const networkIdString = await web3.version.getNetworkPromise()\n        let networkID = parseInt(networkIdString, 10)\n        const network = getNetworkName(networkID)\n        dispatch(setNetwork(networkID, network, undefined))\n\n        // setup ens system\n        const ens = new Ens({\n            provider: web3.currentProvider,\n            network: networkID\n        })\n        dispatch(setENS(ens))\n\n        // set current block\n        const block = await web3.eth.getBlockPromise('latest')\n        dispatch(setCurrentBlock(block))\n\n        // start listening for new block events\n        const filter = web3.eth.filter('latest')\n        filter.watch(async (error, blockHash) => {\n            if (error) {\n                console.log(\"Error watching for block events: \" + error)\n            } else {\n                const block = await web3.eth.getBlockPromise(blockHash)\n                if (block) {\n                    dispatch(setCurrentBlock(block))\n                }\n                else {\n                    console.log(\"Ignoring null-block!\")\n                    console.log(block)\n                }\n            }\n        })\n        dispatch(setBlockFilter(filter))\n\n        // start watching for network change events\n        setInterval(async function () {\n            const networkIdString = await web3.version.getNetworkPromise()\n            let networkID = parseInt(networkIdString, 10)\n            const oldNetworkId = getState().web3Instance.id\n            if (oldNetworkId !== networkID) {\n                const network = getNetworkName(networkID)\n                dispatch(setNetwork(networkID, network, oldNetworkId))\n                dispatch(clearTokenList())\n            }\n        }, 1000)\n    }\n}\n\nexport function requestEthEnable() {\n    return async (dispatch, getState) => {\n        if (window.ethereum) {\n            // request access to user accounts as described in EIP-1102\n            try {\n                // signal that app is waiting for user action\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.WAITING))\n                // request access\n                await window.ethereum.enable()\n                // signal success\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n            } catch(error) {\n                // user rejected access\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.REJECTED))\n            }\n        } else {\n            // must be a legacy browser, which should grant access by default.\n            dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n        }\n    }\n}\n\nfunction getNetworkName(networkId) {\n    let network = 'unknown'\n    switch (networkId) {\n        case 4447:\n            network = 'truffle test'\n            break\n        case 1:\n            network = 'mainnet'\n            break\n        case 2:\n            network = 'Morden (deprecated!)'\n            break\n        case 3:\n            network = 'Ropsten'\n            break\n        case 4:\n            network = 'Rinkeby'\n            break\n        case 42:\n            network = 'Kovan'\n            break\n        case 61:\n            network = 'ETC'\n            break\n        case 62:\n            network = 'ETC Testnet'\n            break\n        default:\n            network = 'Unknown'\n    }\n    return network\n}\n","import {CHANGE_SELECTOR_TOKENID} from '../tokenActions'\nimport {SET_NETWORK} from '../../web3/web3Actions'\n\nconst SELECTOR_INITIAL = {\n    selctedTokenId: undefined\n}\n\nfunction changeSelectorTokenId(state, action) {\n    const {payload} = action\n    const {selectedTokenId} = payload\n\n    return {\n        ...state,\n        selectedTokenId,\n    }\n}\n\nfunction setNetwork(state, action) {\n    const {id, previousId} = action\n    // if the existing network got changed, clear the selected token. If this\n    // is the initial setNetwork event after page load (previousID is undefined)\n    // keep the selectedTokenId\n    // NOTE: This will only start working when Metamask stops the full page reload on network change.\n    // See https://github.com/MetaMask/metamask-extension/issues/3599.\n    if (previousId && (previousId !== id))\n        return SELECTOR_INITIAL\n    else\n        return state\n}\n\nexport const selectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_TOKENID:\n            return changeSelectorTokenId(state, action)\n        case SET_NETWORK:\n            return setNetwork(state, action)\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {listStateReducer} from './ListStateReducer'\nimport {tokensByIdReducer} from './TokensByIdReducer'\nimport {allTokensReducer} from './AllIdsReducer'\nimport {volatileTokensByIdReducer} from './volatileTokensByIdReducer'\nimport {trackedTokensReducer} from './TrackedIdsReducer'\nimport {selectorReducer} from './SelectorReducer'\n\n/*\nState tree:\n{\n    listState: {\n        listState: 'loading'\n        filter: 'Dumb'\n        matchedTokenIds: [6]\n        total: 2\n        activePage: 1\n    }\n    byId: {\n        [1]: {\n            loading: true\n            tokenID: 1\n            name: 'GAVCoin'\n            address: '0x123456678'\n            contractInstance: null\n            supply: {\n                loading: true\n                supply: 0\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        },\n        [6]: {\n            loading: false\n            tokenID: 6\n            name: 'DumbCoin'\n            address: '0x123456678'\n            contractInstance: <truffle-contract instance>\n            supply: {\n                loading: false\n                supply: 200000\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        }\n    },\n    allIds: [1, 6],\n    trackedIds: [3, 4]\n}\n*/\n\nexport const tokens = combineReducers({\n    listState: listStateReducer,\n    byId : tokensByIdReducer,\n    allIds : allTokensReducer,\n    trackedIds: trackedTokensReducer,\n    volatileById: volatileTokensByIdReducer,\n    selector: selectorReducer,\n});\n","export function updateObject(oldObject, newValues) {\n    // Encapsulate the idea of passing a new object as the first parameter\n    // to Object.assign to ensure we correctly copy data instead of mutating\n    return Object.assign({}, oldObject, newValues);\n}\n\nexport function updateItemInArray(array, itemId, updateItemCallback) {\n    return array.map(item => {\n        if (item.id !== itemId) {\n            // Since we only want to update one item, preserve all others as they are now\n            return item;\n        }\n\n        // Use the provided callback to create an updated item\n        return updateItemCallback(item);\n    });\n}\n","import {updateObject} from \"../../utils/reducerUtils\"\nimport {\n    SET_CURRENT_BLOCK,\n    SET_WEB3INSTANCE,\n    SET_NETWORK,\n    SET_NODE_VERSION, SET_BLOCK_FILTER, WEB3_STATES, SET_WEB3_STATE, ETH_ENABLE_STATES, SET_ETH_ENABLE_STATE, SET_ENS,\n} from './web3Actions'\n\nconst WEB3_INITIAL = {\n    web3: null,\n    state: WEB3_STATES.UNINITIALIZED,\n    block: {\n        number: 0,\n        timestamp: 0\n    },\n    id: -1,\n    name: 'unknown',\n    blockFilter: null,\n    ethEnableState: ETH_ENABLE_STATES.REJECTED,\n    ens: undefined,\n}\n\nexport const web3Instance = (state=WEB3_INITIAL, action) => {\n    switch (action.type) {\n        case SET_WEB3_STATE:\n            return updateObject(state, {state: action.state})\n        case SET_ETH_ENABLE_STATE:\n            return updateObject(state, {ethEnableState: action.ethEnableState})\n        case SET_WEB3INSTANCE:\n            return updateObject(state, {web3: action.web3})\n        case SET_ENS:\n            return updateObject(state, {ens: action.ens})\n        case SET_CURRENT_BLOCK:\n            return updateObject(state, {block: action.block})\n        case SET_NETWORK:\n            return updateObject(state, {id: action.id, name: action.name})\n        case SET_NODE_VERSION:\n            return updateObject(state, {nodeVersion: action.nodeVersion})\n        case SET_BLOCK_FILTER:\n            return updateObject(state, {blockFilter: action.blockFilter})\n        default:\n    }\n    return state;\n}\n","import {loadMultiTokenBalances} from '../token/tokenActions'\nimport {clearAddressBalances} from '../balance/balanceActions'\nimport {storeLocalData, WATCHED_ADDRESSES} from \"../../utils/localStorageWrapper\"\n\nexport const ADDRESS_TYPE_EXTERNAL='ADDRESS_TYPE_EXTERNAL'\nexport const ADDRESS_TYPE_OWNED='ADDRESS_TYPE_OWNED'\nexport const ADDRESS_BALANCES_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const CHANGE_ADDRESS_BALANCES_STATE = 'CHANGE_ADDRESS_BALANCES_STATE'\nexport function addressBalancesStateChanged(addressId, addressBalancesState) {\n    return {\n        type: CHANGE_ADDRESS_BALANCES_STATE,\n        payload: {\n            addressId,\n            addressBalancesState\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS'\nexport function addAddress(address, ensName, type) {\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            addressId: address,\n            address,\n            ensName,\n            type\n        }\n    }\n}\n\n\nexport function removeAddressThunk(addressId) {\n    return (dispatch, getState) => {\n        // remove from state\n        dispatch(removeAddress(addressId))\n        // remove all balance entries\n        dispatch(clearAddressBalances(addressId))\n        // update localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n    }\n}\n\nexport const REMOVE_ADDRESS='REMOVE_ADDRESS'\nexport function removeAddress(addressId) {\n    return {\n        type: REMOVE_ADDRESS,\n        payload: {\n            addressId\n        }\n    }\n}\n\nexport const CHANGE_ADDRESS_TYPE='CHANGE_ADDRESS_TYPE'\nexport function changeAddressType(addressId, newType) {\n    return {\n        type: CHANGE_ADDRESS_TYPE,\n        payload: {\n            addressId,\n            newType,\n        }\n    }\n}\n\nexport function addNewAddress(address, ensName, type) {\n    return (dispatch, getState) => {\n        // a new address is added.\n        // make sure that all addresses are stored in lowercase\n        address = address.toLowerCase()\n        // add address to store\n        dispatch(addAddress(address, ensName, type))\n        // save address in localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n        // If i'm tracking tokens start getting balance right away\n        const trackedIds = getState().tokens.trackedIds\n        if (trackedIds.length) {\n            // load balance for all tracked tokens\n            dispatch(loadMultiTokenBalances(trackedIds, address))\n        }\n    }\n}\n\nexport function changeOwnAddresses(accounts) {\n    // for each account in accounts:\n    // -> if it is not in addresses, add it\n    // -> if it is in addresses, but marked as \"external\", change type to \"owned\"\n    return (dispatch, getState) => {\n        const addressesById = getState().addresses.byId\n\n        const newAccounts = accounts.filter(account => {\n            const existingAddress = Object.values(addressesById).filter(entry => {\n                return (entry.address === account)\n            })\n            if (existingAddress.length > 0) {\n                // check if the type has changed\n                if (existingAddress[0].type !== ADDRESS_TYPE_OWNED){\n                    console.log(\"Changing address \" + existingAddress[0].address + \" type to Owned!\")\n                    dispatch(changeAddressType(existingAddress[0].address, ADDRESS_TYPE_OWNED))\n                }\n                return false // address already known\n            }\n            return true // address needs to be added\n        })\n\n        // now check if there is any address currently marked as owned that is no more in accounts\n        const makeExternal = Object.values(addressesById).filter(entry => {\n            if (entry.type === ADDRESS_TYPE_OWNED) {\n                // if this OWNED address is not in accounts array it needs to change to EXTERNAL!\n                const idx = accounts.indexOf(entry.address)\n                return (idx === -1)\n            }\n            return false\n        })\n\n        // make old owned addresses external\n        makeExternal.forEach(address => {\n            dispatch(changeAddressType(address.address, ADDRESS_TYPE_EXTERNAL))\n        })\n\n        // add all new addresses\n        newAccounts.forEach(account => {\n            dispatch(addNewAddress(account, '', ADDRESS_TYPE_OWNED))\n        })\n    }\n}\n\nexport const CHANGE_SELECTOR_ADDRESSID = 'CHANGE_SELECTOR_ADDRESSID'\nexport function changeSelectorAddressId(selectedAddressId) {\n    return {\n        type: CHANGE_SELECTOR_ADDRESSID,\n        payload: {\n            selectedAddressId,\n        }\n    }\n}\n","import {\n    ADD_ADDRESS, ADDRESS_BALANCES_STATES, CHANGE_ADDRESS_BALANCES_STATE, CHANGE_ADDRESS_TYPE,\n    REMOVE_ADDRESS\n} from '../addressActions'\n\nconst ADDRESS_BY_ID_INITIAL = {}\n\nfunction addAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId, address, ensName, type} = payload\n    if (Object.keys(state).indexOf(addressId) > -1)\n    {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return {\n        ...state,\n        [addressId]: {\n            address,\n            ensName,\n            type,\n            balancesState: ADDRESS_BALANCES_STATES.VIRGIN,\n            eventIds: []\n        },\n    }\n}\n\nfunction removeAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    let newState = Object.assign({}, state)\n    delete newState[addressId]\n    return newState\n}\n\nfunction changeAddressType(state, action) {\n    const {payload} = action\n    const {addressId, newType} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            type: newType\n        }\n    }\n}\n\nfunction changeAddressBalancesState(state, action) {\n    const {payload} = action\n    const {addressBalancesState, addressId} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            balancesState: addressBalancesState\n        }\n    }\n}\n\nexport const addressByIdReducer = (state=ADDRESS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressEntry(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressEntry(state, action)\n        case CHANGE_ADDRESS_TYPE:\n            return changeAddressType(state, action)\n        case CHANGE_ADDRESS_BALANCES_STATE:\n            return changeAddressBalancesState(state, action)\n        default:\n    }\n    return state;\n}\n","import {ADD_ADDRESS, REMOVE_ADDRESS} from '../addressActions'\n\nconst ALL_ADDRESSES_INITIAL = []\n/*const ALL_ADDRESSES_INITIAL = [\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n]*/\n\nfunction addAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(addressId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return state.concat(addressId)\n}\n\nfunction removeAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    return state.filter(entryId => (entryId !== addressId))\n}\n\nexport const allAddressIdsReducer = (state=ALL_ADDRESSES_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressId(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressId(state, action)\n        default:\n    }\n    return state;\n}\n","import {CHANGE_SELECTOR_ADDRESSID} from '../addressActions'\n\nconst SELECTOR_INITIAL = {\n    selectedAddressId: '',\n}\n\nfunction changeSelectorAddressId(state, action){\n    const {payload} = action\n    const {selectedAddressId} = payload\n\n    return {\n        ...state,\n        selectedAddressId,\n    }\n}\n\nexport const addressSelectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_ADDRESSID:\n            return changeSelectorAddressId(state, action)\n        default:\n            return state\n    }\n}\n\n","import {addressByIdReducer} from './addressByIdReducer'\nimport {allAddressIdsReducer} from './allAddressIdsReducer'\nimport {combineReducers} from 'redux'\nimport {addressSelectorReducer} from './addressSelectorReducer'\n\n/*\nState tree:\n{\n    addresses: {\n        byId: {\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n                address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n                ensName: 'validaddress.eth',\n                type: ADDRESS_TYPE_EXTERNAL,\n                balancesState: 'virgin',\n                eventIds: []\n            },\n            ...\n        }\n\n        allIds: [\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n            '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n            '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9'\n        ]\n    }\n}\n*/\n\nexport const addresses = combineReducers({\n    byId : addressByIdReducer,\n    allIds : allAddressIdsReducer,\n    selector: addressSelectorReducer,\n});\n","import {\n    BALANCE_STATES,\n    CREATE_BALANCE_ENTRY,\n    DELETE_BALANCE_ENTRY,\n    SET_BALANCE,\n    SET_BALANCE_STATE\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\nimport {BigNumber} from 'bignumber.js'\n\nconst BALANCE_BY_ID_INITIAL = {}\n\nfunction clearAllBalances() {\n    return BALANCE_BY_ID_INITIAL;\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balance\n        }\n    };\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId, addressId, tokenId} = payload\n    return {\n        ...state,\n        [balanceId] : {\n            balanceId,\n            addressId,\n            tokenId,\n            balance: new BigNumber(0),\n            balanceState: BALANCE_STATES.VIRGIN,\n        }\n    }\n}\n\nfunction balanceStateChanged(state, action){\n    const {payload} = action\n    const {balanceId, balanceState} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balanceState,\n        }\n    }\n\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    delete state[balanceId]\n    return state\n}\n\n\nexport const byId = (state=BALANCE_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case SET_BALANCE_STATE: {\n            return balanceStateChanged(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state;\n    }\n}\n","import {CREATE_BALANCE_ENTRY, DELETE_BALANCE_ENTRY} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_BALANCES_INITIAL = []\n\nfunction clearAllBalances() {\n    return ALL_BALANCES_INITIAL;\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(balanceId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate balance \" + balanceId)\n        return state\n    }\n    return state.concat(balanceId)\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\n\nexport const allIds = (state=ALL_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state\n    }\n}\n","import {DELETE_BALANCE_ENTRY, SET_BALANCE} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst POSITIVE_BALANCES_INITIAL = []\n\nfunction clearPositiveBalances() {\n    return POSITIVE_BALANCES_INITIAL\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1) {\n        // this balance entry is currently marked as having a balance...\n        if (balance.isZero()) {\n            // no more balance. Remove from array\n            const newState = state.filter(entry => entry !== balanceId)\n            return newState\n        } else {\n            // all set, no need for action\n            return state\n        }\n    } else {\n        // this balance entry is currently marked as having NO balance...\n        if (balance.greaterThan(0)) {\n            // ... but it has a balance now! Add it to list.\n            return state.concat(balanceId)\n        } else {\n            // ... and it still has no balance. No need for action\n            return state\n        }\n    }\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\nexport const positiveIds = (state=POSITIVE_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST:\n            return clearPositiveBalances()\n        default:\n            return state;\n    }\n}\n","import {\n    CHANGE_BALANCE_FILTER_PROPS,\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst BALANCE_LISTSTATE_INITIAL = {\n    filter: '',\n    matchedBalanceIds: [],\n    displayCount: 10,\n}\n\nfunction clearBalanceListState() {\n    return BALANCE_LISTSTATE_INITIAL\n}\n\nfunction changeBalanceFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedBalanceIds} = payload\n    return {\n        ...state,\n        filter,\n        matchedBalanceIds\n    }\n}\n\nexport const listStateReducer = (state=BALANCE_LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_BALANCE_FILTER_PROPS:\n            return changeBalanceFilterProps(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearBalanceListState()\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {byId} from './balanceByIdReducer'\nimport {allIds} from './allBalancesReducer'\nimport {positiveIds} from './positiveBalancesReducer'\nimport {listStateReducer} from './BalanceListStateReducer'\n\n/*\nState tree:\n{\n    balance: {\n        byId: {\n            [1]: {\n                balanceId: 1\n                tokenId: 1\n                addressId: 1\n                balance: 22.45\n            },\n        }\n        allIds: [1],\n        positiveIds: [1]    // all balances that have an actual balance > 0\n        listState: {\n            filter: '',\n            matchedBalanceIds: [],\n            displayCount: 10,\n        }\n    }\n}\n*/\n\nexport const balance = combineReducers({\n    byId : byId,\n    allIds : allIds,\n    positiveIds: positiveIds,\n    listState: listStateReducer,\n})\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst EVENT_BY_ID_INITIAL = {}\n\nfunction addEvents(state, action) {\n    const {payload} = action\n    const {events, tokenId} = payload\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        if (Object.keys(state).includes(transferEventId ))\n        {\n            console.warn(\"Ignoring duplicate event \" + transferEventId )\n            return\n        }\n        state = {\n            ...state,\n            [transferEventId]: {\n                transferEventId,\n                tokenId,\n                transferEvent,\n            },\n        }\n    })\n    return state\n}\n\nfunction clearEvents() {\n    return EVENT_BY_ID_INITIAL\n}\n\nexport const eventByIdReducer = (state=EVENT_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEvents(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_EVENTS_INITIAL = []\n\nfunction addEventIds(state, action) {\n    const {payload} = action\n    const {events} = payload\n    let newState = state\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        const existingIndex = state.indexOf(transferEventId)\n        if (existingIndex > -1) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newState = newState.concat(transferEventId)\n    })\n    return newState\n}\n\nfunction clearEvents() {\n    return ALL_EVENTS_INITIAL\n}\n\nexport const allEventIdsReducer = (state=ALL_EVENTS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {CHANGE_EVENT_SCAN_PROPS, CHANGE_TRANSFEREVENTLIST_PAGE} from '../eventActions'\nimport {CHANGE_SELECTOR_ADDRESSID} from '../../address/addressActions'\nimport {CHANGE_SELECTOR_TOKENID, CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    activePage: 1,\n    currentChunk: 0,\n    maxChunks: 0,\n}\n\nfunction transferEventListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nfunction resetPager(state) {\n    return {\n        ...state,\n        activePage: 1\n    }\n}\n\nfunction changeEventScanProps(state, action) {\n    const {payload} = action\n    const {\n        currentChunk,\n        maxChunks,\n    } = payload.props\n\n    return {\n        ...state,\n        currentChunk,\n        maxChunks\n    }\n}\n\nexport const transferEventListStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch(action.type) {\n        case CHANGE_TRANSFEREVENTLIST_PAGE:\n            return transferEventListPageChanged(state, action)\n        case CHANGE_EVENT_SCAN_PROPS:\n            return changeEventScanProps(state, action)\n        case CHANGE_SELECTOR_ADDRESSID:\n        case CHANGE_SELECTOR_TOKENID:\n        case CLEAR_TOKEN_LIST:\n            return resetPager(state, action)\n        default:\n            return state\n    }\n}\n","import {combineReducers} from 'redux'\nimport {eventByIdReducer} from './eventByIdReducer'\nimport {allEventIdsReducer} from './allEventIdsReducer'\nimport {addressContractEventsByIdReducer} from './addressContractEventsByIdReducer'\nimport {transferEventListStateReducer} from './listStateReducer'\n\n\nexport const events = combineReducers({\n    byId : eventByIdReducer,\n    allIds : allEventIdsReducer,\n    aceById: addressContractEventsByIdReducer,\n    listState: transferEventListStateReducer,\n});\n","export const SHOW_MODAL = 'SHOW_MODAL'\nexport function showModal(modalType, modalProps) {\n    return {\n        type: SHOW_MODAL,\n        payload: {\n            modalType,\n            modalProps\n        }\n    }\n}\n\nexport const HIDE_MODAL = 'HIDE_MODAL'\nexport function hideModal() {\n    return {\n        type: HIDE_MODAL,\n        payload: {}\n    }\n}\n","import {HIDE_MODAL, SHOW_MODAL} from './modalActions'\n\nconst MODAL_INITIAL = {\n    modalType: null,\n    modalProps: {}\n}\n\nfunction showModal(state, action) {\n    const {payload} = action\n    const {modalType, modalProps} = payload\n    return {\n        modalType,\n        modalProps\n    }\n}\n\nfunction hideModal() {\n    return MODAL_INITIAL\n}\n\nexport const modal = (state=MODAL_INITIAL, action) => {\n    switch (action.type) {\n        case SHOW_MODAL:\n            return showModal(state, action)\n        case HIDE_MODAL:\n            return hideModal()\n        default:\n    }\n    return state;\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport {tokens} from \"./modules/token/reducers/tokenReducer\"\nimport {web3Instance} from \"./modules/web3/web3Reducer\"\nimport thunk from 'redux-thunk'\nimport {addresses} from './modules/address/reducers/addressReducer'\nimport {balance} from './modules/balance/reducer/balanceReducer'\nimport {createLogger} from 'redux-logger'\nimport {events} from './modules/event/reducers/eventReducer'\nimport {modal} from './modules/modal/modalReducer'\n\n\nconst reducer = combineReducers({\n    web3Instance,\n    tokens,\n    addresses,\n    balance,\n    events,\n    modal,\n})\n\nconst logger = createLogger({\n    // Would love to log state diffs, but apparently logger tries to call all web3 instance methods\n    // which will make metamask throw an error due to trying to call methods synchronous.\n    // There may be a workaround somewhere, but disabling state diff for now...\n    diff: false\n});\n\n// REDUX Dev Tools don't play well at all with web3 from Metamask extension...\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    let store = createStore(\n        reducer,\n        compose(\n            applyMiddleware(\n                thunk,\n                logger,\n            )\n        )\n    )\n    return {store}\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Modal} from 'semantic-ui-react'\n\nconst TestModal = (props) => {\n    const {closeModal} = props\n    return (\n        <Modal open onClose={closeModal}>\n            <Modal.Header>Select a Photo</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Header>Default Profile Image</Header>\n                    <p>We've found the following gravatar image associated with your e-mail address.</p>\n                    <p>Is it okay to use this photo?</p>\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTestModal.propTypes = {\n    closeModal: PropTypes.func.isRequired\n}\n\nTestModal.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TestModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {addValidationRule} from 'formsy-react'\nimport {Grid, Header, List, Modal, Segment} from 'semantic-ui-react'\nimport {Label} from 'semantic-ui-react'\nimport {Form, Input} from 'formsy-semantic-ui-react'\n\nconst TransferForm = (props) => {\n    const {\n        web3, onValidSubmit, onClose,\n        fromAddress,\n        tokenName, tokenSymbol, tokenBalance,\n        etherBalance, gasCosts } = props\n\n    const errorLabel = <Label color=\"red\" pointing/>\n\n    addValidationRule('isEthereumAddress', (values, value) => (web3.isAddress(value)))\n    addValidationRule('isLessThanOrEqual', (values, value, max) => {\n        try {\n            const bnValue = web3.toBigNumber(value)\n            const bnMax = web3.toBigNumber(max)\n            return bnValue.lessThanOrEqualTo(bnMax)\n        }\n        catch (err) {\n            // if anything goes wrong with BigNumber, just fail validation\n            return false\n        }\n    })\n\n    return (\n        <Modal open onClose={onClose} size={'small'} closeIcon>\n            <Modal.Header>Transfer '{tokenName}' Tokens</Modal.Header>\n            <Modal.Content>\n\n                <Form noValidate onValidSubmit={onValidSubmit}>\n                    <Segment>\n                        <Grid columns={2}>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account address:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>{fromAddress}</Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account balance:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>\n                                    <List>\n                                        <List.Item>\n                                            {tokenBalance.toFixed()} {tokenSymbol}\n                                        </List.Item>\n                                        <List.Item>{etherBalance.toFixed()} ETH</List.Item>\n                                    </List>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">To Address</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"toAddress\"\n                                   placeholder=\"Receiving ethereum address\"\n                                   required\n                                   instantValidation\n                                   validations=\"isEthereumAddress\"\n                                   validationErrors={{\n                                       isEthereumAddress: 'This is not a valid Ethereum address',\n                                       isDefaultRequiredValue: 'To Address is Required',\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n\n                        <Header size=\"small\">Amount to send</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"amount\"\n                                   placeholder=\"Enter amount\"\n                                   label={tokenSymbol}\n                                   labelPosition=\"right\"\n                                   required\n                                   instantValidation\n                                   validations={'isNumeric,isLessThanOrEqual:' + tokenBalance.toFixed()}\n                                   validationErrors={{\n                                       isNumeric: 'This is not a valid number',\n                                       isDefaultRequiredValue: 'Amount is Required',\n                                       isLessThanOrEqual: 'Maximum available balance is ' + tokenBalance.toFixed()\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">Estimated Gas costs</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"gasCosts\"\n                                   label=\"ETH\"\n                                   labelPosition=\"right\"\n                                   readOnly\n                                   value={gasCosts}\n                                   validations={'isLessThanOrEqual:' + etherBalance.toFixed()}\n                                   instantValidation\n                                   validationErrors={{\n                                       isLessThanOrEqual: 'Not enough ether to cover gas costs'\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n                    <Form.Group>\n                        <Form.Button content=\"Submit\" color=\"green\"/>\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTransferForm.propTypes = {\n    web3: PropTypes.object.isRequired\n}\n\nTransferForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferForm\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TransferForm from './TransferForm'\nimport {connect} from 'react-redux'\nimport {transferToken} from '../../token/tokenActions'\n\nclass TransferFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            amount: this.props.web3.toBigNumber('0'),\n            toAddressValid: false,\n            amountValid: false,\n            rateValid: false\n        }\n    }\n\n    onValidSubmit = (formData) => alert(JSON.stringify(formData));   // eslint-disable-line\n\n    render() {\n        const {fromAddress, tokenName, tokenSymbol, tokenBalance} = this.props\n\n        // TODO: Calculate real gas costs\n        const gasCosts = this.props.web3.toBigNumber('0.0022')\n        // TODO: Get real balance\n        const etherBalance = this.props.web3.toBigNumber('12.3456')\n\n        return <TransferForm onValidSubmit={this.onValidSubmit}\n                             onClose={this.props.closeModal}\n                             fromAddress={fromAddress}\n                             web3={this.props.web3}\n                             tokenName={tokenName}\n                             tokenSymbol={tokenSymbol}\n                             tokenBalance={tokenBalance}\n                             gasCosts={gasCosts}\n                             etherBalance={etherBalance}\n        />\n    }\n}\n\nTransferFormContainer.propTypes = {\n    fromAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenId: PropTypes.number.isRequired,\n    tokenBalanceId: PropTypes.number.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n}\n\nTransferFormContainer.defaultProps = {\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const fromAddress = state.addresses.byId[balanceEntry.addressId].address\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n\n    return {\n        web3: state.web3Instance.web3,\n        fromAddress,\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenId: token.id,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    transferToken: () => {\n        dispatch(transferToken())\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport TestModal from './TestModal'\nimport {hideModal} from './modalActions'\nimport TransferFormContainer from '../forms/transferForm/TransferFormContainer'\n\nexport const MODAL_COMPONENTS = {\n    'TEST_MODAL': TestModal,\n    'TRANSFER_FORM_CONTAINER': TransferFormContainer\n    /* other modals */\n}\n\nclass ModalRoot extends Component {\n    render() {\n        const {modalType, modalProps, closeModal} = this.props\n\n        if (!modalType){\n            // currently no modal needs to be shown\n            return null\n        }\n\n        const SpecificModal = MODAL_COMPONENTS[modalType]\n        return <SpecificModal closeModal={closeModal} {...modalProps} />\n    }\n}\n\nconst mapStateToProps = state => (\n    state.modal\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => {\n        dispatch(hideModal())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header} from \"semantic-ui-react\"\n\nconst ScreenHeader = (props) => {\n    const {title} = props\n    /*\n     custom style \"marginTop: 0\" required to prevent header sticking just a little bit outside of its grid row.\n     Not sure if this is an error on my side, a bug of react-semantic-ui or semantic-ui itself, or intended behaviour...\n     */\n    return (\n        <Header as={'h1'} block inverted color={'green'} textAlign={'center'}\n                style={{\n                    marginTop: 0,\n                }}>\n            {title}\n        </Header>\n    )\n}\n\nScreenHeader.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    title: PropTypes.string.isRequired\n}\n\nScreenHeader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ScreenHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\n\nconst Balance = (props) => {\n    const {balance, numDecimals} = props\n    const trigger = <span>{balance.toFixed(numDecimals)}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={balance.toFixed(Math.max(numDecimals, balance.dp()))}\n        />\n    )\n}\n\nBalance.propTypes = {\n    balance: PropTypes.object.isRequired, // BigNum instance\n    numDecimals: PropTypes.number\n}\n\nBalance.defaultProps = {\n    numDecimals: 3\n}\n\nexport default Balance\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    if (ensName) {\n        return <div>\n            <div><strong>{ensName}</strong></div>\n            <div><small>{address}</small></div>\n        </div>\n    } else {\n        return <div><strong>{address}</strong></div>\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from '../address/addressActions'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst TokenBalanceItemDetail = (props) => {\n    const {address, ensName, balance, loading, reloadBalance, url/*, addressType, openTransferModal*/} = props\n    /*const external = (addressType !== ADDRESS_TYPE_OWNED)*/\n\n    /*\n        transfer button removed until functionality gets implemented...\n\n                <Button icon='external share'\n                    size='mini'\n                    circular\n                    onClick={openTransferModal}\n                    disabled={external}\n                />\n     */\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                <Link to={url}><AddressDisplay address={address} ensName={ensName}/></Link>\n            </Table.Cell>\n            <Table.Cell><Balance balance={balance}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nTokenBalanceItemDetail.propTypes = {\n    address: PropTypes.string.isRequired,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    ensName: PropTypes.string,\n    balance: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    url: PropTypes.string.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nTokenBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TokenBalanceItemDetail from './TokenBalanceItemDetail'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport {showModal} from '../modal/modalActions'\n\nclass TokenBalanceItemDetailContainer extends Component {\n    render() {\n        return (\n            <TokenBalanceItemDetail address={this.props.address}\n                                    addressType={this.props.addressType}\n                                    balance={this.props.balance}\n                                    reloadBalance={this.props.reloadBalance}\n                                    loading={this.props.loading}\n                                    url={this.props.url}\n                                    openTransferModal={this.props.openTransferModal}\n                                    ensName={this.props.ensName}\n            />\n        )\n    }\n}\n\nTokenBalanceItemDetailContainer.propTypes = {\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.object.isRequired,\n    tokenBalanceId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n}\n\nTokenBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const addressEntry = state.addresses.byId[balanceEntry.addressId]\n    const balance = balanceEntry.balance.dividedBy(token.decimals)\n    return {\n        balance,\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n        url: \"/events/\" + token.id + \"/\" + addressEntry.address\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    },\n    openTransferModal: () => {\n        dispatch(showModal('TRANSFER_FORM_CONTAINER',\n            {\n                tokenBalanceId: ownProps.tokenBalanceId,\n            }\n        ))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenBalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport BalanceItemDetailContainer from './TokenBalanceItemDetailContainer'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\n\nconst TokenBalanceItem = (props) => {\n    const {expanded, tokenName, tokenSymbol, tokenBalances, total, reloadBalance, loading, tokenEventsLinkOptions, toggleCollapse} = props\n    let eventLink = <Link to={tokenEventsLinkOptions}>{tokenName} ({tokenSymbol})</Link>\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>{eventLink}</Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value><Balance balance={total}/></Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody = null\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <BalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nTokenBalanceItem.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    total: PropTypes.object.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    tokenEventsLinkOptions: PropTypes.object.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nTokenBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport TokenBalanceItem from './TokenBalanceItem'\nimport _ from 'lodash'\n\n\nclass TokenBalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        return (\n            <TokenBalanceItem tokenName={this.props.token.name}\n                              tokenSymbol={this.props.token.symbol}\n                              tokenBalances={this.props.tokenBalances}\n                              total={this.props.total}\n                              reloadBalance={this.reloadBalance}\n                              loading={this.props.loading}\n                              tokenEventsLinkOptions={this.props.tokenEventsLinkOptions}\n                              expanded={this.state.expanded}\n                              toggleCollapse={this.toggleCollapse}\n            />\n        )\n    }\n}\n\nTokenBalanceItemContainer.propTypes = {\n}\n\nTokenBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n\n    // calculate total balance of all addresses\n    const total = _.reduce(ownProps.tokenBalances, (sum, tokenBalance) => {\n        return sum.plus(tokenBalance.balance)\n    }, new BigNumber(0) ).dividedBy(token.decimals)\n\n    // if any of the tokenBalances is loading, the whole container is loading\n    let loading = false\n    ownProps.tokenBalances.forEach(tokenBalance => {\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n    })\n\n    const tokenEventsLinkOptions = {\n        pathname: '/events/' + ownProps.tokenId,\n    }\n\n    return {\n        token,\n        total,\n        loading,\n        tokenEventsLinkOptions,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenBalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemContainer from './TokenBalanceItemContainer'\n\nconst TokenBalancesList = (props) => {\n    const {balancesByToken} = props\n    return (\n        <div>\n            {balancesByToken.map(entry =>\n                <BalanceItemContainer key={entry[0]} tokenId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nTokenBalancesList.propTypes = {\n    balancesByToken: PropTypes.array.isRequired\n}\n\nTokenBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalancesList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport Balance from './Balance'\n\nconst AddressBalanceItemDetail = (props) => {\n    const {tokenName, tokenSymbol, tokenBalance, loading, reloadBalance} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                {tokenName} ({tokenSymbol})\n            </Table.Cell>\n            <Table.Cell><Balance balance={tokenBalance}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressBalanceItemDetail.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nAddressBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport AddressBalanceItemDetail from './AddressBalanceItemDetail'\n\nclass AddressBalanceItemDetailContainer extends Component {\n    render() {\n        const {tokenBalance, tokenName, tokenSymbol, reloadBalance, loading} = this.props\n        return (\n            <AddressBalanceItemDetail tokenBalance={tokenBalance}\n                                      tokenSymbol={tokenSymbol}\n                                      tokenName={tokenName}\n                                      reloadBalance={reloadBalance}\n                                      loading={loading}\n            />\n        )\n    }\n}\n\nAddressBalanceItemDetailContainer.propTypes = {\n    tokenBalanceId: PropTypes.string.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nAddressBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n    return {\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressBalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\nimport AddressBalanceItemDetailContainer from './AddressBalanceItemDetailContainer'\n\nconst AddressBalanceItem = (props) => {\n    const {expanded, address, ensName, tokenBalances, numTokens, reloadBalance, loading, toggleCollapse} = props\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}><AddressDisplay address={address} ensName={ensName}/></Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value>{numTokens} token</Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody = null\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <AddressBalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nAddressBalanceItem.propTypes = {\n    ensName: PropTypes.string,\n    address: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    numTokens: PropTypes.number.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nAddressBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport AddressBalanceItem from './AddressBalanceItem'\n\n\nclass AddressBalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        const {addressId, ensName, numTokens, tokenBalances, loading} = this.props\n        const {expanded} = this.state\n\n        return (\n            <AddressBalanceItem address={addressId}\n                                ensName={ensName}\n                                numTokens={numTokens}\n                                tokenBalances={tokenBalances}\n                                loading={loading}\n                                expanded={expanded}\n                                toggleCollapse={this.toggleCollapse}\n                                reloadBalance={this.reloadBalance}\n            />\n        )\n    }\n}\n\nAddressBalanceItemContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    ensName: PropTypes.string.isRequired,\n    numTokens: PropTypes.number.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n}\n\nAddressBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {addressId, tokenBalances} = ownProps\n    const address = state.addresses.byId[addressId]\n\n    let loading = false\n    let numTokens = 0\n    tokenBalances.forEach(tokenBalance => {\n        // if any of the tokenBalances is loading, the whole container is loading\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n        // count entries with balance > 0\n        if (tokenBalance.balance.greaterThan(0))\n            numTokens++\n    })\n\n    return {\n        address: addressId,\n        ensName: address.ensName,\n        numTokens,\n        loading,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressBalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AddressBalanceItemContainer from './AddressBalanceItemContainer'\n\nconst AddressBalancesList = (props) => {\n    const {balancesByAddress} = props\n    return (\n        <div>\n            {balancesByAddress.map(entry =>\n                <AddressBalanceItemContainer key={entry[0]} addressId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nAddressBalancesList.propTypes = {\n    balancesByAddress: PropTypes.array.isRequired\n}\n\nAddressBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalancesList\n","\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport React, {Component} from \"react\"\nimport {default as _} from 'lodash'\nimport TokenBalancesList from \"../balance/TokenBalancesList\"\nimport {Message} from \"semantic-ui-react\"\nimport {Link} from \"react-router-dom\"\nimport AddressBalancesList from '../balance/AddressBalancesList'\n\nclass OverviewBodyContainer extends Component {\n    render() {\n        const {groupedBalances, showEmpty, hasAccounts, groupBy} = this.props\n\n        // Do i have accounts at all?\n        if (!hasAccounts) {\n            return <Message>\n                <Message.Header>\n                    No accounts\n                </Message.Header>\n                <p>You have no watched or unlocked accounts. Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to setup accounts.</p>\n            </Message>\n        }\n\n        // Do i have any balances to display?\n        else if (Object.keys(groupedBalances).length === 0) {\n            return <Message>\n                <Message.Header>\n                    No balances\n                </Message.Header>\n                <Message.Content>\n                    There are no token balances to display. Things you can try:\n                </Message.Content>\n                <Message.List>\n                    <Message.Item>Change the filterstring</Message.Item>\n                    {!showEmpty && <Message.Item>Enable \"Show zero balances\" above</Message.Item>}\n                    <Message.Item>Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to add additional accounts</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/tokenContracts/'} }>Token Manager</Link> to tracked additional tokens</Message.Item>\n                </Message.List>\n            </Message>\n        }\n\n        switch (groupBy) {\n            case 'tokenId':\n                return <TokenBalancesList balancesByToken={groupedBalances}/>\n            case 'addressId':\n                return <AddressBalancesList balancesByAddress={groupedBalances}/>\n            default:\n                return \"Unhandled groupBy!\"\n        }\n    }\n}\n\nOverviewBodyContainer.propTypes = {\n    groupedBalances: PropTypes.array.isRequired,\n    showEmpty: PropTypes.bool.isRequired,\n    hasAccounts: PropTypes.bool.isRequired,\n    groupBy: PropTypes.string.isRequired,\n}\n\nOverviewBodyContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {showEmpty, groupBy} = ownProps\n    const hasAccounts = (state.addresses.allIds.length > 0)\n    const filterIsActive = (state.balance.listState.filter.length > 0)\n\n    // get balanceIds to display\n    const balanceIds = filterIsActive ? state.balance.listState.matchedBalanceIds : state.balance.allIds\n\n    // map IDs to Entries\n    let balanceEntries = balanceIds.map(id => state.balance.byId[id])\n\n    // remove empty balances if necessary\n    if (!showEmpty) {\n        balanceEntries = balanceEntries.filter(entry => (entry.balance.greaterThan(0)))\n    }\n\n    // now group the balances by token or address\n    const groupedBalancesObject = _.groupBy(balanceEntries, groupBy)\n\n    // convert to array and sort it\n    let groupedBalances\n    if (groupBy === 'tokenId') {\n        groupedBalances = Object.entries(groupedBalancesObject).sort((a, b) => {\n            // entry[0] contains the tokenID. Look up the tokenName for comparison\n            return (state.tokens.byId[a[0]].name.toUpperCase() < state.tokens.byId[b[0]].name.toUpperCase() ? -1 : 1)\n        })\n    } else if (groupBy === 'addressId') {\n        // Sort addresses by ENS\n        groupedBalances = Object.entries(groupedBalancesObject).sort((a,b) => {\n            // entry[0] contains the addressID. Look up the address for comparison\n            const addressA = state.addresses.byId[a[0]]\n            const addressB = state.addresses.byId[b[0]]\n            const stringA = addressA.ensName ? addressA.ensName : addressA.address\n            const stringB = addressB.ensName ? addressB.ensName : addressB.address\n            return (stringA.toUpperCase() < stringB.toUpperCase() ? -1 : 1 )\n        })\n    }\n    return {\n        hasAccounts,\n        groupedBalances,\n    }\n}\n\nexport default connect(mapStateToProps)(OverviewBodyContainer)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Input, Icon} from 'semantic-ui-react'\n\nconst TokenListFilter = (props) => {\n    const {filterString, handleChange, filterIsActive, clearFilter} = props\n    let icon = null\n    if (filterIsActive) {\n        icon = <Icon name='eraser' circular link onClick={clearFilter} />\n    }\n    return (\n        <Input label='Filter'\n               name='filter'\n               placeholder='Enter name, symbol or contract address'\n               onChange={handleChange}\n               value={filterString}\n               icon={icon}\n               fluid\n        />\n    )\n}\n\nTokenListFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    displayed: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n}\n\nTokenListFilter.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenListFilter\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {setFilterProps} from './tokenActions'\nimport TokenListFilter from './TokenListFilter'\nimport {setBalanceFilterString} from '../balance/balanceActions'\n\nclass TokenListFilterContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, {name, value}) {\n        this.props.setFilterString(value)\n    }\n\n    render() {\n        return <TokenListFilter filterString={this.props.filterString}\n                                handleChange={this.handleChange}\n                                filterIsActive={this.props.filterIsActive}\n                                displayed={this.props.displayed}\n                                total={this.props.total}\n                                clearFilter={this.props.clearFilter}/>\n    }\n}\n\nTokenListFilterContainer.propTypes = {\n    target: PropTypes.string.isRequired,\n    total: PropTypes.number.isRequired,\n    displayed: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    filterString: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            total: state.tokens.allIds.length,\n            displayed: state.tokens.listState.matchedTokenIds.length,\n            filterIsActive: state.tokens.listState.filterIsActive,\n            filterString: state.tokens.listState.filter,\n            showOnlyTracked: state.tokens.listState.showOnlyTracked,\n        }\n    }\n    if (target === 'balancelist') {\n        return {\n            total: state.balance.allIds.length,\n            displayed: state.balance.listState.matchedBalanceIds.length,\n            filterIsActive: state.balance.listState.filter.length > 0,\n            filterString: state.balance.listState.filter,\n        }\n    }\n\n    return {}\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            clearFilter: () => {\n                dispatch(setFilterProps({filterString: ''}))\n            },\n            setFilterString: (filter) => {\n                dispatch(setFilterProps({filterString: filter}))\n            }\n        }\n    }\n\n    if (target === 'balancelist') {\n        return {\n            clearFilter: () => {\n                dispatch(setBalanceFilterString(''))\n            },\n            setFilterString: (filter) => {\n                dispatch(setBalanceFilterString(filter))\n            }\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenListFilterContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Checkbox, Dropdown, Grid} from 'semantic-ui-react'\nimport TokenListFilterContainer from \"../token/TokenListFilterContainer\"\n\nfunction OverviewOptions(props) {\n    const {showEmpty, toggleShowEmpty, groupBy, setGroupBy} = props\n    const groupOptions = [\n        {\n            key: 'tokenId',\n            text: 'token',\n            value: 'tokenId',\n        },\n        {\n            key: 'addressId',\n            text: 'account',\n            value: 'addressId',\n        },\n    ]\n\n    return (\n        <Grid verticalAlign='middle' columns={2} divided>\n            <Grid.Row>\n                <Grid.Column width={3}>\n                    Group by{' '}\n                    <Dropdown\n                        inline\n                        options={groupOptions}\n                        value={groupBy}\n                        onChange={setGroupBy}\n                    />\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Checkbox toggle label='Show null balances' checked={showEmpty} onChange={toggleShowEmpty}/>\n                </Grid.Column>\n                <Grid.Column width={9}>\n                    <TokenListFilterContainer target={'balancelist'}/>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nOverviewOptions.propTypes = {\n    showEmpty: PropTypes.bool.isRequired,\n    toggleShowEmpty: PropTypes.func.isRequired,\n    groupBy: PropTypes.string.isRequired,\n    setGroupBy: PropTypes.func.isRequired,\n}\n\nOverviewOptions.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default OverviewOptions\n","import React, {Component} from 'react'\nimport ScreenHeader from '../layout/ScreenHeader'\nimport OverviewBodyContainer from './OverviewBodyContainer'\nimport OverviewOptions from './OverviewOptions'\nimport {Divider} from 'semantic-ui-react'\n\nclass OverviewContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            showEmpty: true,\n            groupBy: 'tokenId',\n        }\n    }\n\n    toggleShowEmpty = () => {\n        this.setState({showEmpty: !this.state.showEmpty})\n    }\n\n    setGroupBy = (e, { value}) => {\n        this.setState({groupBy: value})\n    }\n\n    render() {\n        const {showEmpty, groupBy} = this.state\n\n        return (\n            <React.Fragment>\n                <ScreenHeader title={'Overview'}/>\n                <OverviewOptions toggleShowEmpty={this.toggleShowEmpty}\n                                 showEmpty={showEmpty}\n                                 setGroupBy={this.setGroupBy}\n                                 groupBy={groupBy}\n                />\n                <Divider/>\n                <OverviewBodyContainer showEmpty={showEmpty} groupBy={groupBy}/>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default OverviewContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Web3Info = (props) => {\n    const {name, id, nodeVersion, block} = props\n    const gitHub = 'https://github.com/TripleSpeeder/TokenStation'\n    const contact = 'michael@m-bauer.org'\n    const srcUrl = 'https://github.com/ethereum-lists/tokens'\n    return (\n        <React.Fragment>\n            <p>\n                Network: {name} ({id}) | Block: {block ? block.number : '?'} | Node version: {nodeVersion}\n            </p>\n            <p>\n                ERC20 contract data origin: <strong><a href={srcUrl} target='_blank' rel='noopener noreferrer'>{srcUrl}</a></strong>\n            </p>\n            <p>\n                GitHub: <strong><a target='_blank' rel='noopener noreferrer' href={gitHub}>{gitHub}</a></strong> | contact: <strong><a href={'mailto:' + contact}>{contact}</a></strong>\n            </p>\n        </React.Fragment>\n    )\n\n}\n\nWeb3Info.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.shape({\n            number: PropTypes.number,\n            timestamp: PropTypes.number\n        }),\n    apiVersion: PropTypes.string,\n    nodeVersion: PropTypes.string,\n}\n\nexport default Web3Info\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport Web3Info from \"./web3Info\"\nimport {Segment} from 'semantic-ui-react'\n\nclass Web3Container extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.filter = null\n    }\n\n    render() {\n        const apiVersion = this.props.web3.version.api\n        return <Segment textAlign='center'>\n            <Web3Info apiVersion={apiVersion}\n                         name={this.props.name}\n                         block={this.props.block}\n                         id={this.props.id}\n                         nodeVersion={this.props.nodeVersion}\n            />\n        </Segment>\n    }\n}\n\nWeb3Container.propTypes = {\n    web3: PropTypes.object,\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.object,\n    nodeVersion: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n    web3: state.web3Instance.web3,\n    name: state.web3Instance.name,\n    id: state.web3Instance.id,\n    block: state.web3Instance.block,\n    nodeVersion: state.web3Instance.nodeVersion\n})\n\nexport default connect(mapStateToProps)(Web3Container)\n","import React from 'react'\nimport {Icon, Menu} from 'semantic-ui-react'\nimport {NavLink} from 'react-router-dom'\n\n\nconst Sidebar = () => {\n    return (\n        <Menu icon='labeled' fluid inverted vertical pointing size={'large'}>\n            <Menu.Item header>TokenStation.io</Menu.Item>\n            <Menu.Item as={NavLink} to='/overview' name='overview'>\n                <Icon name='home' />\n                Overview\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/accounts' name='accounts'>\n                <Icon name='users' />\n                Manage Accounts\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/events' name='events' >\n                <Icon name='exchange' />\n                View Transfer Events\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/tokenContracts' name='tokenContracts'>\n                <Icon name='cube' />\n                Manage Contracts\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from './addressActions'\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst AddressRow = (props) => {\n\n    const {address, addressType, ensName, handleRemove} = props\n\n    let iconName, popupContent, removeButton\n    if (addressType === ADDRESS_TYPE_OWNED) {\n        iconName = 'unlock'\n        popupContent = 'This is one of your addresses'\n        removeButton = null\n    } else {\n        iconName = 'eye'\n        popupContent = 'This is a watch-only address'\n        removeButton = <Button size='tiny' onClick={handleRemove} icon='delete'/>\n    }\n\n    const icon = <Popup trigger={<Icon size='large' name={iconName}/>}\n                        content={popupContent}\n    />\n\n    /*\n    let listProgress = null\n    if (this.props.progressCurrent < this.props.progressTotal) {\n        listProgress = <List.Description>\n            <Progress size='small'\n                      value={this.props.progressCurrent}\n                      total={this.props.progressTotal}\n                      progress='ratio'\n                      precision={1}\n            />\n        </List.Description>\n    }*/\n    return (\n        <Table.Row>\n            <Table.Cell textAlign={'left'} collapsing>\n                {icon}\n            </Table.Cell>\n            <Table.Cell textAlign={'left'}>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n            <Table.Cell textAlign={'right'} collapsing>\n                {removeButton}\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressRow.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nAddressRow.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressRow\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {removeAddressThunk} from './addressActions'\nimport {BALANCE_STATES} from '../balance/balanceActions'\nimport AddressRow from './AddressRow'\n\n\nclass AddressContainer extends PureComponent {\n\n    handleRemove = () => {\n        this.props.removeAddress(this.props.addressId)\n    }\n\n    render() {\n        return <AddressRow address={this.props.address}\n                           addressType={this.props.addressType}\n                           ensName={this.props.ensName}\n                           handleRemove={this.handleRemove}\n        />\n    }\n}\n\nAddressContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    removeAddress: PropTypes.func.isRequired,\n    progressTotal: PropTypes.number.isRequired,\n    progressCurrent: PropTypes.number.isRequired\n}\n\nAddressContainer.defaultProps = {}\n\nconst mapStateToProps = (state, ownProps) => {\n    const addressEntry = state.addresses.byId[ownProps.addressId]\n    const progressTotal = state.tokens.listState.total\n    // count all balance entries that include addressId\n    const matchedBalanceEntries = Object.values(state.balance.byId).filter(entry => {\n        return ((entry.addressId === ownProps.addressId) &&\n            (entry.balanceState === BALANCE_STATES.INITIALIZED))\n    })\n    const progressCurrent = matchedBalanceEntries.length\n\n    return {\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        balancesState: addressEntry.balancesState,\n        progressTotal,\n        progressCurrent\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAddress: (addressId) => {\n        dispatch(removeAddressThunk(addressId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst QueryAddressForm = (props) => {\n\n    const {handleChange, handleSubmit, loading, disabled, error, address, ensName, value} = props\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group inline>\n                <Form.Input width={10}\n                            name='address'\n                            placeholder='Address or ENS Name'\n                            error={error}\n                            loading={loading}\n                            onChange={handleChange}\n                            value={value}\n                            label={'Add account'}\n                />\n                <Form.Button\n                    content='Submit'\n                    disabled={disabled}\n                    width={6}\n                />\n            </Form.Group>\n        </Form>\n    )\n}\n\nQueryAddressForm.propTypes = {\n    address: PropTypes.string,\n    ensName: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nQueryAddressForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default QueryAddressForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {addNewAddress, ADDRESS_TYPE_EXTERNAL} from './addressActions'\nimport QueryAddressForm from './QueryAddressForm'\n\n\nexport const addressStates = {\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nexport class QueryAddressFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        }\n        // kraken4='0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n    }\n\n    handleChange = async (e) => {\n        const input=e.target.value\n        let addressState = addressStates.ADDRESS_INVALID\n        let address = ''\n        let ensName = ''\n        // check for valid input (raw address and ENS name)\n        const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n        const validENSName = (/.*\\.eth$/i.test(input))\n        if (validENSName) {\n            // start resolving process\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_RESOLVING,\n                    address: '',\n                    ensName: input,\n                    input,\n                }\n            )\n            try {\n                const resolvedAddress = await this.props.ens.lookup(input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_VALID,\n                        address: resolvedAddress,\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            } catch (e) {\n                console.log(\"Could not resolve \" + input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_INVALID,\n                        address: '',\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            }\n        }\n        else if(validAddress) {\n            // TODO: Lookup reverse ENS entry\n            addressState = addressStates.ADDRESS_VALID\n            ensName = ''\n            address = input\n            this.setState(\n                {\n                    addressState,\n                    address,\n                    ensName,\n                    input,\n                }\n            )\n        }\n        else {\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_INVALID,\n                    address: '',\n                    ensName: '',\n                    input,\n                }\n            )\n        }\n    }\n\n    handleSubmit = () => {\n        const { address, ensName } = this.state\n        this.props.addNewAddress(address, ensName, ADDRESS_TYPE_EXTERNAL)\n        this.setState({\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        })\n    }\n\n    render() {\n        const error = (this.state.addressState === addressStates.ADDRESS_INVALID)\n        const loading = (this.state.addressState === addressStates.ADDRESS_RESOLVING)\n        const disabled = (error || loading)\n        return (\n            <QueryAddressForm handleChange={this.handleChange}\n                              handleSubmit={this.handleSubmit}\n                              error = {error}\n                              loading={loading}\n                              disabled={disabled}\n                              address={this.state.address}\n                              ensName={this.state.ensName}\n                              value={this.state.input}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const ens = state.web3Instance.ens\n    return {\n        ens\n    }\n}\n\nlet mapDispatchToProps = dispatch => ({\n    addNewAddress: (address, ensName, type) => {\n        dispatch(addNewAddress(address, ensName, type))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryAddressFormContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Divider, Header, Message, Segment, Table} from 'semantic-ui-react'\nimport AddressContainer from './AddressContainer'\nimport QueryAddressFormContainer from \"./QueryAddressFormContainer\"\nimport {ETH_ENABLE_STATES} from '../web3/web3Actions'\n\nconst AddressList = (props) => {\n    let ownTable, watchTable\n    const {ethEnableState, ethEnable} = props\n    let waitingGrant = (ethEnableState === ETH_ENABLE_STATES.WAITING)\n\n    if (props.ownAddressIds.length) {\n        ownTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.ownAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else if (ethEnableState === ETH_ENABLE_STATES.GRANTED) {\n        // Access granted, but no accounts? Must be either Mist with no accounts shared or locked Metamask.\n        ownTable = <Message>\n            <Message.Header>\n                No personal accounts\n            </Message.Header>\n            <p>You need to share your accounts so they are visible here. Log in to Metamask or share accounts in Mist .</p>\n        </Message>\n    } else {\n        // No accounts and no access. Ask for it.\n        ownTable = <Message>\n            <Message.Header>\n                No access to personal accounts\n            </Message.Header>\n            <p>You can grant access to your personal accounts. This will automatically put the accounts to the watch\n                list.</p>\n            <p><Button primary disabled={waitingGrant} loading={waitingGrant} onClick={ethEnable}>Grant access</Button></p>\n        </Message>\n    }\n\n    if (props.watchAddressIds.length) {\n        watchTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.watchAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else {\n        watchTable = <Message>\n            <Message.Header>\n                No watched accounts\n            </Message.Header>\n            <p>You don't have any watched accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment>\n                <Header dividing as='h2'>Personal Accounts</Header>\n                {ownTable}\n            </Segment>\n            <Segment>\n                <Header dividing as='h2'>Watched Accounts</Header>\n                {watchTable}\n                <Divider/>\n                <QueryAddressFormContainer />\n            </Segment>\n        </React.Fragment>\n    )\n}\n\nAddressList.propTypes = {\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n    ethEnableState: PropTypes.oneOf(Object.values(ETH_ENABLE_STATES)),\n    ethEnable: PropTypes.func.isRequired,\n}\n\nexport default AddressList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED, changeOwnAddresses} from './addressActions'\nimport AddressList from './AddressList'\nimport {ETH_ENABLE_STATES, requestEthEnable} from '../web3/web3Actions'\n\nclass AddressListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.updateWeb3Accounts = this.updateWeb3Accounts.bind(this)\n        this.requestEthEnable = this.requestEthEnable.bind(this)\n        this.checkAccountTimer = 0\n    }\n\n    render() {\n        const ethEnableState = this.props.web3Instance ? this.props.web3Instance.ethEnableState : ETH_ENABLE_STATES.REJECTED\n        return <AddressList watchAddressIds={this.props.watchAddressIds}\n                            ownAddressIds={this.props.ownAddressIds}\n                            ethEnableState={ethEnableState}\n                            ethEnable={this.requestEthEnable}\n        />\n    }\n\n    componentDidMount() {\n        this.initAccounts()\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.web3 && (newProps.web3 !== this.props.web3)) {\n            this.initAccounts(newProps.web3)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.checkAccountTimer) {\n            clearInterval(this.checkAccountTimer)\n            this.checkAccountTimer = 0\n        }\n    }\n\n    initAccounts(web3 = this.props.web3) {\n        if (web3) {\n            if (this.checkAccountTimer) {\n                clearInterval(this.checkAccountTimer)\n                this.checkAccountTimer = 0\n            }\n            this.updateWeb3Accounts(this.props.web3)\n            if (this.props.web3.currentProvider.isMetaMask === true) {\n                console.log(\"Metamask detected. Watching for account changes\")\n                this.checkAccountTimer = setInterval(this.updateWeb3Accounts, 100)\n            }\n        }\n    }\n\n    updateWeb3Accounts(web3 = this.props.web3) {\n        web3.eth.getAccounts((error, accounts) => {\n            if (accounts) {\n                this.props.changeOwnAddresses(accounts)\n            }\n        })\n    }\n\n    requestEthEnable() {\n        this.props.ethEnable()\n    }\n}\n\nAddressListContainer.propTypes = {\n    web3: PropTypes.object,\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n}\n\nAddressListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const ownAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_OWNED))\n    const watchAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_EXTERNAL))\n    return {\n        ownAddressIds,\n        watchAddressIds,\n        web3Instance: state.web3Instance ? state.web3Instance : null,\n        web3: state.web3Instance ? state.web3Instance.web3 : null,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeOwnAddresses: (accounts) => {\n        dispatch(changeOwnAddresses(accounts))\n    },\n    ethEnable: () => {\n        dispatch(requestEthEnable())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer)\n","import React from 'react'\nimport AddressListContainer from '../address/AddressListContainer'\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst Accounts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Accounts'}/>\n            <AddressListContainer />\n        </React.Fragment>\n    )\n}\n\nexport default Accounts\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Form} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst SelectableToken = (props) => {\n\n    const {address, ensName, name, symbol, checked, onChange} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell collapsing>\n                <Form.Checkbox checked={checked} onChange={onChange}/>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{name}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{symbol}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nSelectableToken.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default SelectableToken\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport SelectableToken from \"./SelectableToken\"\nimport {changeTokenTrackingThunk} from './tokenActions'\n\n\nclass SelectableTokenContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, data) {\n        const {checked} = data\n        this.props.onChange(this.props.tokenId, checked)\n    }\n\n    render() {\n        return <SelectableToken id={this.props.tokenId}\n                                address={this.props.tokenAddress}\n                                name={this.props.tokenName}\n                                symbol={this.props.tokenSymbol}\n                                onChange={this.handleChange}\n                                checked={this.props.tokenTracked}\n        />\n    }\n}\n\nSelectableTokenContainer.propTypes = {\n    tokenId: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nSelectableTokenContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n    const tracked = (state.tokens.trackedIds.indexOf(ownProps.tokenId) > -1)\n    return {\n        tokenAddress: token.address,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenTracked: tracked,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (tokenId, checked) => {\n        dispatch(changeTokenTrackingThunk(tokenId, checked))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Message} from 'semantic-ui-react'\nimport SelectableTokenContainer from \"./SelectableTokenContainer\"\n\nconst SelectableTokenList = (props) => {\n\n    const {tokenList} = props\n\n    if (tokenList.length) {\n        return (\n            <Table celled>\n                <Table.Body>\n                {tokenList.map((tokenId) => <SelectableTokenContainer\n                    key={tokenId}\n                    tokenId={tokenId}\n                />)}\n                </Table.Body>\n            </Table>\n        )\n    } else {\n        return (\n            <Message negative>\n                <Message.Header>No token contracts to display.</Message.Header>\n                <Message.Content>Things you can try:</Message.Content>\n                <Message.List items={['change/clear the filterstring', 'check if you are connected to the correct network']}>\n                </Message.List>\n            </Message>\n        )\n    }\n}\n\nSelectableTokenList.propTypes = {\n    tokenList: PropTypes.array.isRequired\n}\n\nexport default SelectableTokenList\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Grid, Divider, Checkbox, Pagination, Container, Dropdown} from 'semantic-ui-react'\nimport TokenListFilterContainer from './TokenListFilterContainer'\nimport SelectableTokenList from \"./SelectableTokenList\"\nimport {changeTokenListPage, clearTokenList, setFilterProps} from './tokenActions'\n\nclass SelectableTokenListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleShowOnlyTrackedChange = this.handleShowOnlyTrackedChange.bind(this)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n        this.handleLoadTokens = this.handleLoadTokens.bind(this)\n    }\n\n    handleShowOnlyTrackedChange(e, data) {\n        const {checked} = data\n        this.props.setShowTracked(checked)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTokenListPage(activePage)\n    }\n\n    handleLoadTokens() {\n        this.props.clearTokenList()\n    }\n\n    render() {\n        let pager = null\n        if (this.props.totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                        <Pagination activePage={this.props.activePage}\n                                    onPageChange={this.handlePaginationChange}\n                                    totalPages={this.props.totalPages}/>\n                    </Container>\n        }\n        return (\n            <React.Fragment>\n                <Grid verticalAlign='middle' columns={2} divided>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Checkbox toggle label='Only show tracked token' checked={this.props.showOnlyTracked} onChange={this.handleShowOnlyTrackedChange} />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                            <TokenListFilterContainer target={'tokenlist'}/>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Dropdown icon={'setting'}>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item text='Reload token list' onClick={this.handleLoadTokens} />\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Divider/>\n                <SelectableTokenList\n                    tokenList={this.props.tokenIds}\n                />\n                {pager}\n            </React.Fragment>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    const listState = state.tokens.listState.listState\n    const itemsPerPage = 20\n    let totalPages = 1\n    const activePage = state.tokens.listState.activePage\n    const filterIsActive = state.tokens.listState.filterIsActive\n    let tokenIds = filterIsActive ? state.tokens.listState.matchedTokenIds : state.tokens.allIds\n    const showOnlyTracked = state.tokens.listState.showOnlyTracked\n    const numVisibleTokens = tokenIds.length\n    if (numVisibleTokens) {\n        totalPages = Math.ceil(numVisibleTokens / itemsPerPage)\n    }\n    const sliceStart = (activePage-1)*itemsPerPage\n    tokenIds = tokenIds.slice(sliceStart, sliceStart+itemsPerPage)\n    return {\n        tokenIds,\n        showOnlyTracked,\n        activePage,\n        totalPages,\n        listState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setShowTracked: (showOnlyTracked) => {\n        dispatch(setFilterProps({showOnlyTracked}))\n    },\n    setTokenListPage: (activePage) => {\n        dispatch(changeTokenListPage(activePage))\n    },\n    clearTokenList: () => {\n        dispatch(clearTokenList())\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenListContainer)\n","import React from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport SelectableTokenListContainer from \"../token/SelectableTokenListContainer\"\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst TokenContracts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Token Contracts'}/>\n            <Message info icon>\n                <Icon name={'info'}/>\n                <Message.Header>Select which tokens to track</Message.Header>\n                <Message.Content>\n                    In the list below, check the tokens you want to keep track of. Use the filter to\n                    quickly find specific tokens. You can filter by token name, symbol or contract address.\n                </Message.Content>\n            </Message>\n            <SelectableTokenListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default TokenContracts\n","import React, {Component} from 'react'\nimport {Container, Dropdown, Form, Grid} from 'semantic-ui-react'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport {connect} from 'react-redux'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventFilterContainer extends Component {\n\n    render() {\n        const {\n            tokenOptions, selectedTokenId, onTokenSelect,\n            addressOptions, selectedAddressId, onAddressSelect,\n        } = this.props\n\n        return (\n            <Container>\n\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>Show Transfers of token:</label>\n                                <Dropdown fluid search selection\n                                          options={tokenOptions}\n                                          onChange={onTokenSelect}\n                                          value={selectedTokenId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>To/From Account:</label>\n                                <Dropdown fluid search selection\n                                          options={addressOptions}\n                                          onChange={onAddressSelect}\n                                          value={selectedAddressId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Container>\n        )\n    }\n}\n\nEventFilterContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventFilterContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n\n    const selectedTokenId = state.tokens.selector.selectedTokenId\n    const tokenOptions = state.tokens.trackedIds.map(id => (\n        {\n            key: id,\n            value: id,\n            text: state.tokens.byId[id].name + \" (\" + state.tokens.byId[id].symbol + \")\"\n        }\n    ))\n    tokenOptions.sort((a, b) => (a.text > b.text))\n\n    const selectedAddressId = state.addresses.selector.selectedAddressId\n    const addressOptions = state.addresses.allIds.map(id =>\n        ({\n            key: id,\n            value: id,\n            text: state.addresses.byId[id].ensName ? state.addresses.byId[id].ensName : id\n        })\n    )\n    addressOptions.sort((a, b) => (a.text > b.text))\n\n    return {\n        tokenOptions,\n        selectedTokenId,\n        addressOptions,\n        selectedAddressId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTokenSelect: (e, {value}) => {\n            dispatch(changeSelectorTokenIdThunk(value))\n        },\n        onAddressSelect: (e, {value}) => {\n            dispatch(changeSelectorAddressId(value))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFilterContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, } from 'semantic-ui-react'\n\nconst EventLoader = (props) => {\n    const {loading, loadingFromBlock, loadingToBlock, resultCount, resultFromBlock, currentChunk, maxChunks,\n        resultToBlock, onLoadMore, canLoadMore} = props\n\n    let button = <Button icon disabled={!canLoadMore} onClick={onLoadMore} labelPosition={'left'}><Icon name={'search'}/>Load more</Button>\n\n    if (loading) {\n        button = <Message warning icon>\n                    <Icon loading name={'circle notched'}/>\n            <Message.Content>\n                <Message.Header>Loading events</Message.Header>\n                Scanning {loadingFromBlock} - {loadingToBlock} - Chunk {currentChunk}/{maxChunks}\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Grid verticalAlign='middle' columns={2}>\n            <Grid.Row>\n                <Grid.Column >\n                    <Message info icon>\n                        <Icon name={'exchange'}/>\n                        <Message.Content>\n                            <Message.Header>Showing {resultCount} transfer events</Message.Header>\n                             Block {resultFromBlock} to {resultToBlock}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n                <Grid.Column>\n                    {button}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nEventLoader.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loadingFromBlock: PropTypes.number,\n    loadingToBlock: PropTypes.number,\n    loadingCurrentBlock: PropTypes.number,\n    resultCount: PropTypes.number.isRequired,\n    resultFromBlock: PropTypes.number.isRequired,\n    resultFromBlockDate: PropTypes.string.isRequired,\n    resultToBlock: PropTypes.number.isRequired,\n    onLoadMore: PropTypes.func.isRequired,\n    currentChunk: PropTypes.number.isRequired,\n    maxChunks: PropTypes.number.isRequired,\n    canLoadMore: PropTypes.bool.isRequired,\n}\n\nEventLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default EventLoader\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport EventLoader from './EventLoader'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport {loadTokenTransferEvents} from '../token/tokenActions'\n\n\nclass EventLoaderContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.loadMoreEvents = this.loadMoreEvents.bind(this)\n    }\n\n    componentDidMount() {\n        EventLoaderContainer.checkEventsLoaded(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventLoaderContainer.checkEventsLoaded(newProps)\n    }\n\n    static checkEventsLoaded(props) {\n        if (props.currentBlock && props.aceId && (props.hasAceEntry === false)) {\n            // I have an aceID, but no according entry. Better start loading...\n            //const rangeEnd = props.currentBlock\n            //const rangeStart = rangeEnd - 10000\n            console.log(\"Loading events \"/* + rangeStart + \"-\" + rangeEnd*/)\n            props.loadTokenTransferEvents(\n                0,\n                0,\n                props.tokenId,\n                props.addressId\n            )\n        }\n    }\n\n    loadMoreEvents() {\n        // query the previous 1000 blocks for token transfers to/from my addresses\n        const rangeEnd = this.props.resultFromBlock ? this.props.resultFromBlock : this.props.currentBlock\n        const rangeStart = rangeEnd - 10000\n        console.log(\"Loading events \" + rangeStart + \"-\" + rangeEnd)\n        this.props.loadTokenTransferEvents(\n            rangeStart,\n            rangeEnd,\n            this.props.tokenId,\n            this.props.addressId\n        )\n    }\n\n    render() {\n        const {\n            loading, resultCount, resultFromBlock, resultFromBlockDate, resultToBlock, canLoadMore,\n            loadingFromBlock, loadingToBlock, loadingCurrentBlock, currentChunk, maxChunks } = this.props\n        return (\n            <EventLoader\n                loading={loading}\n                resultCount={resultCount}\n                resultFromBlock={resultFromBlock}\n                resultFromBlockDate={resultFromBlockDate}\n                resultToBlock={resultToBlock}\n                onLoadMore={this.loadMoreEvents}\n                loadingFromBlock={loadingFromBlock}\n                loadingToBlock={loadingToBlock}\n                loadingCurrentBlock={loadingCurrentBlock}\n                currentChunk={currentChunk}\n                maxChunks={maxChunks}\n                canLoadMore={canLoadMore}\n            />\n        )\n    }\n}\n\nEventLoaderContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventLoaderContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    let resultCount = 0\n    let loading = false\n    let resultFromBlock = 0\n    let resultToBlock = 0\n    let resultFromBlockDate = 'XXX'\n    let aceId = undefined\n    let aceEntry = undefined\n    let loadingFromBlock = 0\n    let loadingToBlock = 0\n    let loadingCurrentBlock = 0\n    let tokenId = state.tokens.selector.selectedTokenId\n    // make sure selected token is actually existing and being tracked. Might be an old token from\n    // browser localstorage or from another network\n    if ((state.tokens.allIds.indexOf(tokenId) === -1) || (state.tokens.trackedIds.indexOf(tokenId) ===-1))\n    {\n        tokenId = undefined\n    }\n    const addressId = state.addresses.selector.selectedAddressId\n    const currentBlock = state.web3Instance.block.number\n    const currentChunk = state.events.listState.currentChunk\n    const maxChunks = state.events.listState.maxChunks\n    const canLoadMore = Boolean(tokenId && addressId)\n    if (tokenId && addressId) {\n        aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n        if (aceEntry) {\n            // okay, entry existing. Now look at checked block range\n            resultFromBlock = aceEntry.firstBlock\n            resultToBlock = aceEntry.lastBlock\n            resultCount = aceEntry.eventIds.length\n            // is aceEntry currently being loaded?\n            loading = aceEntry.isLoading\n            loadingFromBlock = aceEntry.loadingFromBlock\n            loadingToBlock = aceEntry.loadingToBlock\n            loadingCurrentBlock = aceEntry.loadingCurrentBlock\n        }\n    }\n\n    return {\n        loading,\n        resultCount,\n        resultFromBlock,\n        resultFromBlockDate,\n        resultToBlock,\n        currentBlock,\n        tokenId,\n        addressId,\n        aceId,\n        hasAceEntry: Boolean(aceEntry),\n        loadingToBlock,\n        loadingFromBlock,\n        loadingCurrentBlock,\n        currentChunk,\n        maxChunks,\n        canLoadMore\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenTransferEvents: (firstBlock, lastBlock, tokenId, addressId) => {\n        dispatch(loadTokenTransferEvents(tokenId, firstBlock, lastBlock, [addressId]))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventLoaderContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\nconst TxHashDisplay = (props) => {\n    const {txHash} = props\n    const shortHash = txHash.slice(0, 10).concat('...')\n    const trigger = <span>{shortHash}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={txHash}\n        />\n    )\n}\n\nTxHashDisplay.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    txHash: PropTypes.string.isRequired\n}\n\n\nexport default TxHashDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Table} from 'semantic-ui-react'\nimport TxHashDisplay from '../common/TxHashDisplay'\nimport AddressDisplay from '../common/AddressDisplay'\n\nexport const TRANSFER_EVENT_TYPES = {\n    NEUTRAL: 'neutral',\n    POSITIVE: 'postivie',\n    NEGATIVE: 'negative'\n}\n\nconst TransferEvent = (props) => {\n    const {txHash, blockNumber, from, fromENS, to, toENS, type} = props\n    const quantity = props.quantity.toFixed(6)\n    let icon = null\n    let positive = false\n    let negative = false\n    switch(type) {\n        case TRANSFER_EVENT_TYPES.POSITIVE:\n            icon = <Icon name='plus' color='green' circular/>\n            positive = true\n            break\n        case TRANSFER_EVENT_TYPES.NEGATIVE:\n            icon = <Icon name='minus' color='red' circular/>\n            negative = true\n            break\n        case TRANSFER_EVENT_TYPES.NEUTRAL:\n        default:\n            // no icon, neither positive nor negative hint\n    }\n\n    return (\n        <React.Fragment>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>#: </Table.Cell>\n                <Table.Cell><strong>{blockNumber}</strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>From: </Table.Cell>\n                <Table.Cell><AddressDisplay address={from} ensName={fromENS}/></Table.Cell>\n                <Table.Cell rowSpan='2' textAlign={'right'}>{icon}</Table.Cell>\n                <Table.Cell rowSpan='2' positive={positive} negative={negative} textAlign={'right'}>{quantity}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>Tx: </Table.Cell>\n                <Table.Cell><strong><TxHashDisplay txHash={txHash}/></strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>To: </Table.Cell>\n                <Table.Cell><AddressDisplay address={to} ensName={toENS}/></Table.Cell>\n            </Table.Row>\n        </React.Fragment>\n    )\n}\n\nTransferEvent.propTypes = {\n    txHash: PropTypes.string.isRequired,\n    blockNumber: PropTypes.number.isRequired,\n    from: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    fromENS: PropTypes.string,\n    toENS: PropTypes.string,\n    type: PropTypes.oneOf([\n        TRANSFER_EVENT_TYPES.NEUTRAL,\n        TRANSFER_EVENT_TYPES.POSITIVE,\n        TRANSFER_EVENT_TYPES.NEGATIVE\n    ]).isRequired,\n    quantity: PropTypes.object.isRequired, // BigNum\n}\n\nTransferEvent.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEvent\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport TransferEvent, {TRANSFER_EVENT_TYPES} from './TransferEvent'\n\nclass TransferEventContainer extends PureComponent {\n    render() {\n        const {txHash, blockNumber, from, to, type, quantity, positive, negative} = this.props\n        return (\n            <TransferEvent blockNumber={blockNumber}\n                           from={from}\n                           to={to}\n                           quantity={quantity}\n                           txHash={txHash}\n                           type={type}\n                           positive={positive}\n                           negative={negative}\n            />\n        )\n    }\n}\n\nTransferEventContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventId: PropTypes.string.isRequired,\n}\n\nTransferEventContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const transferEvent = state.events.byId[ownProps.transferEventId]\n    const addressId = state.addresses.selector.selectedAddressId\n    const rawEvent = transferEvent.transferEvent\n    const token = state.tokens.byId[transferEvent.tokenId]\n    const quantity = rawEvent.args._value.dividedBy(token.decimals)\n    const from = rawEvent.args._from\n    const to = rawEvent.args._to\n    // events that are not to/from one of the watched accounts are neutral\n    let type = TRANSFER_EVENT_TYPES.NEUTRAL\n    if (addressId) {\n        // check if transfer is to/from own address\n        type = addressId.toLowerCase() === from ? TRANSFER_EVENT_TYPES.NEGATIVE : TRANSFER_EVENT_TYPES.POSITIVE\n    }\n    return {\n        txHash: rawEvent.transactionHash,\n        blockNumber: rawEvent.blockNumber,\n        from,\n        to,\n        type,\n        quantity,\n    }\n}\n\nexport default connect(mapStateToProps)(TransferEventContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table} from 'semantic-ui-react'\nimport TransferEventContainer from './TransferEventContainer'\n\nconst TransferEventsList = (props) => {\n    return (\n        <Table compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>Block#/TransactionHash</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>From/To</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'right'}>Quantity</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {props.transferEventIds.map(transferEventId =>\n                    <TransferEventContainer key={transferEventId}\n                                            transferEventId={transferEventId}\n                    />\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n\nTransferEventsList.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventIds: PropTypes.array.isRequired,\n}\n\nTransferEventsList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEventsList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport TransferEventsList from './TransferEventsList'\nimport {Container, Pagination} from 'semantic-ui-react'\nimport {changeTransferEventListPage} from './eventActions'\n\nclass TransferEventsListContainer extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTransferEventListPage(activePage)\n    }\n\n    render() {\n        const {aceEventIds, totalPages, activePage} = this.props\n\n        let pager = null\n        if (totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                <Pagination activePage={activePage}\n                            onPageChange={this.handlePaginationChange}\n                            totalPages={totalPages}/>\n            </Container>\n        }\n\n        return (\n            <React.Fragment>\n                <TransferEventsList transferEventIds={aceEventIds}/>\n                {pager}\n            </React.Fragment>\n        )\n    }\n}\n\nTransferEventsListContainer.propTypes = {\n    token: PropTypes.object\n}\n\nTransferEventsListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    const tokenId = state.tokens.selector.selectedTokenId\n    const addressId = state.addresses.selector.selectedAddressId\n    const activePage = state.events.listState.activePage\n\n    const itemsPerPage = 15\n    let totalPages = 1\n    let aceEntry = undefined\n    let aceEventIds = []\n\n    // first try to get aceEntry\n    if (tokenId && addressId) {\n        const aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n    }\n\n    // if there is an aceEntry get actual events and prepare paginator\n    if (aceEntry) {\n        aceEventIds = aceEntry.eventIds\n        totalPages = Math.ceil(aceEventIds.length / itemsPerPage)\n        const sliceStart = (activePage-1)*itemsPerPage\n        aceEventIds = aceEventIds.slice(sliceStart, sliceStart+itemsPerPage)\n    }\n\n    return {\n        aceEventIds,\n        activePage,\n        totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setTransferEventListPage: (activePage) => {\n        dispatch(changeTransferEventListPage(activePage))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferEventsListContainer)\n","import React from 'react'\nimport EventFilterContainer from '../event/EventFilterContainer'\nimport EventLoaderContainer from '../event/EventLoaderContainer'\nimport TransferEventsListContainer from '../event/TransferEventsListContainer'\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst Events = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Transfer Events'}/>\n            <EventFilterContainer/>\n            <EventLoaderContainer/>\n            <TransferEventsListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default Events\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport Events from './Events'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventsContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        EventsContainer.mapRouteParamsToState(props)\n    }\n\n    /* If route params contain tokenId and/or address trigger according actions to have them in store */\n    static mapRouteParamsToState(props) {\n        if (props.match.params.tokenId) {\n            props.setSelectedToken(props.match.params.tokenId)\n            if (props.match.params.address) {\n                props.setSelectedAddress(props.match.params.address)\n            } else {\n                // if a token is provided, but no address -> make sure to display events of all watched addresses\n                props.setSelectedAddress(undefined)\n            }\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventsContainer.mapRouteParamsToState(newProps)\n    }\n\n    render() {\n        return <Events/>\n    }\n}\n\nEventsContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventsContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedToken: (tokenId) => {\n        dispatch(changeSelectorTokenIdThunk(tokenId))\n    },\n    setSelectedAddress: (address) => {\n        dispatch(changeSelectorAddressId(address))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Message} from 'semantic-ui-react'\n\nconst NetworkWarning = (props) => {\n    const {networkId, networkName} = props\n\n    return(\n        <Message size={'small'} icon warning>\n            <Icon name='warning' />\n            <Message.Content>\n                <Message.Header>\n                    You are not connected to mainnet!\n                </Message.Header>\n                Your current network: {networkName} (ID: {networkId})\n            </Message.Content>\n        </Message>\n    )\n}\n\nNetworkWarning.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired\n}\n\n\nexport default NetworkWarning\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport NetworkWarning from './NetworkWarning'\nimport Grid from 'semantic-ui-react/dist/es/collections/Grid/Grid'\n\nclass NetworkWarningController extends Component {\n    render() {\n        const {networkId, networkName} = this.props\n        if (networkId === 1) {\n            // mainnet. No need for a warning!\n            return null\n        }\n\n        return (\n            <Grid.Row>\n                <NetworkWarning networkId={networkId} networkName={networkName}/>\n            </Grid.Row>\n        )\n    }\n}\n\nNetworkWarningController.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => {\n    return {\n        networkId: state.web3Instance.id,\n        networkName: state.web3Instance.name,\n    }\n}\n\nexport default connect(mapStateToProps)(NetworkWarningController)\n","import React, {Component} from 'react'\nimport OverviewContainer from '../segments/OverviewContainer'\nimport Web3Container from '../web3/web3Container'\nimport {Grid} from 'semantic-ui-react'\nimport {Route, Switch} from 'react-router-dom'\nimport Sidebar from '../segments/Sidebar'\nimport Accounts from '../segments/Accounts'\nimport TokenContracts from '../segments/TokenContracts'\nimport EventsContainer from '../segments/EventsContainer'\nimport NetworkWarningController from '../web3/NetworkWarningController'\n\nclass LayoutContainer extends Component {\n    render() {\n        const NoMatch = ({ location }) => (\n            <div>\n                <h3>No match for <code>{location.pathname}</code></h3>\n            </div>\n        )\n\n        return (\n            <Grid padded={'vertically'}>\n                <NetworkWarningController/>\n                <Grid.Row>\n                    <Grid.Column width={4} /*style={{ backgroundColor: 'rgb(27, 28, 29)' }}*/>\n                        <Sidebar/>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Switch>\n                            <Route exact path='/' component={OverviewContainer}/>\n                            <Route exact path='/overview/' component={OverviewContainer}/>\n                            <Route path='/accounts/' component={Accounts}/>\n                            <Route path='/events/:tokenId/:address' component={EventsContainer}/>\n                            <Route path='/events/:tokenId/' component={EventsContainer}/>\n                            <Route path='/events/' component={EventsContainer}/>\n                            <Route path='/tokenContracts/' component={TokenContracts}/>\n\n                            <Route component={NoMatch} />\n                        </Switch>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Web3Container/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default LayoutContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Icon, Modal} from 'semantic-ui-react'\n\nconst ModalLoader = (props) => {\n    const {content} = props\n    return (\n        <Modal open={true}>\n            <Header>\n                <Icon loading name={'spinner'}></Icon>\n                <Header.Content>\n                    {content}\n                </Header.Content>\n            </Header>\n        </Modal>\n    )\n}\n\nModalLoader.propTypes = {\n    content: PropTypes.string.isRequired\n}\n\nModalLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ModalLoader\n","import React, {Component, Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {loadTokenList, TOKEN_LIST_STATES} from './tokenActions'\nimport ModalLoader from '../common/ModalLoader'\n\nclass TokenLoaderGate extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.tokenListUrl = \"/tokens_1.json\"\n    }\n\n    componentDidMount() {\n        if (this.props.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(this.props)\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(newProps)\n        }\n    }\n\n    loadTokenList(props) {\n        if (props.networkId >=1 ) {\n            const url = \"/tokens_\" + props.networkId + \".json\"\n            props.loadTokenList(url)\n        }\n    }\n\n    render() {\n        if (this.props.listState === TOKEN_LIST_STATES.INITIALIZED)\n        {\n            // Load the dapp.\n            return Children.only(this.props.children)\n        }\n\n        return(\n            // Display a loading indicator.\n            <ModalLoader content={\"Loading token contracts\"}/>\n        )\n    }}\n\nTokenLoaderGate.propTypes = {\n    listState: PropTypes.string\n}\n\nconst mapStateToProps = (state) => ({\n    listState: state.tokens.listState.listState,\n    networkId: state.web3Instance.id,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenList: (url) => {\n        dispatch(loadTokenList(url))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenLoaderGate)\n","import React, {Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {WEB3_STATES} from './web3Actions'\nimport ModalLoader from '../common/ModalLoader'\nimport {Button, Icon, Modal} from 'semantic-ui-react'\n\nconst Web3Gate = (props) => {\n    const {state, onRetry, children} = props\n\n    switch (state) {\n        case WEB3_STATES.INITIALIZED: {\n            // Gateway passed, render actual content.\n            return Children.only(children)\n        }\n        case WEB3_STATES.ERROR:\n            return (\n                <Modal open={true}>\n                    <Modal.Header>\n                        <Icon name='exclamation'/> No web3 found\n                    </Modal.Header>\n                    <Modal.Content>\n                        <p>Failed to initialize web3. Please enable web3 in your browser, e.g by using the Metamask extension.</p>\n                        <p><Button onClick={onRetry}>Retry</Button></p>\n                    </Modal.Content>\n                </Modal>\n\n            )\n        case WEB3_STATES.LOADING:\n        default: {\n            return (\n                <ModalLoader content={'Waiting on web3 initialization'}/>\n            )\n        }\n    }\n}\n\nWeb3Gate.propTypes = {\n    state: PropTypes.string.isRequired,\n    onRetry: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n}\n\nexport default Web3Gate\n","import React, {Component} from 'react'\nimport {initialize, stopBlockFilter} from './web3Actions'\nimport {connect} from 'react-redux'\nimport Web3Gate from './web3Gate'\n\nclass Web3GateContainer extends Component {\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n    componentWillUnmount() {\n        // Stop listening to new block events\n        this.props.stopBlockFilter()\n    }\n\n    onRetry = () => {\n        this.props.initialize()\n    }\n\n    render() {\n        const {state, children} = this.props\n        return <Web3Gate state={state} onRetry={this.onRetry} children={children}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    state: state.web3Instance.state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialize: () => {\n        dispatch(initialize())\n    },\n    stopBlockFilter: () => {\n        dispatch(stopBlockFilter())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Web3GateContainer)\n","import {Component, Children} from 'react'\nimport {connect} from 'react-redux'\nimport {getLocalData, SELECTED_TOKEN_KEY, TRACKED_TOKEN_KEYS, WATCHED_ADDRESSES} from \"./localStorageWrapper\"\nimport {changeSelectorTokenId, changeTokenTracking, loadMultiTokenBalances} from \"../modules/token/tokenActions\"\nimport {addAddress, ADDRESS_TYPE_EXTERNAL} from \"../modules/address/addressActions\"\n\nclass LocalStorageGate extends Component {\n\n    componentDidMount() {\n        // Get tracked tokens from localstorage\n        const trackedTokens = getLocalData(TRACKED_TOKEN_KEYS, []);\n        trackedTokens.forEach((tokenId) => {\n            this.props.changeTokenTracking(tokenId)\n        })\n        // get selected token from localstorage\n        const selectedTokendId = getLocalData(SELECTED_TOKEN_KEY, null)\n        if (selectedTokendId) {\n            this.props.changeSelectorTokenId(selectedTokendId)\n        }\n        // Get addresses from localstorage\n        const watchedAddresses = getLocalData(WATCHED_ADDRESSES, [])\n        watchedAddresses.forEach((addressEntry) => {\n            this.props.addAddress(addressEntry.address, addressEntry.ensName)\n            // load balance for all tracked tokens\n            this.props.loadMultiTokenBalances(trackedTokens, addressEntry.address)\n        })\n    }\n\n    render() {\n        // Load the dapp.\n        return Children.only(this.props.children)\n    }\n}\n\nconst mapStateToProps = (state) => ({\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeTokenTracking: (tokenId) => {\n        dispatch(changeTokenTracking(tokenId, true))\n    },\n    changeSelectorTokenId: (tokenId) => {\n        dispatch(changeSelectorTokenId(tokenId))\n    },\n    addAddress: (address, ensName) => {\n        dispatch(addAddress(address, ensName, ADDRESS_TYPE_EXTERNAL))\n    },\n    loadMultiTokenBalances: (trackedTokens, address) => {\n        dispatch(loadMultiTokenBalances(trackedTokens, address))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalStorageGate)\n","import React, {Component} from 'react'\nimport {Provider} from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store'\nimport {Container} from 'semantic-ui-react'\nimport ModalRoot from './modules/modal/ModalRoot'\nimport LayoutContainer from './modules/layout/LayoutContainer'\nimport TokenLoaderGate from './modules/token/TokenLoaderGate'\nimport Web3GateContainer from './modules/web3/web3GateContainer'\nimport LocalStorageGate from \"./utils/LocalStorageGate\"\n\nlet {store} = configureStore()\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Web3GateContainer>\n                    <TokenLoaderGate>\n                        <LocalStorageGate>\n                            <BrowserRouter>\n                                <Container>\n                                    <ModalRoot/>\n                                    <LayoutContainer/>\n                                </Container>\n                            </BrowserRouter>\n                        </LocalStorageGate>\n                    </TokenLoaderGate>\n                </Web3GateContainer>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 759;"],"sourceRoot":""}