{"version":3,"sources":["modules/balance/balanceActions.js","modules/event/reducers/addressContractEventsByIdReducer.js","modules/event/eventActions.js","modules/token/tokenActions.js","modules/token/reducers/ListStateReducer.js","modules/token/reducers/TokensByIdReducer.js","modules/token/reducers/AllIdsReducer.js","modules/token/reducers/volatileTokensByIdReducer.js","modules/token/reducers/TrackedIdsReducer.js","utils/getWeb3.js","utils/promisifyWeb3.js","modules/web3/web3Actions.js","modules/token/reducers/SelectorReducer.js","modules/token/reducers/tokenReducer.js","utils/reducerUtils.js","modules/web3/web3Reducer.js","modules/address/addressActions.js","modules/address/reducers/addressByIdReducer.js","modules/address/reducers/allAddressIdsReducer.js","modules/address/reducers/addressSelectorReducer.js","modules/address/reducers/addressReducer.js","modules/balance/reducer/balanceByIdReducer.js","modules/balance/reducer/allBalancesReducer.js","modules/balance/reducer/positiveBalancesReducer.js","modules/balance/reducer/BalanceListStateReducer.js","modules/balance/reducer/balanceReducer.js","modules/event/reducers/eventByIdReducer.js","modules/event/reducers/allEventIdsReducer.js","modules/event/reducers/listStateReducer.js","modules/event/reducers/eventReducer.js","modules/modal/modalActions.js","modules/modal/modalReducer.js","store.js","modules/modal/TestModal.js","modules/forms/transferForm/TransferForm.js","modules/forms/transferForm/TransferFormContainer.js","modules/modal/ModalRoot.js","modules/balance/Balance.js","modules/common/AddressDisplay.js","modules/balance/BalanceItemDetail.js","modules/balance/BalanceItemDetailContainer.js","modules/balance/BalanceItem.js","modules/balance/BalanceItemContainer.js","modules/balance/BalancesList.js","modules/token/TokenListFilter.js","modules/token/TokenListFilterContainer.js","modules/screens/ScreenHeader.js","modules/segments/Overview.js","modules/segments/OverviewContainer.js","modules/web3/web3Info.js","modules/web3/web3Container.js","modules/segments/Sidebar.js","modules/address/AddressRow.js","modules/address/AddressContainer.js","modules/address/QueryAddressForm.js","modules/address/QueryAddressFormContainer.js","modules/address/AddressList.js","modules/address/AddressListContainer.js","modules/segments/Accounts.js","modules/token/SelectableToken.js","modules/token/SelectableTokenContainer.js","modules/token/SelectableTokenList.js","modules/token/SelectableTokenListContainer.js","modules/segments/TokenContracts.js","modules/event/EventFilterContainer.js","modules/event/EventLoader.js","modules/event/EventLoaderContainer.js","modules/common/TxHashDisplay.js","modules/event/TransferEvent.js","modules/event/TransferEventContainer.js","modules/event/TransferEventsList.js","modules/event/TransferEventsListContainer.js","modules/segments/Events.js","modules/segments/EventsContainer.js","modules/web3/NetworkWarning.js","modules/web3/NetworkWarningController.js","modules/layout/LayoutContainer.js","modules/common/ModalLoader.js","modules/token/TokenLoaderGate.js","modules/web3/web3Gate.js","modules/web3/web3GateContainer.js","App.js","registerServiceWorker.js","index.js"],"names":["BALANCE_STATES","VIRGIN","LOADING","INITIALIZED","HYDRATED_WHILE_LOADING","SET_BALANCE","SET_BALANCE_STATE","CREATE_BALANCE_ENTRY","createBalanceEntry","balanceId","addressId","tokenId","type","payload","DELETE_BALANCE_ENTRY","CHANGE_BALANCE_FILTER_PROPS","setBalanceFilterString","filterString","dispatch","getState","searchString","toLowerCase","balanceIds","balance","allIds","length","filter","balanceEntry","byId","token","tokens","name","includes","symbol","address","matchedBalanceIds","setBalanceByAddressAndToken","buildBalanceId","undefined","setBalance","balanceStateChanged","balanceState","setBalanceState","reloadBalance","loadTokenBalance","clearTokenBalances","Object","values","forEach","ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL","buildAddressContractEventId","ADD_EVENTS","CHANGE_TRANSFEREVENTLIST_PAGE","CREATE_ACE_ENTRY","createAceEntry","ACE_ENTRIES_LOADING_CHANGE","aceEntriesLoadingChange","addressIds","isLoading","loadingFromBlock","loadingToBlock","loadingCurrentBlock","aceIds","map","ACE_ENTRIES_BLOCK_RANGE_CHANGE","aceEntriesBlockRangeChange","fromBlock","toBlock","SET_ACE_ENTRY_EVENT_IDS","CHANGE_EVENT_SCAN_PROPS","aceEntriesLoadingChangeWrapper","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","aceId","events","aceById","stop","this","_x","_x2","apply","arguments","addEventsThunk","aceIdsToSort","watchedAddressIds","addresses","transferEvent","_transferEvent$args","args","_from","_to","aceFromId","push","aceToId","addEvents","eventsById","eventIds","slice","sort","eventA","eventB","blockNumber","setAceEntryEventIds","buildEventId","event","transactionHash","logIndex","TOKEN_LIST_STATES","CHANGE_TOKEN_LIST_STATE","tokenListStateChanged","tokenListState","listState","ADD_TOKEN","addToken","tokenID","ADD_VOLATILE_TOKEN","IS_LOADING_TOKEN","loadingTokenChanged","SET_TOKEN_SUPPLY","IS_LOADING_SUPPLY","SET_TOKEN_CONTRACT_INSTANCE","setTokenContractInstance","contractInstance","SET_TOKEN_LOADING_PROMISE","CHANGE_SELECTOR_TOKENID","changeSelectorTokenId","selectedTokenId","CLEAR_TOKEN_LIST","clearTokenList","CHANGE_VALID_TOKEN_COUNT","CHANGE_FILTER_PROPS","RESET_DISPLAY_COUNT","CHANGE_TOKEN_TRACKING","changeTokenTracking","doTrack","CHANGE_TOKEN_LIST_PAGE","changeTokenListPage","activePage","setFilterProps","filterProps","showOnlyTracked","oldFilterString","oldShowOnlyTracked","filterIsActive","tokenIds","trackedIds","matchedTokenIds","changeFilterProps","mapListToken","listToken","id","decimals","Math","pow","description","website","imageUrl","supply","loading","instantiateTokenContract","loadingPromise","Promise","_ref2","_callee2","resolve","reject","web3","ERC20Contract","_context2","web3Instance","contract","abi","erc20ABI","setProvider","currentProvider","at","sent","_x3","_x4","setTokenLoadingPromise","loadMultiTokenBalances","tokenIDs","_ref4","_callee5","_context5","_ref5","_callee4","volatileToken","_context4","verifyContractInstance","volatileById","balanceOf","_x9","_x7","_x8","_callee8","_context9","abrupt","LISTSTATE_INITIAL","total","displayCount","TOKENS_BY_ID_INITIAL","ALL_TOKENS_INITIAL","VOLATILE_TOKENS_BY_ID_INITIAL","addTokenId","state","action","objectSpread","defineProperty","TRACKED_TOKENS_INITIAL","getWeb3","window","addEventListener","myWeb3","ethereum","Web3","console","log","error","promisify","syncGetters","db","eth","net","personal","shh","version","keys","group","method","indexOf","value","callbackToResolve","WEB3_STATES","UNINITIALIZED","ERROR","ETH_ENABLE_STATES","REJECTED","WAITING","GRANTED","SET_WEB3_STATE","setWeb3State","SET_ETH_ENABLE_STATE","setEthEnableState","ethEnableState","SET_WEB3INSTANCE","setWeb3Instance","SET_ENS","setENS","ens","SET_CURRENT_BLOCK","setCurrentBlock","block","SET_NETWORK","setNetwork","previousId","SET_NODE_VERSION","setNodeVersion","nodeVersion","SET_BLOCK_FILTER","setBlockFilter","blockFilter","stopBlockFilter","stopWatching","result","getNetworkName","networkId","network","SELECTOR_INITIAL","selctedTokenId","combineReducers","count","changeValidTokenCount","resetDisplayCount","tokenListPageChanged","addTokenEntry","setTokenSupply","loadingSupplyChanged","newEventIds","transferEventId","warn","concat","addTransferEvents","trackedIndex","selector","updateObject","oldObject","newValues","assign","WEB3_INITIAL","number","timestamp","ADDRESS_TYPE_EXTERNAL","ADDRESS_TYPE_OWNED","ADDRESS_BALANCES_STATES","CHANGE_ADDRESS_BALANCES_STATE","ADD_ADDRESS","REMOVE_ADDRESS","CHANGE_ADDRESS_TYPE","changeAddressType","newType","batchGetBalances","startIndex","recursionCount","diff","index","performance","now","requestAnimationFrame","addressBalancesState","addressBalancesStateChanged","addNewAddress","ensName","addAddress","CHANGE_SELECTOR_ADDRESSID","changeSelectorAddressId","selectedAddressId","ADDRESS_BY_ID_INITIAL","ALL_ADDRESSES_INITIAL","balancesState","addAddressEntry","newState","removeAddressEntry","addressEntry","changeAddressBalancesState","addAddressId","entryId","removeAddressId","BALANCE_BY_ID_INITIAL","ALL_BALANCES_INITIAL","POSITIVE_BALANCES_INITIAL","BALANCE_LISTSTATE_INITIAL","BigNumber","deleteBalanceEntry","splice","positiveIds","isZero","entry","greaterThan","changeBalanceFilterProps","EVENT_BY_ID_INITIAL","ALL_EVENTS_INITIAL","currentChunk","maxChunks","addEventIds","acesId","firstBlock","lastBlock","aceEntry","min","max","transferEventListPageChanged","_payload$props","props","changeEventScanProps","resetPager","SHOW_MODAL","HIDE_MODAL","MODAL_INITIAL","modalType","modalProps","addressesTransform","createTransform","inboundState","outboundState","newAddressState","whitelist","tokensConfig","key","storage","transforms","reducer","persistReducer","modal","showModal","rootConfig","blacklist","persistedReducer","logger","createLogger","TestModal","closeModal","react_default","createElement","Modal","open","onClose","Header","Content","Description","defaultProps","TransferForm","onValidSubmit","fromAddress","tokenName","tokenSymbol","tokenBalance","etherBalance","gasCosts","errorLabel","Label","color","pointing","addValidationRule","isAddress","bnValue","toBigNumber","bnMax","lessThanOrEqualTo","err","size","closeIcon","formsy_semantic_ui_react_lib","noValidate","Segment","Grid","columns","Row","Column","width","List","Item","toFixed","Group","placeholder","required","instantValidation","validations","validationErrors","isEthereumAddress","isDefaultRequiredValue","label","labelPosition","isNumeric","isLessThanOrEqual","readOnly","Button","content","TransferFormContainer","context","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","formData","alert","JSON","stringify","amount","toAddressValid","amountValid","rateValid","_this$props","transferForm_TransferForm","Component","MODAL_COMPONENTS","TEST_MODAL","TRANSFER_FORM_CONTAINER","connect","ownProps","tokenBalanceId","dividedBy","transferToken","_ref7","_callee7","_context8","_x15","_x16","ModalRoot","SpecificModal","Balance","numDecimals","trigger","Popup","dp","AddressDisplay","BalanceItemDetail","url","Table","Cell","Link","to","common_AddressDisplay","balance_Balance","circular","icon","onClick","BalanceItemDetailContainer","balance_BalanceItemDetail","addressType","openTransferModal","BalanceItem","tableBody","expanded","tokenBalances","tokenEventsLinkOptions","toggleCollapse","eventLink","tableHeader","HeaderCell","Statistic","Value","Body","balance_BalanceItemDetailContainer","compact","BalanceItemContainer","bind","assertThisInitialized","_this2","setState","balance_BalanceItem","_","reduce","sum","plus","pathname","BalancesList","entries","balancesByToken","balance_BalanceItemContainer","TokenListFilter","handleChange","clearFilter","Icon","link","Input","onChange","fluid","TokenListFilterContainer","e","setFilterString","token_TokenListFilter","displayed","target","ScreenHeader","title","as","inverted","textAlign","style","marginTop","Overview","body","hasAccounts","balance_BalancesList","Message","Fragment","screens_ScreenHeader","token_TokenListFilterContainer","Divider","OverviewContainer","segments_Overview","balanceEntries","groupBy","Web3Info","gitHub","srcUrl","href","rel","Web3Container","apiVersion","api","web3Info","Sidebar","Menu","vertical","header","NavLink","AddressRow","iconName","popupContent","removeButton","handleRemove","collapsing","AddressContainer","removeAddress","resumedAfterRehydrate","checkResumeLoading","newProps","resumeGetBalances","progressCurrent","address_AddressRow","PureComponent","progressTotal","QueryAddressForm","handleSubmit","disabled","Form","onSubmit","inline","addressStates","ADDRESS_RESOLVING","ADDRESS_VALID","ADDRESS_INVALID","QueryAddressFormContainer","_Component","input","addressState","validAddress","resolvedAddress","test","lookup","t0","_this$state","inherits","createClass","address_QueryAddressForm","AddressList","ownTable","watchTable","ethEnable","waitingGrant","ownAddressIds","basic","selectable","address_AddressContainer","primary","watchAddressIds","dividing","address_QueryAddressFormContainer","AddressListContainer","updateWeb3Accounts","requestEthEnable","checkAccountTimer","address_AddressList","initAccounts","clearInterval","isMetaMask","setInterval","getAccounts","accounts","changeOwnAddresses","addressesById","newAccounts","account","existingAddress","enable","_x5","_x6","Accounts","address_AddressListContainer","SelectableToken","checked","Checkbox","SelectableTokenContainer","data","token_SelectableToken","tokenAddress","tokenTracked","tracked","changeTokenTrackingThunk","SelectableTokenList","tokenList","celled","token_SelectableTokenContainer","negative","items","SelectableTokenListContainer","handleShowOnlyTrackedChange","handlePaginationChange","handleLoadTokens","setShowTracked","setTokenListPage","pager","totalPages","Container","Pagination","onPageChange","verticalAlign","divided","toggle","Dropdown","text","token_SelectableTokenList","numVisibleTokens","ceil","sliceStart","TokenContracts","info","token_SelectableTokenListContainer","EventFilterContainer","tokenOptions","onTokenSelect","addressOptions","onAddressSelect","Field","search","selection","options","b","EventLoader","resultCount","resultFromBlock","resultToBlock","onLoadMore","canLoadMore","button","warning","EventLoaderContainer","loadMoreEvents","checkEventsLoaded","rangeEnd","currentBlock","rangeStart","loadTokenTransferEvents","resultFromBlockDate","event_EventLoader","hasAceEntry","Boolean","_ref6","_callee6","chunkSize","maxEvents","numEvents","_loop","_context7","currentFromBlock","currentToBlock","transferEventsFrom","transferEventsTo","eventPromises","loggedEvents","foundEvents","_context6","Transfer","get","all","delegateYield","_x10","_x11","TxHashDisplay","txHash","shortHash","TRANSFER_EVENT_TYPES","TransferEvent","from","fromENS","toENS","quantity","positive","rowSpan","common_TxHashDisplay","TransferEventContainer","event_TransferEvent","rawEvent","_value","TransferEventsList","colSpan","transferEventIds","event_TransferEventContainer","TransferEventsListContainer","setTransferEventListPage","aceEventIds","event_TransferEventsList","changeTransferEventListPage","Events","event_EventFilterContainer","event_EventLoaderContainer","event_TransferEventsListContainer","EventsContainer","mapRouteParamsToState","segments_Events","match","params","setSelectedToken","setSelectedAddress","NetworkWarning","networkName","NetworkWarningController","web3_NetworkWarning","LayoutContainer","padded","web3_NetworkWarningController","segments_Sidebar","Switch","Route","exact","path","component","location","web3Container","ModalLoader","TokenLoaderGate","tokenListUrl","loadTokenList","Children","only","children","common_ModalLoader","response","jsonTokens","allTokenIds","existingTrackedTokens","fetch","json","toUpperCase","Web3Gate","onRetry","Web3GateContainer","initialize","web3Gate","_callee3","networkIdString","networkID","_context3","getNodePromise","getNetworkPromise","parseInt","Ens","provider","getBlockPromise","watch","_ref3","blockHash","_block","oldNetworkId","_network","store","createStore","compose","applyMiddleware","thunk","persistor","persistStore","configureStore","App","es","integration_react","web3GateContainer","token_TokenLoaderGate","BrowserRouter","modal_ModalRoot","layout_LayoutContainer","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","src_App","document","getElementById","URL","process","origin","status","headers","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.d74b41da.chunk.js","sourcesContent":["import {loadTokenBalance} from '../token/tokenActions'\n\nexport const BALANCE_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    HYDRATED_WHILE_LOADING: 'hydrated_while_loading'\n}\n\nexport const SET_BALANCE = 'SET_BALANCE'\nexport function setBalance(balanceId, balance) {\n    return {\n        type: SET_BALANCE,\n        payload: {\n            balanceId,\n            balance,\n        }\n    }\n}\n\nexport const SET_BALANCE_STATE = 'SET_BALANCE_STATE'\nexport function setBalanceState(balanceId, balanceState) {\n    return {\n        type: SET_BALANCE_STATE,\n        payload: {\n            balanceId,\n            balanceState,\n        }\n    }\n}\n\nexport const CREATE_BALANCE_ENTRY = 'CREATE_BALANCE_ENTRY'\nexport function createBalanceEntry(balanceId, addressId, tokenId) {\n    return {\n        type: CREATE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const DELETE_BALANCE_ENTRY = 'DELETE_BALANCE_ENTRY'\nexport function deleteBalanceEntry(balanceId) {\n    return {\n        type: DELETE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n        }\n    }\n}\n\nexport const CHANGE_BALANCE_FILTER_PROPS = 'CHANGE_BALANCE_FILTER_PROPS'\nexport function changeBalanceFilterProps(filter, matchedBalanceIds) {\n    return {\n        type: CHANGE_BALANCE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedBalanceIds\n        }\n    }\n}\n\nexport function setBalanceFilterString(filterString) {\n    return (dispatch, getState) => {\n        // Filter balance list based on filterstring.\n        const searchString = filterString.toLowerCase()\n\n        // Default: Show all balances\n        let balanceIds = getState().balance.allIds\n\n        // If a searchstring is provided, filter balanceIds\n        if (searchString.length) {\n            balanceIds = balanceIds.filter(balanceId => {\n                const balanceEntry = getState().balance.byId[balanceId]\n                const token = getState().tokens.byId[balanceEntry.tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n        dispatch(changeBalanceFilterProps(searchString, balanceIds))\n    }\n}\n\n\nexport function setBalanceByAddressAndToken(addressId, tokenId, balance) {\n    return(dispatch, getState) => {\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set balance\n        dispatch(setBalance(balanceId, balance))\n    }\n}\n\nexport function balanceStateChanged(tokenId, addressId, balanceState) {\n    return(dispatch, getState) => {\n        // obtain balanceID\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set loading state\n        dispatch(setBalanceState(balanceId, balanceState))\n    }\n}\n\nexport function reloadBalance(balanceId) {\n    return (dispatch, getState) => {\n        const balance = getState().balance.byId[balanceId]\n        dispatch(loadTokenBalance(balance.tokenId, balance.addressId))\n    }\n}\n\nexport function clearTokenBalances(tokenId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.tokenId === tokenId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function buildBalanceId(addressId, tokenId) {\n    return (addressId + '-' + tokenId)\n}\n","import {\n    ACE_ENTRIES_BLOCK_RANGE_CHANGE, ACE_ENTRIES_LOADING_CHANGE, ADD_EVENTS, buildEventId,\n    CREATE_ACE_ENTRY, SET_ACE_ENTRY_EVENT_IDS\n} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\n/*\nPurpose: Store list of transfer events involving certain address\nand certain token contract.\nKeeps track of the block range already queried from web3 (firstBlock, lastBlock),\nso i can easily extend checked block range or refresh if outdated.\n */\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {\n    0xabc123-12: {\n        acesId: '0xabc123-12',    // <addressId>-<tokenId>\n        addressId: '0xabc123',\n        tokenId: 12\n        loading: false,\n        firstBlock: 0,\n        lastBlock: 0,\n        loadingFromBlock: 0,\n        loadingToBlock: 0,\n        loadingCurrentBlock: 0,\n        eventIds: [],\n    },\n}\n*/\n\nfunction clearAceEntries() {\n    return ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL\n}\n\nfunction createAceEntry(state, action) {\n    const {payload} = action\n    const {addressId, tokenId} = payload\n    const acesId = buildAddressContractEventId(addressId, tokenId)\n    return {\n        ...state,\n        [acesId] : {\n            acesId,\n            addressId,\n            tokenId,\n            isLoading: false,\n            firstBlock: 0,\n            lastBlock: 0,\n            eventIds: [],\n            loadingFromBlock: 0,\n            loadingToBlock: 0,\n            loadingCurrentBlock: 0,\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new events to the address, if it is \"to\" or \"from\"\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    const newState = {...state}\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        const {_from, _to} = transferEvent.args\n        const aceFromId = buildAddressContractEventId(_from, tokenId)\n        const aceToId = buildAddressContractEventId(_to, tokenId)\n        const aceIds = [aceToId, aceFromId]\n        aceIds.forEach(aceId => {\n            // only add event if an according aceEntry is existing!\n            if (newState[aceId]) {\n                // prevent duplicate eventID entries\n                    if (newState[aceId].eventIds.includes(transferEventId)) {\n                        console.warn(\"Ignoring duplicate event \" + transferEventId)\n                        return\n                    }\n                newState[aceId].eventIds = newState[aceId].eventIds.concat(transferEventId)\n            }\n        })\n    })\n    return newState\n}\n\nfunction aceEntriesLoadingChange(state, action) {\n    const {payload} = action\n    const {aceIds, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            newState[aceId] = {\n                ...aceEntry,\n                isLoading,\n                loadingFromBlock,\n                loadingToBlock,\n                loadingCurrentBlock,\n            }\n        }\n    })\n    return newState\n}\n\nfunction aceEntriesBlockRangeChange(state, action) {\n    const {payload} = action\n    const {aceIds, fromBlock, toBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            // update checked block range\n            if (aceEntry.firstBlock === 0) {\n                aceEntry.firstBlock = fromBlock\n            } else {\n                aceEntry.firstBlock = Math.min(fromBlock, aceEntry.firstBlock)\n            }\n            if (aceEntry.lastBlock === 0) {\n                aceEntry.lastBlock = toBlock\n            } else {\n                aceEntry.lastBlock = Math.max(toBlock, aceEntry.lastBlock)\n            }\n            newState[aceId] = aceEntry\n        }\n    })\n    return newState\n}\n\nfunction setAceEntryEventIds(state, action) {\n    const {payload} = action\n    const {aceId, eventIds} = payload\n\n    return {\n        ...state,\n        [aceId]: {\n            ...state[aceId],\n            eventIds\n        }\n    }\n}\n\nexport const addressContractEventsByIdReducer = (state=ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_ACE_ENTRY:\n            return createAceEntry(state, action)\n        case ADD_EVENTS:\n            return addTransferEvents(state, action)\n        case ACE_ENTRIES_LOADING_CHANGE:\n            return aceEntriesLoadingChange(state, action)\n        case ACE_ENTRIES_BLOCK_RANGE_CHANGE:\n            return aceEntriesBlockRangeChange(state, action)\n        case SET_ACE_ENTRY_EVENT_IDS:\n            return setAceEntryEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearAceEntries()\n        default:\n    }\n    return state;\n}\n\n\nexport function buildAddressContractEventId(addressId, tokenId) {\n    return ''+addressId.toLowerCase()+'-'+tokenId\n}\n","import {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\n\nexport const ADD_EVENTS = 'ADD_EVENTS'\nexport function addEvents(events, tokenId) {\n    return {\n        type: ADD_EVENTS,\n        payload: {\n            events,\n            tokenId,\n        }\n    }\n}\n\nexport const CHANGE_TRANSFEREVENTLIST_PAGE = 'CHANGE_TRANSFEREVENTLIST_PAGE'\nexport function changeTransferEventListPage(activePage) {\n    return {\n        type: CHANGE_TRANSFEREVENTLIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\n\nexport const CREATE_ACE_ENTRY = 'CREATE_ACE_ENTRY'\nexport function createAceEntry(addressId, tokenId) {\n    return {\n        type: CREATE_ACE_ENTRY,\n        payload: {\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const ACE_ENTRIES_LOADING_CHANGE = 'ACE_ENTRIES_LOADING_CHANGE'\nexport function aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_LOADING_CHANGE,\n        payload: {\n            aceIds,\n            isLoading,\n            loadingFromBlock,\n            loadingToBlock,\n            loadingCurrentBlock,\n        }\n    }\n}\n\nexport const ACE_ENTRIES_BLOCK_RANGE_CHANGE = 'ACE_ENTRIES_BLOCK_RANGE_CHANGE'\nexport function aceEntriesBlockRangeChange(addressIds, tokenId, fromBlock, toBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_BLOCK_RANGE_CHANGE,\n        payload: {\n            aceIds,\n            fromBlock,\n            toBlock,\n        }\n    }\n}\n\nexport const SET_ACE_ENTRY_EVENT_IDS = 'SET_ACE_ENTRY_EVENT_IDS'\nexport function setAceEntryEventIds(aceId, eventIds) {\n    return {\n        type: SET_ACE_ENTRY_EVENT_IDS,\n        payload: {\n            aceId,\n            eventIds\n        }\n    }\n}\n\nexport const CHANGE_EVENT_SCAN_PROPS = 'CHANGE_EVENT_SCAN_PROPS'\nexport function changeEventScanProps(props) {\n    return {\n        type: CHANGE_EVENT_SCAN_PROPS,\n        payload: {\n            props,\n        }\n    }\n}\n\nexport function aceEntriesLoadingChangeWrapper(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    return async (dispatch, getState) => {\n        addressIds.forEach(addressId => {\n            const aceId = buildAddressContractEventId(addressId, tokenId)\n            if (getState().events.aceById[aceId] === undefined) {\n                // create a new entry for this token and address\n                dispatch(createAceEntry(addressId, tokenId))\n            }\n        })\n        dispatch(aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock))\n    }\n}\n\nexport function addEventsThunk(events, tokenId, fromBlock, toBlock) {\n    return (dispatch, getState) => {\n        // Make sure that there are AddressContractEvent entries\n        // for all events and to/from addresses\n        let aceIdsToSort = []\n        const watchedAddressIds = getState().addresses.allIds\n        events.forEach(transferEvent => {\n            const {_from, _to} = transferEvent.args\n            // TODO: Collect all new entries and just dispatch one batch event\n            if (watchedAddressIds.includes(_from.toLowerCase())) {\n                const aceFromId = buildAddressContractEventId(_from, tokenId)\n                aceIdsToSort.push(aceFromId)\n                if (getState().events.aceById[aceFromId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_from, tokenId))\n                }\n            }\n            if (watchedAddressIds.includes(_to.toLowerCase())) {\n                const aceToId = buildAddressContractEventId(_to, tokenId)\n                aceIdsToSort.push(aceToId)\n                if (getState().events.aceById[aceToId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_to, tokenId))\n                }\n            }\n        })\n        // now it's safe to do the actual dispatch of addEvents\n        dispatch(addEvents(events, tokenId, fromBlock, toBlock))\n        // finally re-sort eventIds of all changed aceIds\n        dispatch(sortEventsThunk(aceIdsToSort))\n    }\n}\n\nexport function sortEventsThunk(aceIds) {\n    return (dispatch, getState) => {\n        const eventsById = getState().events.byId\n        // sort eventIds of provided ace entries based on the blockheight they appeared at\n        aceIds.forEach(aceId => {\n            // sort eventIds based on blockheight\n            // use .slice() to work on a copy of the eventIds array, otherwise i would mutate current state...\n            let eventIds = getState().events.aceById[aceId].eventIds.slice().sort((eventA, eventB) => {\n                return eventsById[eventB].transferEvent.blockNumber - eventsById[eventA].transferEvent.blockNumber\n            })\n            // set new eventIds array via dedicated action\n            dispatch(setAceEntryEventIds(aceId, eventIds))\n        })\n    }\n}\n\nexport function buildEventId(event) {\n    return '' + event.transactionHash + '-' + event.logIndex\n}\n","import contract from 'truffle-contract'\nimport erc20ABI from 'human-standard-token-abi'\nimport {\n    BALANCE_STATES,\n    balanceStateChanged,\n    clearTokenBalances,\n    setBalanceByAddressAndToken\n} from '../balance/balanceActions'\nimport {\n    aceEntriesBlockRangeChange, aceEntriesLoadingChange, aceEntriesLoadingChangeWrapper,\n    addEventsThunk, changeEventScanProps\n} from '../event/eventActions'\n\nexport const TOKEN_LIST_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized'\n}\n\nexport const CHANGE_TOKEN_LIST_STATE = 'IS_LOADING_TOKEN_LIST'\nexport function tokenListStateChanged(tokenListState) {\n    return {\n        type: CHANGE_TOKEN_LIST_STATE,\n        payload: {\n            listState: tokenListState\n        }\n    }\n}\n\nexport const ADD_TOKEN = 'ADD_TOKEN'\nexport function addToken(tokenID, token) {\n    return {\n        type: ADD_TOKEN,\n        payload: {\n            tokenID,\n            token\n        }\n    }\n}\n\nexport const ADD_VOLATILE_TOKEN = 'ADD_VOLATILE_TOKEN'\nexport function addVolatileToken(tokenID) {\n    return {\n        type: ADD_VOLATILE_TOKEN,\n        payload: {\n            tokenID,\n        }\n    }\n}\n\n\nexport const IS_LOADING_TOKEN = 'IS_LOADING_TOKEN'\nexport function loadingTokenChanged(tokenID, isLoading) {\n    return {\n        type: IS_LOADING_TOKEN,\n        payload: {\n            tokenID,\n            isLoading\n        }\n    }\n}\n\nexport const SET_TOKEN_SUPPLY = 'SET_TOKEN_SUPPLY'\nexport function setTokenSupply(tokenID, supply) {\n    return {\n        type: SET_TOKEN_SUPPLY,\n        payload: {\n            tokenID,\n            supply,\n        }\n    }\n}\n\nexport const IS_LOADING_SUPPLY = 'IS_LOADING_SUPPLY'\nexport function loadingSupplyChanged(tokenID, isLoading) {\n    return {\n        type: IS_LOADING_SUPPLY,\n        payload: {\n            tokenID,\n            isLoading\n        }\n    }\n}\n\nexport const SET_TOKEN_CONTRACT_INSTANCE = 'SET_TOKEN_CONTRACT_INSTANCE'\nexport function setTokenContractInstance(tokenID, contractInstance) {\n    return {\n        type: SET_TOKEN_CONTRACT_INSTANCE,\n        payload: {\n            tokenID,\n            contractInstance\n        }\n    }\n}\n\nexport const SET_TOKEN_LOADING_PROMISE = 'SET_TOKEN_LOADING_PROMISE'\nexport function setTokenLoadingPromise(tokenID, loadingPromise) {\n    return {\n        type: SET_TOKEN_LOADING_PROMISE,\n        payload: {\n            tokenID,\n            loadingPromise\n        }\n    }\n}\n\nexport const CHANGE_SELECTOR_TOKENID = 'CHANGE_SELECTOR_TOKENID'\nexport function changeSelectorTokenId(selectedTokenId) {\n    return {\n        type: CHANGE_SELECTOR_TOKENID,\n        payload: {\n            selectedTokenId,\n        }\n    }\n}\n\nexport const CLEAR_TOKEN_LIST = 'CLEAR_TOKEN_LIST'\nexport function clearTokenList() {\n    return {\n        type: CLEAR_TOKEN_LIST,\n    }\n}\n\nexport const CHANGE_VALID_TOKEN_COUNT = 'CHANGE_VALID_TOKEN_COUNT'\nexport function changeValidTokenCount(count) {\n    return {\n        type: CHANGE_VALID_TOKEN_COUNT,\n        payload: {\n            count\n        }\n    }\n}\n\nexport const CHANGE_FILTER_PROPS = 'CHANGE_FILTER_PROPS'\nexport function changeFilterProps(filter, matchedTokenIds, showOnlyTracked, filterIsActive) {\n    return {\n        type: CHANGE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedTokenIds,\n            showOnlyTracked,\n            filterIsActive,\n        }\n    }\n}\n\nexport const RESET_DISPLAY_COUNT = 'RESET_DISPLAY_COUNT'\nexport function resetDisplayCount() {\n    return {\n        type: RESET_DISPLAY_COUNT,\n    }\n}\n\nexport const CHANGE_TOKEN_TRACKING = 'CHANGE_TOKEN_TRACKING'\nexport function changeTokenTracking(tokenId, doTrack) {\n    return {\n        type: CHANGE_TOKEN_TRACKING,\n        payload: {\n            tokenId,\n            doTrack,\n        }\n    }\n}\n\nexport const CHANGE_TOKEN_LIST_PAGE = 'CHANGE_TOKENLIST_PAGE'\nexport function changeTokenListPage(activePage) {\n    return {\n        type: CHANGE_TOKEN_LIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\nexport function changeTokenTrackingThunk(tokenId, doTrack) {\n    return (dispatch, getState) => {\n        dispatch(changeTokenTracking(tokenId, doTrack))\n        // if I start tracking a token, start getting balances right away\n        if (doTrack) {\n            getState().addresses.allIds.forEach(addressId => {\n                    dispatch(loadTokenBalance(tokenId, addressId))\n                }\n            )\n        } else {\n            // If I stop tracking a token, also clear all balances for it\n            dispatch(clearTokenBalances(tokenId))\n        }\n    }\n}\n\nexport function setFilterProps(filterProps) {\n    return (dispatch, getState) => {\n\n        let {filterString, showOnlyTracked} = filterProps\n        const oldFilterString = getState().tokens.listState.filter.toLowerCase()\n        const oldShowOnlyTracked = getState().tokens.listState.showOnlyTracked\n        if (filterString === undefined) {\n            filterString = oldFilterString\n        }\n        if (showOnlyTracked === undefined) {\n            showOnlyTracked = oldShowOnlyTracked\n        }\n\n        // Filter token list based on filterstring and show tracked only/all\n        const searchString = filterString.toLowerCase()\n        const filterIsActive = ((searchString.length > 0) || showOnlyTracked)\n        const filterChanged = ((oldFilterString !== searchString) || (oldShowOnlyTracked !== showOnlyTracked))\n\n        if (filterChanged) {\n            // in case filter props changed, reset the number of displayed tokens to it's default value and set\n            // default page\n            dispatch(resetDisplayCount())\n            dispatch(changeTokenListPage(1))\n        }\n\n        // start with all tokens\n        let tokenIds = getState().tokens.allIds\n\n        // filter by tracked status\n        if (showOnlyTracked) {\n            // get all tokens that are being tracked\n            tokenIds = getState().tokens.trackedIds\n        }\n\n        // filter by search string\n        if (searchString.length) {\n            tokenIds = tokenIds.filter(tokenId => {\n                const token = getState().tokens.byId[tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n\n        dispatch(changeFilterProps(searchString, tokenIds, showOnlyTracked, filterIsActive))\n    }\n}\n\n\nexport function loadTokenList(url) {\n    return async (dispatch, getState) => {\n        // clear existing tokens\n        dispatch(clearTokenList())\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.LOADING))\n        // fetch json file from url\n        const response = await fetch(url)\n        // parse json\n        const jsonTokens = await response.json()\n        // sort token list alphabetically\n        jsonTokens.sort((a, b) => ( (a.name.toUpperCase() < b.name.toUpperCase()) ? -1 : 1))\n\n        // set total number of tokens (for loading progress)\n        dispatch(changeValidTokenCount(jsonTokens.length))\n\n        // Check if there is currently a filter set\n        const filterIsActive = (getState().tokens.listState.filterIsActive)\n        // add tokens\n        jsonTokens.forEach((listToken) => {\n            const token = mapListToken(listToken)\n            dispatch(addToken(token.address, token))\n        })\n        // if there is already a filter set, re-evaluate the filter results\n        if (filterIsActive) {\n            dispatch(setFilterProps({}))\n        }\n\n        // Crosscheck tokens with currently tracked tokens\n        const allTokenIds = getState().tokens.allIds\n        const existingTrackedTokens = getState().tokens.trackedIds.filter(tokenId => {\n            return (allTokenIds.indexOf(tokenId) > -1)\n        })\n        // load balances for tracked tokens\n        if (existingTrackedTokens.length) {\n            getState().addresses.allIds.forEach(addressId => {\n                    dispatch(loadMultiTokenBalances(existingTrackedTokens, addressId))\n                }\n            )\n        }\n        // stop tracking non-existing tokens\n        const trackedTokensToRemove = getState().tokens.trackedIds.filter(tokenId => {\n            return (existingTrackedTokens.indexOf(tokenId) === -1)\n        })\n        trackedTokensToRemove.forEach(tokenId => {\n            dispatch(changeTokenTracking(tokenId, false))\n        })\n\n        // Finished loading\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.INITIALIZED))\n    }\n}\n\nfunction mapListToken(listToken) {\n    return {\n        id: listToken['address'],\n        address: listToken['address'],\n        symbol: listToken['symbol'],\n        decimals: Math.pow(10, listToken['decimals']),\n        name: listToken['name'],\n        description: null,\n        website: listToken['website'],\n        imageUrl: null,\n\n        supply: {\n            loading: false,\n            supply: undefined\n        },\n        balance: undefined,\n        eventIds: [],\n        loading: false,\n    }\n}\n\nexport function instantiateTokenContract(tokenID) {\n    return (dispatch, getState) => {\n        // create promise that resolves as soon as the contract is instantiated.\n        const loadingPromise = new Promise(\n            async function(resolve, reject) {\n                // indicate we are loading the token\n                dispatch(loadingTokenChanged(tokenID, true))\n                // create token contract instance and store it for later use in state\n                const token = getState().tokens.byId[tokenID]\n                const {web3} = getState().web3Instance\n                const ERC20Contract = contract({abi: erc20ABI})\n                ERC20Contract.setProvider(web3.currentProvider)\n                const contractInstance = await ERC20Contract.at(token.address)\n                dispatch(setTokenContractInstance(tokenID, contractInstance))\n                // indicate we finished loading the token\n                dispatch(loadingTokenChanged(tokenID, false))\n                // finally resolve loading promise\n                resolve()\n            }\n        )\n        dispatch(setTokenLoadingPromise(tokenID, loadingPromise))\n    }\n}\n\nexport function loadTokenSupply(tokenID) {\n    return async (dispatch, getState) => {\n        dispatch(loadingSupplyChanged(tokenID, true))\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const volatileToken = getState().tokens.volatileById[tokenID]\n        // obtain token contract instance from state\n        const contractInstance = volatileToken.contractInstance\n        const supply = await contractInstance.totalSupply()\n        dispatch(setTokenSupply(tokenID, supply))\n        dispatch(loadingSupplyChanged(tokenID, false))\n    }\n}\n\nexport function loadTokenBalance(tokenID, addressId) {\n    return loadMultiTokenBalances([tokenID], addressId)\n}\n\nexport function loadMultiTokenBalances(tokenIDs, addressId) {\n    return async (dispatch, getState) => {\n        tokenIDs.forEach(async tokenId => {\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.LOADING))\n            await verifyContractInstance(tokenId, dispatch, getState)\n            const volatileToken = getState().tokens.volatileById[tokenId]\n            const address = getState().addresses.byId[addressId].address\n            const balance = await volatileToken.contractInstance.balanceOf(address)\n            dispatch(setBalanceByAddressAndToken(addressId, tokenId, balance))\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.INITIALIZED))\n        })\n    }\n}\n\nexport function loadTokenTransferEvents(tokenID, fromBlock, toBlock, addresses) {\n    return async (dispatch, getState) => {\n        const chunkSize = 100\n        const maxChunks = 100\n        const maxEvents = 50\n\n        let currentChunk = 1\n        let numEvents = 0\n\n        // if no from/toblock are provided, use default values\n        if (fromBlock === 0)\n            fromBlock = getState().web3Instance.block.number - (chunkSize * maxChunks)\n        if (toBlock === 0)\n            toBlock = getState().web3Instance.block.number\n\n        dispatch(aceEntriesLoadingChangeWrapper(addresses, tokenID, true, fromBlock, toBlock, fromBlock))\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\n\n        while ((currentChunk <= maxChunks) && (numEvents <= maxEvents)) {\n            // calculate fromBlock for current chunk\n            let currentFromBlock = fromBlock + ((currentChunk-1) * chunkSize)\n            // calculate toBlock for current chunk\n            let currentToBlock = currentFromBlock + chunkSize\n\n            // update progress info\n            dispatch(changeEventScanProps({\n                tokenID,\n                addresses,\n                numEvents,\n                currentChunk,\n                maxEvents,\n                maxChunks,\n                fromBlock,\n                toBlock,\n                state: 'scanning'\n            }))\n\n            // obtain events for this chunk\n            // console.log(\"Calling 'Transfer' from \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\n            const transferEventsFrom = contractInstance.Transfer(\n                {\n                    // These are the standard ERC20 Transfer event fields\n                    _from: addresses,    // addresses sending token\n                    _to: null,      // addresses receiving token\n                },\n                {\n                    fromBlock: currentFromBlock,\n                    toBlock: currentToBlock,\n                }\n            )\n            //console.log(\"Calling 'Transfer' to \" + addresses + \", blockrange: \" + currentFromBlock + \" - \" + currentToBlock)\n            const transferEventsTo = contractInstance.Transfer(\n                {\n                    // These are the standard ERC20 Transfer event fields\n                    _from: null,    // addresses sending token\n                    _to: addresses,      // addresses receiving token\n                },\n                {\n                    fromBlock: currentFromBlock,\n                    toBlock: currentToBlock,\n                }\n            )\n\n            // Wrap this into promise and await it, otherwise loading:false action will be dispatched too early!\n            let eventPromises = []\n            eventPromises.push(new Promise((resolve, reject) => {\n                transferEventsFrom.get(function (error, events) {\n                    if (error) {\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\n                    } else {\n                        // console.log(\"Found \" + events.length + \" 'from' Events: \" + events)\n                        if (events.length) {\n                            dispatch(addEventsThunk(events, tokenID))\n                        }\n                        resolve(events.length)\n                    }\n                })\n            }))\n            eventPromises.push(new Promise((resolve, reject) => {\n                transferEventsTo.get(function (error, events) {\n                    if (error) {\n                        console.error(\"Error getting events for token \" + tokenID + \": \" + error)\n                        reject(\"Error getting events for token \" + tokenID + \": \" + error)\n                    } else {\n                        //console.log(\"Found \" + events.length + \" 'to' Events: \" + events)\n                        if (events.length) {\n                            dispatch(addEventsThunk(events, tokenID))\n                        }\n                        resolve(events.length)\n                    }\n                })\n            }))\n            // Wait till both promises are resolved and add up the found number of events.\n            const loggedEvents = await Promise.all(eventPromises)\n            const foundEvents = loggedEvents.reduce((a, b) => a + b, 0)\n\n            dispatch(aceEntriesBlockRangeChange(addresses, tokenID, currentFromBlock, currentToBlock))\n            // increment currentChunk\n            currentChunk++\n            // update numEvents with number of found events\n            numEvents += foundEvents\n        }\n\n        dispatch(aceEntriesLoadingChange(addresses, tokenID, false, 0, 0, 0))\n    }\n}\n\nasync function verifyContractInstance(tokenId, dispatch, getState) {\n    let volatileToken = getState().tokens.volatileById[tokenId]\n    if (volatileToken === undefined) {\n        // volatileToken is undefined if we rehydrated state from localstorage.\n        // Create an entry to continue\n        dispatch(addVolatileToken(tokenId))\n        volatileToken = getState().tokens.volatileById[tokenId]\n    }\n    if (volatileToken.loadingPromise) {\n        // token is already loading. Just return the promise.\n        return volatileToken.loadingPromise\n    }\n    else {\n        dispatch(instantiateTokenContract(tokenId))\n        // refresh token, as the loadingPromise has just been added to state\n        volatileToken = getState().tokens.volatileById[tokenId]\n        return volatileToken.loadingPromise\n    }\n}\n\nexport const TRANSACTION_STATES = {\n    IDLE: 'IDLE',\n    INITIALIZING: 'INITIALIZING',\n    WAITING_FOR_SIGNATURE: 'WAITING_FOR_SIGNATURE',\n    WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',\n    CONFIRMED: 'CONFIRMED',\n    FAILED: 'FAILED'\n}\n\nexport function transferToken(tokenID, tokenAmount, fromAddress, toAddress) {\n    return async (dispatch, getState) => {\n        /*\n            Commented out until doing implementation\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.INITIALIZING))\n\n        // obtain token contract instance\n        await verifyContractInstance(tokenID, dispatch, getState)\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\n        // TODO: check if eth balance is sufficient for required gas\n        // TODO: check if token balance is sufficient\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_SIGNATURE))\n        // TODO: initialize transfer\n\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_CONFIRMATION))\n\n        // finalize transfer\n        dispatch(changeTransactionState(TRANSACTION_STATES.CONFIRMED))\n\n         */\n    }\n}\n\nexport const CHANGE_TRANSACTION_STATE = 'CHANGE_TRANSACTION_STATE'\nexport function changeTransactionState(transactionState, message='') {\n    return {\n        type: CHANGE_TRANSACTION_STATE,\n        payload: {\n            transactionState,\n            message\n        }\n    }\n}\n","import {\n    CHANGE_FILTER_PROPS,\n    CHANGE_TOKEN_LIST_PAGE,\n    CHANGE_TOKEN_LIST_STATE,\n    CHANGE_VALID_TOKEN_COUNT, CLEAR_TOKEN_LIST,\n    RESET_DISPLAY_COUNT,\n    TOKEN_LIST_STATES\n} from '../tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    listState: TOKEN_LIST_STATES.VIRGIN,\n    total: 0,\n    filter: '',\n    matchedTokenIds: [],\n    displayCount: 10,\n    showOnlyTracked: false,\n    filterIsActive: false,\n    activePage: 1,\n}\n\nfunction clearTokenList(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount,\n        matchedTokenIds: LISTSTATE_INITIAL.matchedTokenIds,\n        activePage: LISTSTATE_INITIAL.activePage,\n        total: LISTSTATE_INITIAL.total,\n        listState: LISTSTATE_INITIAL.listState,\n    }\n}\n\nfunction resetDisplayCount(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount\n    }\n}\n\nfunction tokenListStateChanged(state, action) {\n    // very simple reducer, just set a new state\n    const {payload} = action\n    const {listState} = payload\n    return {\n        ...state,\n        listState\n    }\n}\n\nfunction changeValidTokenCount(state, action){\n    const {payload} = action\n    const {count} = payload\n    return {\n        ...state,\n        total: count\n    }\n}\n\nfunction changeFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedTokenIds, showOnlyTracked, filterIsActive} = payload\n    return {\n        ...state,\n        filter,\n        matchedTokenIds,\n        showOnlyTracked,\n        filterIsActive,\n    }\n}\n\nfunction tokenListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nexport const listStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_LIST_STATE:\n            return tokenListStateChanged(state, action)\n        case CHANGE_VALID_TOKEN_COUNT:\n            return changeValidTokenCount(state, action)\n        case CHANGE_FILTER_PROPS:\n            return changeFilterProps(state, action)\n        case RESET_DISPLAY_COUNT:\n            return resetDisplayCount(state)\n        case CHANGE_TOKEN_LIST_PAGE:\n            return tokenListPageChanged(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearTokenList(state)\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, CLEAR_TOKEN_LIST, IS_LOADING_SUPPLY, IS_LOADING_TOKEN,\n    SET_TOKEN_SUPPLY\n} from '../tokenActions'\nimport {ADD_EVENTS, buildEventId} from '../../event/eventActions'\n\nconst TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokensById() {\n    return TOKENS_BY_ID_INITIAL\n}\n\nfunction addTokenEntry(state, action) {\n    const {payload} = action\n    const {tokenID, token} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: token\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\nfunction loadingTokenChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loading: isLoading\n        }\n    }\n}\n\nfunction setTokenSupply(state, action) {\n    const {payload} = action\n    const {tokenID, supply} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                supply\n            }\n        }\n    }\n}\n\nfunction loadingSupplyChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                loading: isLoading\n            }\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new event to the according token contract\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenId]\n\n    let newEventIds = token.eventIds\n\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n\n        if (newEventIds.includes(transferEventId)) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newEventIds = newEventIds.concat(transferEventId)\n    })\n\n    return {\n        ...state,\n        [tokenId]: {\n            ...token,\n            eventIds: newEventIds\n        }\n    }\n}\n\nexport const tokensByIdReducer = (state = TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenEntry(state, action)\n        }\n        case IS_LOADING_TOKEN: {\n            return loadingTokenChanged(state, action)\n        }\n        case SET_TOKEN_SUPPLY: {\n            return setTokenSupply(state, action)\n        }\n        case IS_LOADING_SUPPLY: {\n            return loadingSupplyChanged(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokensById(state, action)\n        }\n        case ADD_EVENTS: {\n            return addTransferEvents(state, action)\n        }\n        default:\n            return state\n    }\n}\n","import {ADD_TOKEN, CLEAR_TOKEN_LIST} from '../tokenActions'\n\nconst ALL_TOKENS_INITIAL = []\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate token\n    if (state.indexOf(tokenID) === -1) {\n        // append the new token's ID to the list of all IDs\n        return state.concat(tokenID);\n    }\n    else {\n        // duplicate\n        return state\n    }\n}\n\nfunction clearAllTokens() {\n    return ALL_TOKENS_INITIAL\n}\n\nexport const allTokensReducer = (state=ALL_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllTokens(state, action)\n        }\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, ADD_VOLATILE_TOKEN, CLEAR_TOKEN_LIST,\n    SET_TOKEN_CONTRACT_INSTANCE,\n    SET_TOKEN_LOADING_PROMISE,\n} from '../tokenActions'\n\nconst VOLATILE_TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokens() {\n    return VOLATILE_TOKENS_BY_ID_INITIAL\n}\n\nfunction setTokenContractInstance(state, action) {\n    const {payload} = action\n    const {tokenID, contractInstance} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        [tokenID]: {\n            ...token,\n            contractInstance: contractInstance\n        }\n    }\n}\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: {\n                tokenID,\n            }\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\n\nfunction setTokenLoadingPromise(state, action) {\n    const {payload} = action\n    const {tokenID, loadingPromise} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loadingPromise\n        }\n    }\n}\n\nexport const volatileTokensByIdReducer = (state = VOLATILE_TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case ADD_VOLATILE_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case SET_TOKEN_LOADING_PROMISE: {\n            return setTokenLoadingPromise(state, action)\n        }\n        case SET_TOKEN_CONTRACT_INSTANCE: {\n            return setTokenContractInstance(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokens()\n        }\n        default:\n            return state\n    }\n}\n\n","import {CHANGE_TOKEN_TRACKING} from '../tokenActions'\n\nconst TRACKED_TOKENS_INITIAL = []\n\nfunction changeTokenTracking(state, action) {\n    const {payload} = action\n    const {tokenId, doTrack} = payload\n    // Check if this token is currently tracked\n    const trackedIndex = state.indexOf(tokenId)\n    if (doTrack && (trackedIndex === -1)) {\n        // Add new tracked entry\n        return state.concat(tokenId)\n    }\n    if (!doTrack && (trackedIndex > -1)) {\n        // remove existing tracked entry. Use \"filter\" instead of splice, as it returns a new array, while \"splice\"\n        // mutates the existing one.\n        return state.filter(id => (id !== tokenId))\n    }\n    // No need to change anything\n    return state\n}\n\nexport const trackedTokensReducer = (state=TRACKED_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_TRACKING:\n            return changeTokenTracking(state, action)\n        default:\n            return state\n    }\n}\n\n","import Web3 from 'web3'\n/*\n Obtain web3 instance. Based on code from\n https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nlet getWeb3 = new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n        let myWeb3\n\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            myWeb3 = new Web3(window.ethereum)\n        }\n        // Legacy dapp browser\n        else if (window.web3) {\n            // Use Mist/MetaMask's provider.\n            myWeb3 = new Web3(window.web3.currentProvider);\n        }\n\n        if (myWeb3) {\n            console.log('Injected web3 detected.')\n            let results = {\n                web3: myWeb3\n            }\n            resolve(results)\n        } else {\n            let results = {\n                error: 'No web3 injected'\n            }\n            reject(results)\n        }\n    })\n})\n\nexport default getWeb3\n","//\n// Based on\n// https://ethereum.stackexchange.com/questions/11444/web3-js-with-promisified-api\n// and\n// https://gist.github.com/xavierlepretre/90f0feafccc07b267e44a87050b95caa\n//\n\nconst promisify = (web3) => {\n    // Pipes values from a Web3 callback.\n    let callbackToResolve = function (resolve, reject) {\n        return function (error, value) {\n            if (error) {\n                reject(error);\n            } else {\n                resolve(value);\n            }\n        };\n    };\n\n    // List synchronous functions masquerading as values.\n    const syncGetters = {\n        db: [],\n        eth: [ \"accounts\", \"blockNumber\", \"coinbase\", \"gasPrice\", \"hashrate\",\n            \"mining\", \"protocolVersion\", \"syncing\" ],\n        net: [ \"listening\", \"peerCount\" ],\n        personal: [ \"listAccounts\" ],\n        shh: [],\n        version: [ \"ethereum\", \"network\", \"node\", \"whisper\" ]\n    };\n\n    Object.keys(syncGetters).forEach(function(group) {\n        Object.keys(web3[group]).forEach(function (method) {\n            if (syncGetters[group].indexOf(method) > -1) {\n                // Skip\n            } else if (typeof web3[group][method] === \"function\") {\n                web3[group][method + \"Promise\"] = function () {\n                    let args = arguments;\n                    return new Promise(function (resolve, reject) {\n                        args[args.length] = callbackToResolve(resolve, reject);\n                        args.length++;\n                        web3[group][method].apply(web3[group], args);\n                    });\n                };\n            }\n        });\n    });\n}\n\nexport default promisify\n","import Ens from 'ethjs-ens'\nimport getWeb3 from '../../utils/getWeb3'\nimport {clearTokenList} from '../token/tokenActions'\nimport promisify from '../../utils/promisifyWeb3'\n\nexport const WEB3_STATES = {\n    UNINITIALIZED: 'uninitialized',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    ERROR: 'error'\n}\n\nexport const ETH_ENABLE_STATES = {\n    REJECTED: 'rejected', // no access to eth.accounts\n    WAITING: 'waiting', // waiting for user confirmation in UI (e.g. metamask)\n    GRANTED: 'granted', // user has granted access to eth.accounts\n}\n\nexport const SET_WEB3_STATE = 'SET_WEB3_STATE'\nexport function setWeb3State(state) {\n    return {\n        type: SET_WEB3_STATE,\n        state\n    }\n}\n\nexport const SET_ETH_ENABLE_STATE = 'SET_ETH_ENABLE_STATE'\nexport function setEthEnableState(ethEnableState) {\n    return {\n        type: SET_ETH_ENABLE_STATE,\n        ethEnableState\n    }\n}\n\nexport const SET_WEB3INSTANCE = 'SET_WEB3INSTANCE'\nexport function setWeb3Instance(web3) {\n    return {\n        type: SET_WEB3INSTANCE,\n        web3\n    }\n}\n\nexport const SET_ENS = 'SET_ENS'\nexport function setENS(ens) {\n    return {\n        type: SET_ENS,\n        ens\n    }\n}\n\nexport const SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK'\nexport function setCurrentBlock(block) {\n    return {\n        type: SET_CURRENT_BLOCK,\n        block\n    }\n}\n\nexport const SET_NETWORK = 'SET_NETWORK'\nexport function setNetwork(id, name, previousId) {\n    return {\n        type: SET_NETWORK,\n        id,\n        name,\n        previousId,\n    }\n}\n\nexport const SET_NODE_VERSION = 'SET_NODE_VERSION'\nexport function setNodeVersion(nodeVersion) {\n    return {\n        type: SET_NODE_VERSION,\n        nodeVersion\n    }\n}\n\nexport const SET_BLOCK_FILTER = 'SET_BLOCK_FILTER'\nexport function setBlockFilter(blockFilter) {\n    return {\n        type: SET_BLOCK_FILTER,\n        blockFilter\n    }\n}\n\nexport function stopBlockFilter() {\n    return (dispatch, getState) => {\n        // Clean up any blockfilter that might be active\n        const {blockFilter} = getState().web3Instance\n        if (blockFilter) {\n            blockFilter.stopWatching((error, result) => {\n                if (error) {\n                    console.log(\"Error stopping blockfilter: \" + error)\n                }\n            })\n            dispatch(setBlockFilter(null))\n        }\n    }\n}\n\nexport function initialize() {\n    return async (dispatch, getState) => {\n        // stop any running block filter, just in case...\n        dispatch(stopBlockFilter())\n\n        // signal that web3 is being initialized\n        dispatch(setWeb3State(WEB3_STATES.LOADING))\n\n        // set web3 instance\n        try {\n            var {web3} = await getWeb3\n            // stop loading\n            dispatch(setWeb3State(WEB3_STATES.INITIALIZED))\n        }\n        catch(e) {\n            console.log(\"Error getting web3: \" + e)\n            dispatch(setWeb3State(WEB3_STATES.ERROR))\n            return;\n        }\n\n        // FIXME - Promisify can be removed once web3.js 1.0 is released\n        promisify(web3)\n        dispatch(setWeb3Instance(web3))\n\n        // set node info\n        const nodeVersion = await web3.version.getNodePromise()\n        dispatch(setNodeVersion(nodeVersion))\n\n        // set network info\n        const networkIdString = await web3.version.getNetworkPromise()\n        let networkID = parseInt(networkIdString, 10)\n        const network = getNetworkName(networkID)\n        dispatch(setNetwork(networkID, network, undefined))\n\n        // setup ens system\n        const ens = new Ens({\n            provider: web3.currentProvider,\n            network: networkID\n        })\n        dispatch(setENS(ens))\n\n        // set current block\n        const block = await web3.eth.getBlockPromise('latest')\n        dispatch(setCurrentBlock(block))\n\n        // start listening for new block events\n        const filter = web3.eth.filter('latest')\n        filter.watch(async (error, blockHash) => {\n            if (error) {\n                console.log(\"Error watching for block events: \" + error)\n            } else {\n                const block = await web3.eth.getBlockPromise(blockHash)\n                if (block) {\n                    dispatch(setCurrentBlock(block))\n                }\n                else {\n                    console.log(\"Ignoring null-block!\")\n                    console.log(block)\n                }\n            }\n        })\n        dispatch(setBlockFilter(filter))\n\n        // start watching for network change events\n        setInterval(async function () {\n            const networkIdString = await web3.version.getNetworkPromise()\n            let networkID = parseInt(networkIdString, 10)\n            const oldNetworkId = getState().web3Instance.id\n            if (oldNetworkId !== networkID) {\n                const network = getNetworkName(networkID)\n                dispatch(setNetwork(networkID, network, oldNetworkId))\n                dispatch(clearTokenList())\n            }\n        }, 1000)\n    }\n}\n\nexport function requestEthEnable() {\n    return async (dispatch, getState) => {\n        if (window.ethereum) {\n            // request access to user accounts as described in EIP-1102\n            try {\n                // signal that app is waiting for user action\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.WAITING))\n                // request access\n                await window.ethereum.enable()\n                // signal success\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n            } catch(error) {\n                // user rejected access\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.REJECTED))\n            }\n        } else {\n            // must be a legacy browser, which should grant access by default.\n            dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n        }\n    }\n}\n\nfunction getNetworkName(networkId) {\n    let network = 'unknown'\n    switch (networkId) {\n        case 4447:\n            network = 'truffle test'\n            break\n        case 1:\n            network = 'mainnet'\n            break\n        case 2:\n            network = 'Morden (deprecated!)'\n            break\n        case 3:\n            network = 'Ropsten'\n            break\n        case 4:\n            network = 'Rinkeby'\n            break\n        case 42:\n            network = 'Kovan'\n            break\n        case 61:\n            network = 'ETC'\n            break\n        case 62:\n            network = 'ETC Testnet'\n            break\n        default:\n            network = 'Unknown'\n    }\n    return network\n}\n","import {CHANGE_SELECTOR_TOKENID} from '../tokenActions'\nimport {SET_NETWORK} from '../../web3/web3Actions'\n\nconst SELECTOR_INITIAL = {\n    selctedTokenId: undefined\n}\n\nfunction changeSelectorTokenId(state, action) {\n    const {payload} = action\n    const {selectedTokenId} = payload\n\n    return {\n        ...state,\n        selectedTokenId,\n    }\n}\n\nfunction setNetwork(state, action) {\n    const {id, previousId} = action\n    // if the existing network got changed, clear the selected token. If this\n    // is the initial setNetwork event after page load (previousID is undefined)\n    // keep the selectedTokenId\n    // NOTE: This will only start working when Metamask stops the full page reload on network change.\n    // See https://github.com/MetaMask/metamask-extension/issues/3599.\n    if (previousId && (previousId !== id))\n        return SELECTOR_INITIAL\n    else\n        return state\n}\n\nexport const selectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_TOKENID:\n            return changeSelectorTokenId(state, action)\n        case SET_NETWORK:\n            return setNetwork(state, action)\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {listStateReducer} from './ListStateReducer'\nimport {tokensByIdReducer} from './TokensByIdReducer'\nimport {allTokensReducer} from './AllIdsReducer'\nimport {volatileTokensByIdReducer} from './volatileTokensByIdReducer'\nimport {trackedTokensReducer} from './TrackedIdsReducer'\nimport {selectorReducer} from './SelectorReducer'\n\n/*\nState tree:\n{\n    listState: {\n        listState: 'loading'\n        filter: 'Dumb'\n        matchedTokenIds: [6]\n        total: 2\n        activePage: 1\n    }\n    byId: {\n        [1]: {\n            loading: true\n            tokenID: 1\n            name: 'GAVCoin'\n            address: '0x123456678'\n            contractInstance: null\n            supply: {\n                loading: true\n                supply: 0\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        },\n        [6]: {\n            loading: false\n            tokenID: 6\n            name: 'DumbCoin'\n            address: '0x123456678'\n            contractInstance: <truffle-contract instance>\n            supply: {\n                loading: false\n                supply: 200000\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        }\n    },\n    allIds: [1, 6],\n    trackedIds: [3, 4]\n}\n*/\n\nexport const tokens = combineReducers({\n    listState: listStateReducer,\n    byId : tokensByIdReducer,\n    allIds : allTokensReducer,\n    trackedIds: trackedTokensReducer,\n    volatileById: volatileTokensByIdReducer,\n    selector: selectorReducer,\n});\n","export function updateObject(oldObject, newValues) {\n    // Encapsulate the idea of passing a new object as the first parameter\n    // to Object.assign to ensure we correctly copy data instead of mutating\n    return Object.assign({}, oldObject, newValues);\n}\n\nexport function updateItemInArray(array, itemId, updateItemCallback) {\n    return array.map(item => {\n        if (item.id !== itemId) {\n            // Since we only want to update one item, preserve all others as they are now\n            return item;\n        }\n\n        // Use the provided callback to create an updated item\n        return updateItemCallback(item);\n    });\n}\n","import {updateObject} from \"../../utils/reducerUtils\"\nimport {\n    SET_CURRENT_BLOCK,\n    SET_WEB3INSTANCE,\n    SET_NETWORK,\n    SET_NODE_VERSION, SET_BLOCK_FILTER, WEB3_STATES, SET_WEB3_STATE, ETH_ENABLE_STATES, SET_ETH_ENABLE_STATE, SET_ENS,\n} from './web3Actions'\n\nconst WEB3_INITIAL = {\n    web3: null,\n    state: WEB3_STATES.UNINITIALIZED,\n    block: {\n        number: 0,\n        timestamp: 0\n    },\n    id: -1,\n    name: 'unknown',\n    blockFilter: null,\n    ethEnableState: ETH_ENABLE_STATES.REJECTED,\n    ens: undefined,\n}\n\nexport const web3Instance = (state=WEB3_INITIAL, action) => {\n    switch (action.type) {\n        case SET_WEB3_STATE:\n            return updateObject(state, {state: action.state})\n        case SET_ETH_ENABLE_STATE:\n            return updateObject(state, {ethEnableState: action.ethEnableState})\n        case SET_WEB3INSTANCE:\n            return updateObject(state, {web3: action.web3})\n        case SET_ENS:\n            return updateObject(state, {ens: action.ens})\n        case SET_CURRENT_BLOCK:\n            return updateObject(state, {block: action.block})\n        case SET_NETWORK:\n            return updateObject(state, {id: action.id, name: action.name})\n        case SET_NODE_VERSION:\n            return updateObject(state, {nodeVersion: action.nodeVersion})\n        case SET_BLOCK_FILTER:\n            return updateObject(state, {blockFilter: action.blockFilter})\n        default:\n    }\n    return state;\n}\n","import {loadMultiTokenBalances, loadTokenBalance} from '../token/tokenActions'\nimport {buildBalanceId} from '../balance/balanceActions'\n\nexport const ADDRESS_TYPE_EXTERNAL='ADDRESS_TYPE_EXTERNAL'\nexport const ADDRESS_TYPE_OWNED='ADDRESS_TYPE_OWNED'\nexport const ADDRESS_BALANCES_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    HYDRATED_WHILE_LOADING: 'hydrated_while_loading'\n}\n\nexport const CHANGE_ADDRESS_BALANCES_STATE = 'CHANGE_ADDRESS_BALANCES_STATE'\nexport function addressBalancesStateChanged(addressId, addressBalancesState) {\n    return {\n        type: CHANGE_ADDRESS_BALANCES_STATE,\n        payload: {\n            addressId,\n            addressBalancesState\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS'\nexport function addAddress(address, ensName, type) {\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            addressId: address,\n            address,\n            ensName,\n            type\n        }\n    }\n}\n\nexport const REMOVE_ADDRESS='REMOVE_ADDRESS'\nexport function removeAddress(addressId) {\n    return {\n        type: REMOVE_ADDRESS,\n        payload: {\n            addressId\n        }\n    }\n}\n\nexport const CHANGE_ADDRESS_TYPE='CHANGE_ADDRESS_TYPE'\nexport function changeAddressType(addressId, newType) {\n    return {\n        type: CHANGE_ADDRESS_TYPE,\n        payload: {\n            addressId,\n            newType,\n        }\n    }\n}\n\nfunction batchGetBalances(timestamp, startIndex, addressId, dispatch, getState, recursionCount) {\n    const allIds = getState().tokens.allIds\n    let diff = 0\n    let index = startIndex\n    while ((diff < 10) && (index < allIds.length)) {\n        const tokenId = allIds[index]\n        const balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            dispatch(loadTokenBalance(tokenId, addressId))\n        }\n        index++\n        diff = performance.now()-timestamp\n    }\n    // 10 ms have passed\n    if (index < allIds.length) {\n        console.log(\"Batch update with index \" + index)\n        requestAnimationFrame((timestamp) => {\n            batchGetBalances(timestamp, index, addressId, dispatch, getState, recursionCount+1)\n        })\n    } else {\n        // indicate loading finished when last balance loading request was dispatched\n        dispatch(addressBalancesStateChanged(addressId, ADDRESS_BALANCES_STATES.INITIALIZED))\n    }\n}\n\nexport function addNewAddress(address, ensName, type) {\n    return (dispatch, getState) => {\n        // a new address is added.\n        // make sure that all addresses are stored in lowercase\n        address = address.toLowerCase()\n        dispatch(addAddress(address, ensName, type))\n        // If i'm tracking tokens start getting balance right away\n        const trackedIds = getState().tokens.trackedIds\n        if (trackedIds.length) {\n            // load balance for all tracked tokens\n            dispatch(loadMultiTokenBalances(trackedIds, address))\n        }\n    }\n}\n\nexport function resumeGetBalances(addressId, startIndex) {\n    return (dispatch, getState) => {\n        // start getting balances\n        batchGetBalances(performance.now(), startIndex, addressId, dispatch, getState, 0)\n    }\n}\n\nexport function changeOwnAddresses(accounts) {\n    // for each account in accounts:\n    // -> if it is not in addresses, add it\n    // -> if it is in addresses, but marked as \"external\", change type to \"owned\"\n    return (dispatch, getState) => {\n        const addressesById = getState().addresses.byId\n\n        const newAccounts = accounts.filter(account => {\n            const existingAddress = Object.values(addressesById).filter(entry => {\n                return (entry.address === account)\n            })\n            if (existingAddress.length > 0) {\n                // check if the type has changed\n                if (existingAddress[0].type !== ADDRESS_TYPE_OWNED){\n                    console.log(\"Changing address \" + existingAddress[0].address + \" type to Owned!\")\n                    dispatch(changeAddressType(existingAddress[0].address, ADDRESS_TYPE_OWNED))\n                }\n                return false // address already known\n            }\n            return true // address needs to be added\n        })\n\n        // now check if there is any address currently marked as owned that is no more in accounts\n        const makeExternal = Object.values(addressesById).filter(entry => {\n            if (entry.type === ADDRESS_TYPE_OWNED) {\n                // if this OWNED address is not in accounts array it needs to change to EXTERNAL!\n                const idx = accounts.indexOf(entry.address)\n                return (idx === -1)\n            }\n            return false\n        })\n\n        // make old owned addresses external\n        makeExternal.forEach(address => {\n            dispatch(changeAddressType(address.address, ADDRESS_TYPE_EXTERNAL))\n        })\n\n        // add all new addresses\n        newAccounts.forEach(account => {\n            dispatch(addNewAddress(account, '', ADDRESS_TYPE_OWNED))\n        })\n    }\n}\n\nexport const CHANGE_SELECTOR_ADDRESSID = 'CHANGE_SELECTOR_ADDRESSID'\nexport function changeSelectorAddressId(selectedAddressId) {\n    return {\n        type: CHANGE_SELECTOR_ADDRESSID,\n        payload: {\n            selectedAddressId,\n        }\n    }\n}\n","import {\n    ADD_ADDRESS, ADDRESS_BALANCES_STATES, CHANGE_ADDRESS_BALANCES_STATE, CHANGE_ADDRESS_TYPE,\n    REMOVE_ADDRESS\n} from '../addressActions'\n\nconst ADDRESS_BY_ID_INITIAL = {}\n\nfunction addAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId, address, ensName, type} = payload\n    if (Object.keys(state).indexOf(addressId) > -1)\n    {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return {\n        ...state,\n        [addressId]: {\n            address,\n            ensName,\n            type,\n            balancesState: ADDRESS_BALANCES_STATES.VIRGIN,\n            eventIds: []\n        },\n    }\n}\n\nfunction removeAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    let newState = Object.assign({}, state)\n    delete newState[addressId]\n    return newState\n}\n\nfunction changeAddressType(state, action) {\n    const {payload} = action\n    const {addressId, newType} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            type: newType\n        }\n    }\n}\n\nfunction changeAddressBalancesState(state, action) {\n    const {payload} = action\n    const {addressBalancesState, addressId} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            balancesState: addressBalancesState\n        }\n    }\n}\n\nexport const addressByIdReducer = (state=ADDRESS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressEntry(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressEntry(state, action)\n        case CHANGE_ADDRESS_TYPE:\n            return changeAddressType(state, action)\n        case CHANGE_ADDRESS_BALANCES_STATE:\n            return changeAddressBalancesState(state, action)\n        default:\n    }\n    return state;\n}\n","import {ADD_ADDRESS, REMOVE_ADDRESS} from '../addressActions'\n\nconst ALL_ADDRESSES_INITIAL = []\n/*const ALL_ADDRESSES_INITIAL = [\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n]*/\n\nfunction addAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(addressId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return state.concat(addressId)\n}\n\nfunction removeAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    return state.filter(entryId => (entryId !== addressId))\n}\n\nexport const allAddressIdsReducer = (state=ALL_ADDRESSES_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressId(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressId(state, action)\n        default:\n    }\n    return state;\n}\n","import {CHANGE_SELECTOR_ADDRESSID} from '../addressActions'\n\nconst SELECTOR_INITIAL = {\n    selectedAddressId: '',\n}\n\nfunction changeSelectorAddressId(state, action){\n    const {payload} = action\n    const {selectedAddressId} = payload\n\n    return {\n        ...state,\n        selectedAddressId,\n    }\n}\n\nexport const addressSelectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_ADDRESSID:\n            return changeSelectorAddressId(state, action)\n        default:\n            return state\n    }\n}\n\n","import {addressByIdReducer} from './addressByIdReducer'\nimport {allAddressIdsReducer} from './allAddressIdsReducer'\nimport {combineReducers} from 'redux'\nimport {addressSelectorReducer} from './addressSelectorReducer'\n\n/*\nState tree:\n{\n    addresses: {\n        byId: {\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n                address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n                ensName: 'validaddress.eth',\n                type: ADDRESS_TYPE_EXTERNAL,\n                balancesState: 'virgin',\n                eventIds: []\n            },\n            ...\n        }\n\n        allIds: [\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n            '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n            '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9'\n        ]\n    }\n}\n*/\n\nexport const addresses = combineReducers({\n    byId : addressByIdReducer,\n    allIds : allAddressIdsReducer,\n    selector: addressSelectorReducer,\n});\n","import {\n    BALANCE_STATES,\n    CREATE_BALANCE_ENTRY,\n    DELETE_BALANCE_ENTRY,\n    SET_BALANCE,\n    SET_BALANCE_STATE\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\nimport {BigNumber} from 'bignumber.js'\n\nconst BALANCE_BY_ID_INITIAL = {}\n\nfunction clearAllBalances() {\n    return BALANCE_BY_ID_INITIAL;\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balance\n        }\n    };\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId, addressId, tokenId} = payload\n    return {\n        ...state,\n        [balanceId] : {\n            balanceId,\n            addressId,\n            tokenId,\n            balance: new BigNumber(0),\n            balanceState: BALANCE_STATES.VIRGIN,\n        }\n    }\n}\n\nfunction balanceStateChanged(state, action){\n    const {payload} = action\n    const {balanceId, balanceState} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balanceState,\n        }\n    }\n\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    delete state[balanceId]\n    return state\n}\n\n\nexport const byId = (state=BALANCE_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case SET_BALANCE_STATE: {\n            return balanceStateChanged(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state;\n    }\n}\n","import {CREATE_BALANCE_ENTRY, DELETE_BALANCE_ENTRY} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_BALANCES_INITIAL = []\n\nfunction clearAllBalances() {\n    return ALL_BALANCES_INITIAL;\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(balanceId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate balance \" + balanceId)\n        return state\n    }\n    return state.concat(balanceId)\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\n\nexport const allIds = (state=ALL_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state\n    }\n}\n","import {DELETE_BALANCE_ENTRY, SET_BALANCE} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst POSITIVE_BALANCES_INITIAL = []\n\nfunction clearPositiveBalances() {\n    return POSITIVE_BALANCES_INITIAL\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1) {\n        // this balance entry is currently marked as having a balance...\n        if (balance.isZero()) {\n            // no more balance. Remove from array\n            const newState = state.filter(entry => entry !== balanceId)\n            return newState\n        } else {\n            // all set, no need for action\n            return state\n        }\n    } else {\n        // this balance entry is currently marked as having NO balance...\n        if (balance.greaterThan(0)) {\n            // ... but it has a balance now! Add it to list.\n            return state.concat(balanceId)\n        } else {\n            // ... and it still has no balance. No need for action\n            return state\n        }\n    }\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\nexport const positiveIds = (state=POSITIVE_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST:\n            return clearPositiveBalances()\n        default:\n            return state;\n    }\n}\n","import {\n    CHANGE_BALANCE_FILTER_PROPS,\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst BALANCE_LISTSTATE_INITIAL = {\n    filter: '',\n    matchedBalanceIds: [],\n    displayCount: 10,\n}\n\nfunction clearBalanceListState() {\n    return BALANCE_LISTSTATE_INITIAL\n}\n\nfunction changeBalanceFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedBalanceIds} = payload\n    return {\n        ...state,\n        filter,\n        matchedBalanceIds\n    }\n}\n\nexport const listStateReducer = (state=BALANCE_LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_BALANCE_FILTER_PROPS:\n            return changeBalanceFilterProps(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearBalanceListState()\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {byId} from './balanceByIdReducer'\nimport {allIds} from './allBalancesReducer'\nimport {positiveIds} from './positiveBalancesReducer'\nimport {listStateReducer} from './BalanceListStateReducer'\n\n/*\nState tree:\n{\n    balance: {\n        byId: {\n            [1]: {\n                balanceId: 1\n                tokenId: 1\n                addressId: 1\n                balance: 22.45\n            },\n        }\n        allIds: [1],\n        positiveIds: [1]    // all balances that have an actual balance > 0\n        listState: {\n            filter: '',\n            matchedBalanceIds: [],\n            displayCount: 10,\n        }\n    }\n}\n*/\n\nexport const balance = combineReducers({\n    byId : byId,\n    allIds : allIds,\n    positiveIds: positiveIds,\n    listState: listStateReducer,\n})\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst EVENT_BY_ID_INITIAL = {}\n\nfunction addEvents(state, action) {\n    const {payload} = action\n    const {events, tokenId} = payload\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        if (Object.keys(state).includes(transferEventId ))\n        {\n            console.warn(\"Ignoring duplicate event \" + transferEventId )\n            return\n        }\n        state = {\n            ...state,\n            [transferEventId]: {\n                transferEventId,\n                tokenId,\n                transferEvent,\n            },\n        }\n    })\n    return state\n}\n\nfunction clearEvents() {\n    return EVENT_BY_ID_INITIAL\n}\n\nexport const eventByIdReducer = (state=EVENT_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEvents(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {ADD_EVENTS, buildEventId} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_EVENTS_INITIAL = []\n\nfunction addEventIds(state, action) {\n    const {payload} = action\n    const {events} = payload\n    let newState = state\n    events.forEach(transferEvent => {\n        const transferEventId = buildEventId(transferEvent)\n        // prevent duplicate entries\n        const existingIndex = state.indexOf(transferEventId)\n        if (existingIndex > -1) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newState = newState.concat(transferEventId)\n    })\n    return newState\n}\n\nfunction clearEvents() {\n    return ALL_EVENTS_INITIAL\n}\n\nexport const allEventIdsReducer = (state=ALL_EVENTS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {CHANGE_EVENT_SCAN_PROPS, CHANGE_TRANSFEREVENTLIST_PAGE} from '../eventActions'\nimport {CHANGE_SELECTOR_ADDRESSID} from '../../address/addressActions'\nimport {CHANGE_SELECTOR_TOKENID, CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    activePage: 1,\n    currentChunk: 0,\n    maxChunks: 0,\n}\n\nfunction transferEventListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nfunction resetPager(state) {\n    return {\n        ...state,\n        activePage: 1\n    }\n}\n\nfunction changeEventScanProps(state, action) {\n    const {payload} = action\n    const {\n        currentChunk,\n        maxChunks,\n    } = payload.props\n\n    return {\n        ...state,\n        currentChunk,\n        maxChunks\n    }\n}\n\nexport const transferEventListStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch(action.type) {\n        case CHANGE_TRANSFEREVENTLIST_PAGE:\n            return transferEventListPageChanged(state, action)\n        case CHANGE_EVENT_SCAN_PROPS:\n            return changeEventScanProps(state, action)\n        case CHANGE_SELECTOR_ADDRESSID:\n        case CHANGE_SELECTOR_TOKENID:\n        case CLEAR_TOKEN_LIST:\n            return resetPager(state, action)\n        default:\n            return state\n    }\n}\n","import {combineReducers} from 'redux'\nimport {eventByIdReducer} from './eventByIdReducer'\nimport {allEventIdsReducer} from './allEventIdsReducer'\nimport {addressContractEventsByIdReducer} from './addressContractEventsByIdReducer'\nimport {transferEventListStateReducer} from './listStateReducer'\n\n\nexport const events = combineReducers({\n    byId : eventByIdReducer,\n    allIds : allEventIdsReducer,\n    aceById: addressContractEventsByIdReducer,\n    listState: transferEventListStateReducer,\n});\n","export const SHOW_MODAL = 'SHOW_MODAL'\nexport function showModal(modalType, modalProps) {\n    return {\n        type: SHOW_MODAL,\n        payload: {\n            modalType,\n            modalProps\n        }\n    }\n}\n\nexport const HIDE_MODAL = 'HIDE_MODAL'\nexport function hideModal() {\n    return {\n        type: HIDE_MODAL,\n        payload: {}\n    }\n}\n","import {HIDE_MODAL, SHOW_MODAL} from './modalActions'\n\nconst MODAL_INITIAL = {\n    modalType: null,\n    modalProps: {}\n}\n\nfunction showModal(state, action) {\n    const {payload} = action\n    const {modalType, modalProps} = payload\n    return {\n        modalType,\n        modalProps\n    }\n}\n\nfunction hideModal() {\n    return MODAL_INITIAL\n}\n\nexport const modal = (state=MODAL_INITIAL, action) => {\n    switch (action.type) {\n        case SHOW_MODAL:\n            return showModal(state, action)\n        case HIDE_MODAL:\n            return hideModal()\n        default:\n    }\n    return state;\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport {tokens} from \"./modules/token/reducers/tokenReducer\"\nimport {web3Instance} from \"./modules/web3/web3Reducer\"\nimport thunk from 'redux-thunk'\nimport {addresses} from './modules/address/reducers/addressReducer'\nimport {balance} from './modules/balance/reducer/balanceReducer'\nimport {createLogger} from 'redux-logger'\nimport { persistStore, persistReducer, createTransform } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport {BALANCE_STATES} from './modules/balance/balanceActions'\nimport {events} from './modules/event/reducers/eventReducer'\nimport {modal} from './modules/modal/modalReducer'\n\n\n/*\nMark all address entries that have been hydrated while being in state \"loading\" as \"hydrated_while_loading\", so i can restart loading them.\n */\nconst addressesTransform = createTransform(\n    // transform state on its way to being serialized and persisted.\n    (inboundState) => {\n        return inboundState\n    },\n    // transform state being rehydrated\n    (outboundState) => {\n        const newState = {...outboundState}\n        Object.keys(newState.byId).forEach(addressId => {\n            const addressEntry = newState.byId[addressId]\n            const newAddressState = addressEntry.balancesState === BALANCE_STATES.LOADING ? BALANCE_STATES.HYDRATED_WHILE_LOADING : addressEntry.balancesState\n            newState.byId[addressId] = {\n                ...addressEntry,\n                balancesState: newAddressState\n            }\n        })\n        return newState;\n    },\n    // define which reducers this transform gets called for.\n    { whitelist: ['addresses'] }\n);\n\nconst tokensConfig = {\n    key: 'tokens',\n    storage: storage,\n    transforms: [],\n    // Only persist tracked tokens and last selected token\n    whitelist: ['trackedIds', 'selector']\n}\n\nconst reducer = combineReducers({\n    web3Instance,\n    tokens: persistReducer(tokensConfig, tokens),\n    addresses,\n    balance,\n    events,\n    modal,\n})\n\nconst rootConfig = {\n    key: 'root',\n    storage: storage,\n    transforms: [\n        addressesTransform\n    ],\n    // Don't persist these subtrees:\n    blacklist: ['web3Instance', 'tokens', 'balance', 'events', 'modal'],\n}\nconst persistedReducer = persistReducer(rootConfig, reducer)\n\nconst logger = createLogger({\n    // Would love to log state diffs, but apparently logger tries to call all web3 instance methods\n    // which will make metamask throw an error due to trying to call methods synchronous.\n    // There may be a workaround somewhere, but disabling state diff for now...\n    diff: false\n});\n\n// REDUX Dev Tools don't play well at all with web3 from Metamask extension...\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    let store = createStore(\n        persistedReducer,\n        compose(\n            applyMiddleware(\n                thunk,\n                logger,\n            )\n        )\n    )\n    let persistor = persistStore(store )\n    return {store, persistor}\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Modal} from 'semantic-ui-react'\n\nconst TestModal = (props) => {\n    const {closeModal} = props\n    return (\n        <Modal open onClose={closeModal}>\n            <Modal.Header>Select a Photo</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Header>Default Profile Image</Header>\n                    <p>We've found the following gravatar image associated with your e-mail address.</p>\n                    <p>Is it okay to use this photo?</p>\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTestModal.propTypes = {\n    closeModal: PropTypes.func.isRequired\n}\n\nTestModal.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TestModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {addValidationRule} from 'formsy-react'\nimport {Grid, Header, List, Modal, Segment} from 'semantic-ui-react'\nimport {Label} from 'semantic-ui-react'\nimport {Form, Input} from 'formsy-semantic-ui-react'\n\nconst TransferForm = (props) => {\n    const {\n        web3, onValidSubmit, onClose,\n        fromAddress,\n        tokenName, tokenSymbol, tokenBalance,\n        etherBalance, gasCosts } = props\n\n    const errorLabel = <Label color=\"red\" pointing/>\n\n    addValidationRule('isEthereumAddress', (values, value) => (web3.isAddress(value)))\n    addValidationRule('isLessThanOrEqual', (values, value, max) => {\n        try {\n            const bnValue = web3.toBigNumber(value)\n            const bnMax = web3.toBigNumber(max)\n            return bnValue.lessThanOrEqualTo(bnMax)\n        }\n        catch (err) {\n            // if anything goes wrong with BigNumber, just fail validation\n            return false\n        }\n    })\n\n    return (\n        <Modal open onClose={onClose} size={'small'} closeIcon>\n            <Modal.Header>Transfer '{tokenName}' Tokens</Modal.Header>\n            <Modal.Content>\n\n                <Form noValidate onValidSubmit={onValidSubmit}>\n                    <Segment>\n                        <Grid columns={2}>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account address:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>{fromAddress}</Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account balance:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>\n                                    <List>\n                                        <List.Item>\n                                            {tokenBalance.toFixed()} {tokenSymbol}\n                                        </List.Item>\n                                        <List.Item>{etherBalance.toFixed()} ETH</List.Item>\n                                    </List>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">To Address</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"toAddress\"\n                                   placeholder=\"Receiving ethereum address\"\n                                   required\n                                   instantValidation\n                                   validations=\"isEthereumAddress\"\n                                   validationErrors={{\n                                       isEthereumAddress: 'This is not a valid Ethereum address',\n                                       isDefaultRequiredValue: 'To Address is Required',\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n\n                        <Header size=\"small\">Amount to send</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"amount\"\n                                   placeholder=\"Enter amount\"\n                                   label={tokenSymbol}\n                                   labelPosition=\"right\"\n                                   required\n                                   instantValidation\n                                   validations={'isNumeric,isLessThanOrEqual:' + tokenBalance.toFixed()}\n                                   validationErrors={{\n                                       isNumeric: 'This is not a valid number',\n                                       isDefaultRequiredValue: 'Amount is Required',\n                                       isLessThanOrEqual: 'Maximum available balance is ' + tokenBalance.toFixed()\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">Estimated Gas costs</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"gasCosts\"\n                                   label=\"ETH\"\n                                   labelPosition=\"right\"\n                                   readOnly\n                                   value={gasCosts}\n                                   validations={'isLessThanOrEqual:' + etherBalance.toFixed()}\n                                   instantValidation\n                                   validationErrors={{\n                                       isLessThanOrEqual: 'Not enough ether to cover gas costs'\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n                    <Form.Group>\n                        <Form.Button content=\"Submit\" color=\"green\"/>\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTransferForm.propTypes = {\n    web3: PropTypes.object.isRequired\n}\n\nTransferForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferForm\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TransferForm from './TransferForm'\nimport {connect} from 'react-redux'\nimport {transferToken} from '../../token/tokenActions'\n\nclass TransferFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            amount: this.props.web3.toBigNumber('0'),\n            toAddressValid: false,\n            amountValid: false,\n            rateValid: false\n        }\n    }\n\n    onValidSubmit = (formData) => alert(JSON.stringify(formData));   // eslint-disable-line\n\n    render() {\n        const {fromAddress, tokenName, tokenSymbol, tokenBalance} = this.props\n\n        // TODO: Calculate real gas costs\n        const gasCosts = this.props.web3.toBigNumber('0.0022')\n        // TODO: Get real balance\n        const etherBalance = this.props.web3.toBigNumber('12.3456')\n\n        return <TransferForm onValidSubmit={this.onValidSubmit}\n                             onClose={this.props.closeModal}\n                             fromAddress={fromAddress}\n                             web3={this.props.web3}\n                             tokenName={tokenName}\n                             tokenSymbol={tokenSymbol}\n                             tokenBalance={tokenBalance}\n                             gasCosts={gasCosts}\n                             etherBalance={etherBalance}\n        />\n    }\n}\n\nTransferFormContainer.propTypes = {\n    fromAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenId: PropTypes.number.isRequired,\n    tokenBalanceId: PropTypes.number.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n}\n\nTransferFormContainer.defaultProps = {\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const fromAddress = state.addresses.byId[balanceEntry.addressId].address\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n\n    return {\n        web3: state.web3Instance.web3,\n        fromAddress,\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenId: token.id,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    transferToken: () => {\n        dispatch(transferToken())\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport TestModal from './TestModal'\nimport {hideModal} from './modalActions'\nimport TransferFormContainer from '../forms/transferForm/TransferFormContainer'\n\nexport const MODAL_COMPONENTS = {\n    'TEST_MODAL': TestModal,\n    'TRANSFER_FORM_CONTAINER': TransferFormContainer\n    /* other modals */\n}\n\nclass ModalRoot extends Component {\n    render() {\n        const {modalType, modalProps, closeModal} = this.props\n\n        if (!modalType){\n            // currently no modal needs to be shown\n            return null\n        }\n\n        const SpecificModal = MODAL_COMPONENTS[modalType]\n        return <SpecificModal closeModal={closeModal} {...modalProps} />\n    }\n}\n\nconst mapStateToProps = state => (\n    state.modal\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => {\n        dispatch(hideModal())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\n\nconst Balance = (props) => {\n    const {balance, numDecimals} = props\n    const trigger = <span>{balance.toFixed(numDecimals)}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={balance.toFixed(Math.max(numDecimals, balance.dp()))}\n        />\n    )\n}\n\nBalance.propTypes = {\n    balance: PropTypes.object.isRequired, // BigNum instance\n    numDecimals: PropTypes.number\n}\n\nBalance.defaultProps = {\n    numDecimals: 3\n}\n\nexport default Balance\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    if (ensName) {\n        return <div>\n            <div><strong>{ensName}</strong></div>\n            <div><small>{address}</small></div>\n        </div>\n    } else {\n        return <div><strong>{address}</strong></div>\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from '../address/addressActions'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst BalanceItemDetail = (props) => {\n    const {address, ensName, balance, loading, reloadBalance, url/*, addressType, openTransferModal*/} = props\n    /*const external = (addressType !== ADDRESS_TYPE_OWNED)*/\n\n    /*\n        transfer button removed until functionality gets implemented...\n\n                <Button icon='external share'\n                    size='mini'\n                    circular\n                    onClick={openTransferModal}\n                    disabled={external}\n                />\n     */\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                <Link to={url}><AddressDisplay address={address} ensName={ensName}/></Link>\n            </Table.Cell>\n            <Table.Cell><Balance balance={balance}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nBalanceItemDetail.propTypes = {\n    address: PropTypes.string.isRequired,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    ensName: PropTypes.string,\n    balance: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    url: PropTypes.string.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemDetail from './BalanceItemDetail'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport {showModal} from '../modal/modalActions'\n\nclass BalanceItemDetailContainer extends Component {\n    render() {\n        return (\n            <BalanceItemDetail address={this.props.address}\n                               addressType={this.props.addressType}\n                               balance={this.props.balance}\n                               reloadBalance={this.props.reloadBalance}\n                               loading={this.props.loading}\n                               url={this.props.url}\n                               openTransferModal={this.props.openTransferModal}\n                               ensName={this.props.ensName}\n            />\n        )\n    }\n}\n\nBalanceItemDetailContainer.propTypes = {\n    address: PropTypes.string.isRequired,\n    balance: PropTypes.object.isRequired,\n    tokenBalanceId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n}\n\nBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const addressEntry = state.addresses.byId[balanceEntry.addressId]\n    const balance = balanceEntry.balance.dividedBy(token.decimals)\n    return {\n        balance,\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n        url: \"/events/\" + token.id + \"/\" + addressEntry.address\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    },\n    openTransferModal: () => {\n        dispatch(showModal('TRANSFER_FORM_CONTAINER',\n            {\n                tokenBalanceId: ownProps.tokenBalanceId,\n            }\n        ))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport BalanceItemDetailContainer from './BalanceItemDetailContainer'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\n\nconst BalanceItem = (props) => {\n    const {expanded, tokenName, tokenSymbol, tokenBalances, total, reloadBalance, loading, tokenEventsLinkOptions, toggleCollapse} = props\n    let eventLink = <Link to={tokenEventsLinkOptions}>{tokenName} ({tokenSymbol})</Link>\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>{eventLink}</Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value><Balance balance={total}/></Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <BalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    } else {\n        tableBody = null\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nBalanceItem.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    total: PropTypes.object.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    tokenEventsLinkOptions: PropTypes.object.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport BalanceItem from './BalanceItem'\nimport _ from 'lodash'\n\n\nclass BalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        return (\n            <BalanceItem tokenName={this.props.token.name}\n                         tokenSymbol={this.props.token.symbol}\n                         tokenBalances={this.props.tokenBalances}\n                         total={this.props.total}\n                         reloadBalance={this.reloadBalance}\n                         loading={this.props.loading}\n                         tokenEventsLinkOptions={this.props.tokenEventsLinkOptions}\n                         expanded={this.state.expanded}\n                         toggleCollapse={this.toggleCollapse}\n            />\n        )\n    }\n\n    /*\n    shouldComponentUpdate(nextProps) {\n        // Render() should only ever be necessary when loading state, token itself or\n        // it's total balance changes, i.e. an address was added/removed to\n        // the watch list or the balance of an address changed.\n        return (\n            (!nextProps.total.equals(this.props.total)) ||\n            (nextProps.tokenId !== this.props.tokenId) ||\n            (nextProps.loading !== this.props.loading)\n        )\n    }*/\n}\n\nBalanceItemContainer.propTypes = {\n}\n\nBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n\n    // calculate total balance of all addresses\n    const total = _.reduce(ownProps.tokenBalances, (sum, tokenBalance) => {\n        return sum.plus(tokenBalance.balance)\n    }, new BigNumber(0) ).dividedBy(token.decimals)\n\n    // if any of the tokenBalances is loading, the whole container is loading\n    let loading = false\n    ownProps.tokenBalances.forEach(tokenBalance => {\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n    })\n\n    const tokenEventsLinkOptions = {\n        pathname: '/events/' + ownProps.tokenId,\n    }\n\n    return {\n        token,\n        total,\n        loading,\n        tokenEventsLinkOptions,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport BalanceItemContainer from './BalanceItemContainer'\n\nconst BalancesList = (props) => {\n    return (\n        <div>\n            {Object.entries(props.balancesByToken).map(entry =>\n                <BalanceItemContainer key={entry[0]} tokenId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nBalancesList.propTypes = {\n    balancesByToken: PropTypes.object.isRequired\n}\n\nBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default BalancesList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Input, Icon} from 'semantic-ui-react'\n\nconst TokenListFilter = (props) => {\n    const {filterString, handleChange, filterIsActive, clearFilter} = props\n    let icon = null\n    if (filterIsActive) {\n        icon = <Icon name='eraser' circular link onClick={clearFilter} />\n    }\n    return (\n        <Input label='Filter'\n               name='filter'\n               placeholder='Enter name, symbol or contract address'\n               onChange={handleChange}\n               value={filterString}\n               icon={icon}\n               fluid\n        />\n    )\n}\n\nTokenListFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    displayed: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n}\n\nTokenListFilter.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenListFilter\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {setFilterProps} from './tokenActions'\nimport TokenListFilter from './TokenListFilter'\nimport {setBalanceFilterString} from '../balance/balanceActions'\n\nclass TokenListFilterContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, {name, value}) {\n        this.props.setFilterString(value)\n    }\n\n    render() {\n        return <TokenListFilter filterString={this.props.filterString}\n                                handleChange={this.handleChange}\n                                filterIsActive={this.props.filterIsActive}\n                                displayed={this.props.displayed}\n                                total={this.props.total}\n                                clearFilter={this.props.clearFilter}/>\n    }\n}\n\nTokenListFilterContainer.propTypes = {\n    target: PropTypes.string.isRequired,\n    total: PropTypes.number.isRequired,\n    displayed: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    filterString: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            total: state.tokens.allIds.length,\n            displayed: state.tokens.listState.matchedTokenIds.length,\n            filterIsActive: state.tokens.listState.filterIsActive,\n            filterString: state.tokens.listState.filter,\n            showOnlyTracked: state.tokens.listState.showOnlyTracked,\n        }\n    }\n    if (target === 'balancelist') {\n        return {\n            total: state.balance.allIds.length,\n            displayed: state.balance.listState.matchedBalanceIds.length,\n            filterIsActive: state.balance.listState.filter.length > 0,\n            filterString: state.balance.listState.filter,\n        }\n    }\n\n    return {}\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            clearFilter: () => {\n                dispatch(setFilterProps({filterString: ''}))\n            },\n            setFilterString: (filter) => {\n                dispatch(setFilterProps({filterString: filter}))\n            }\n        }\n    }\n\n    if (target === 'balancelist') {\n        return {\n            clearFilter: () => {\n                dispatch(setBalanceFilterString(''))\n            },\n            setFilterString: (filter) => {\n                dispatch(setBalanceFilterString(filter))\n            }\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenListFilterContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header} from 'semantic-ui-react'\n\nconst ScreenHeader = (props) => {\n    const {title} = props\n    /*\n     custom style \"marginTop: 0\" required to prevent header sticking just a little bit outside of its grid row.\n     Not sure if this is an error on my side, a bug of react-semantic-ui or semantic-ui itself, or intended behaviour...\n     */\n    return (\n        <Header as={'h1'} block inverted color={'green'} textAlign={'center'}\n                style={{\n                    marginTop: 0,\n                }}>\n            {title}\n        </Header>\n    )\n}\n\nScreenHeader.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    title: PropTypes.string.isRequired\n}\n\nScreenHeader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ScreenHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Divider, Message} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport BalancesList from '../balance/BalancesList'\nimport TokenListFilterContainer from '../token/TokenListFilterContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Overview = (props) => {\n    const {hasAccounts, balancesByToken} = props\n\n    let body\n    if (hasAccounts) {\n        if (Object.keys(balancesByToken).length) {\n            body = <BalancesList balancesByToken={balancesByToken}/>\n        }\n        else {\n            body = <Message>\n                <Message.Header>\n                    No balances\n                </Message.Header>\n                <Message.Content>\n                    There are no token balances to display. Things you can try:\n                </Message.Content>\n                <Message.List>\n                    <Message.Item>Change the filterstring</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to add additional accounts</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/tokenContracts/'} }>Token Manager</Link> to tracked additional tokens</Message.Item>\n                </Message.List>\n            </Message>\n        }\n    } else {\n        body = <Message>\n            <Message.Header>\n                No accounts\n            </Message.Header>\n            <p>You have no watched or unlocked accounts. Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to setup accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Overview'}/>\n            {hasAccounts && <TokenListFilterContainer target={'balancelist'} />}\n            <Divider/>\n            {body}\n        </React.Fragment>\n    )\n}\n\nOverview.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired,\n}\n\nOverview.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default Overview\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport Overview from './Overview'\nimport {connect} from 'react-redux'\nimport {groupBy} from 'lodash'\n\nclass OverviewContainer extends Component {\n    render() {\n        const {hasAccounts, balancesByToken} = this.props\n        return (\n            <Overview hasAccounts={hasAccounts} balancesByToken={balancesByToken}/>\n        )\n    }\n}\n\nOverviewContainer.propTypes = {\n    hasAccounts: PropTypes.bool.isRequired,\n    balancesByToken: PropTypes.object.isRequired\n}\n\nOverviewContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const hasAccounts = (state.addresses.allIds.length > 0)\n    const filterIsActive = (state.balance.listState.filter.length > 0)\n\n    // get balanceIds to display\n    const balanceIds = filterIsActive ? state.balance.listState.matchedBalanceIds : state.balance.allIds\n    // map IDs to Entries\n    const balanceEntries = balanceIds.map(id => state.balance.byId[id])\n    // now group the balances by token\n    const balancesByToken = groupBy(balanceEntries, 'tokenId')\n\n    return {\n        hasAccounts,\n        balancesByToken,\n    }\n}\n\nexport default connect(mapStateToProps)(OverviewContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Web3Info = (props) => {\n    const {name, id, nodeVersion, block} = props\n    const gitHub = 'https://github.com/TripleSpeeder/TokenStation'\n    const contact = 'michael@m-bauer.org'\n    const srcUrl = 'https://github.com/ethereum-lists/tokens'\n    return (\n        <React.Fragment>\n            <p>\n                Network: {name} ({id}) | Block: {block ? block.number : '?'} | Node version: {nodeVersion}\n            </p>\n            <p>\n                ERC20 contract data origin: <strong><a href={srcUrl} target='_blank' rel='noopener noreferrer'>{srcUrl}</a></strong>\n            </p>\n            <p>\n                GitHub: <strong><a target='_blank' rel='noopener noreferrer' href={gitHub}>{gitHub}</a></strong> | contact: <strong><a href={'mailto:' + contact}>{contact}</a></strong>\n            </p>\n        </React.Fragment>\n    )\n\n}\n\nWeb3Info.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.shape({\n            number: PropTypes.number,\n            timestamp: PropTypes.number\n        }),\n    apiVersion: PropTypes.string,\n    nodeVersion: PropTypes.string,\n}\n\nexport default Web3Info\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport Web3Info from \"./web3Info\"\nimport {Segment} from 'semantic-ui-react'\n\nclass Web3Container extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.filter = null\n    }\n\n    render() {\n        const apiVersion = this.props.web3.version.api\n        return <Segment textAlign='center'>\n            <Web3Info apiVersion={apiVersion}\n                         name={this.props.name}\n                         block={this.props.block}\n                         id={this.props.id}\n                         nodeVersion={this.props.nodeVersion}\n            />\n        </Segment>\n    }\n}\n\nWeb3Container.propTypes = {\n    web3: PropTypes.object,\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.object,\n    nodeVersion: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n    web3: state.web3Instance.web3,\n    name: state.web3Instance.name,\n    id: state.web3Instance.id,\n    block: state.web3Instance.block,\n    nodeVersion: state.web3Instance.nodeVersion\n})\n\nexport default connect(mapStateToProps)(Web3Container)\n","import React from 'react'\nimport {Icon, Menu} from 'semantic-ui-react'\nimport {NavLink} from 'react-router-dom'\n\n\nconst Sidebar = () => {\n    return (\n        <Menu icon='labeled' fluid inverted vertical pointing size={'large'}>\n            <Menu.Item header>TokenStation.io</Menu.Item>\n            <Menu.Item as={NavLink} to='/overview' name='overview'>\n                <Icon name='home' />\n                Overview\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/accounts' name='accounts'>\n                <Icon name='users' />\n                Manage Accounts\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/events' name='events' >\n                <Icon name='exchange' />\n                View Transfer Events\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/tokenContracts' name='tokenContracts'>\n                <Icon name='cube' />\n                Manage Contracts\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from './addressActions'\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst AddressRow = (props) => {\n\n    const {address, addressType, ensName, handleRemove} = props\n\n    let iconName, popupContent, removeButton\n    if (addressType === ADDRESS_TYPE_OWNED) {\n        iconName = 'unlock'\n        popupContent = 'This is one of your addresses'\n        removeButton = null\n    } else {\n        iconName = 'eye'\n        popupContent = 'This is a watch-only address'\n        removeButton = <Button size='tiny' onClick={handleRemove} icon='delete'/>\n    }\n\n    const icon = <Popup trigger={<Icon size='large' name={iconName}/>}\n                        content={popupContent}\n    />\n\n    /*\n    let listProgress = null\n    if (this.props.progressCurrent < this.props.progressTotal) {\n        listProgress = <List.Description>\n            <Progress size='small'\n                      value={this.props.progressCurrent}\n                      total={this.props.progressTotal}\n                      progress='ratio'\n                      precision={1}\n            />\n        </List.Description>\n    }*/\n    return (\n        <Table.Row>\n            <Table.Cell textAlign={'left'} collapsing>\n                {icon}\n            </Table.Cell>\n            <Table.Cell textAlign={'left'}>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n            <Table.Cell textAlign={'right'} collapsing>\n                {removeButton}\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressRow.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nAddressRow.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressRow\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {\n    ADDRESS_BALANCES_STATES, removeAddress, resumeGetBalances\n} from './addressActions'\nimport {BALANCE_STATES} from '../balance/balanceActions'\nimport AddressRow from './AddressRow'\n\n\nclass AddressContainer extends PureComponent {\n\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            resumedAfterRehydrate: false\n        }\n    }\n\n    componentDidMount() {\n        this.checkResumeLoading(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        this.checkResumeLoading(newProps)\n    }\n\n    checkResumeLoading(props) {\n        // in case address balance was in loading state while hydrating, continue loading\n        if ((props.balancesState === ADDRESS_BALANCES_STATES.HYDRATED_WHILE_LOADING) &&\n            (!this.state.resumedAfterRehydrate)) {\n            this.setState({\n                resumedAfterRehydrate: true\n            })\n            console.log(\"Continue loading balances for \" + props.address)\n            props.resumeGetBalances(props.addressId, props.progressCurrent)\n        }\n    }\n\n    handleRemove = () => {\n        this.props.removeAddress(this.props.addressId)\n    }\n\n    render() {\n        return <AddressRow address={this.props.address}\n                           addressType={this.props.addressType}\n                           ensName={this.props.ensName}\n                           handleRemove={this.handleRemove}\n        />\n    }\n}\n\nAddressContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    removeAddress: PropTypes.func.isRequired,\n    progressTotal: PropTypes.number.isRequired,\n    progressCurrent: PropTypes.number.isRequired\n}\n\nAddressContainer.defaultProps = {}\n\nconst mapStateToProps = (state, ownProps) => {\n    const addressEntry = state.addresses.byId[ownProps.addressId]\n    const progressTotal = state.tokens.listState.total\n    // count all balance entries that include addressId\n    const matchedBalanceEntries = Object.values(state.balance.byId).filter(entry => {\n        return ((entry.addressId === ownProps.addressId) &&\n            (entry.balanceState === BALANCE_STATES.INITIALIZED))\n    })\n    const progressCurrent = matchedBalanceEntries.length\n\n    return {\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        balancesState: addressEntry.balancesState,\n        progressTotal,\n        progressCurrent\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAddress: (addressId) => {\n        dispatch(removeAddress(addressId))\n    },\n    resumeGetBalances: (addressId, startIndex) => {\n        dispatch(resumeGetBalances(addressId, startIndex))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst QueryAddressForm = (props) => {\n\n    const {handleChange, handleSubmit, loading, disabled, error, address, ensName, value} = props\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group inline>\n                <Form.Input width={10}\n                            name='address'\n                            placeholder='Address or ENS Name'\n                            error={error}\n                            loading={loading}\n                            onChange={handleChange}\n                            value={value}\n                            label={'Add account'}\n                />\n                <Form.Button\n                    content='Submit'\n                    disabled={disabled}\n                    width={6}\n                />\n            </Form.Group>\n        </Form>\n    )\n}\n\nQueryAddressForm.propTypes = {\n    address: PropTypes.string,\n    ensName: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nQueryAddressForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default QueryAddressForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {addNewAddress, ADDRESS_TYPE_EXTERNAL} from './addressActions'\nimport QueryAddressForm from './QueryAddressForm'\n\n\nexport const addressStates = {\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nexport class QueryAddressFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        }\n        // kraken4='0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n    }\n\n    handleChange = async (e) => {\n        const input=e.target.value\n        let addressState = addressStates.ADDRESS_INVALID\n        let address = ''\n        let ensName = ''\n        // check for valid input (raw address and ENS name)\n        const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n        const validENSName = (/.*\\.eth$/i.test(input))\n        if (validENSName) {\n            // start resolving process\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_RESOLVING,\n                    address: '',\n                    ensName: input,\n                    input,\n                }\n            )\n            try {\n                const resolvedAddress = await this.props.ens.lookup(input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_VALID,\n                        address: resolvedAddress,\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            } catch (e) {\n                console.log(\"Could not resolve \" + input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_INVALID,\n                        address: '',\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            }\n        }\n        else if(validAddress) {\n            // TODO: Lookup reverse ENS entry\n            addressState = addressStates.ADDRESS_VALID\n            ensName = ''\n            address = input\n            this.setState(\n                {\n                    addressState,\n                    address,\n                    ensName,\n                    input,\n                }\n            )\n        }\n        else {\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_INVALID,\n                    address: '',\n                    ensName: '',\n                    input,\n                }\n            )\n        }\n    }\n\n    handleSubmit = () => {\n        const { address, ensName } = this.state\n        this.props.addNewAddress(address, ensName, ADDRESS_TYPE_EXTERNAL)\n        this.setState({\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        })\n    }\n\n    render() {\n        const error = (this.state.addressState === addressStates.ADDRESS_INVALID)\n        const loading = (this.state.addressState === addressStates.ADDRESS_RESOLVING)\n        const disabled = (error || loading)\n        return (\n            <QueryAddressForm handleChange={this.handleChange}\n                              handleSubmit={this.handleSubmit}\n                              error = {error}\n                              loading={loading}\n                              disabled={disabled}\n                              address={this.state.address}\n                              ensName={this.state.ensName}\n                              value={this.state.input}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const ens = state.web3Instance.ens\n    return {\n        ens\n    }\n}\n\nlet mapDispatchToProps = dispatch => ({\n    addNewAddress: (address, ensName, type) => {\n        dispatch(addNewAddress(address, ensName, type))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryAddressFormContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Divider, Header, Message, Segment, Table} from 'semantic-ui-react'\nimport AddressContainer from './AddressContainer'\nimport QueryAddressFormContainer from \"./QueryAddressFormContainer\"\nimport {ETH_ENABLE_STATES} from '../web3/web3Actions'\n\nconst AddressList = (props) => {\n    let ownTable, watchTable\n    const {ethEnableState, ethEnable} = props\n    let waitingGrant = (ethEnableState === ETH_ENABLE_STATES.WAITING)\n\n    if (props.ownAddressIds.length) {\n        ownTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.ownAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else if (ethEnableState === ETH_ENABLE_STATES.GRANTED) {\n        // Access granted, but no accounts? Must be either Mist with no accounts shared or locked Metamask.\n        ownTable = <Message>\n            <Message.Header>\n                No personal accounts\n            </Message.Header>\n            <p>You need to share your accounts so they are visible here. Log in to Metamask or share accounts in Mist .</p>\n        </Message>\n    } else {\n        // No accounts and no access. Ask for it.\n        ownTable = <Message>\n            <Message.Header>\n                No access to personal accounts\n            </Message.Header>\n            <p>You can grant access to your personal accounts. This will automatically put the accounts to the watch\n                list.</p>\n            <p><Button primary disabled={waitingGrant} loading={waitingGrant} onClick={ethEnable}>Grant access</Button></p>\n        </Message>\n    }\n\n    if (props.watchAddressIds.length) {\n        watchTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.watchAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else {\n        watchTable = <Message>\n            <Message.Header>\n                No watched accounts\n            </Message.Header>\n            <p>You don't have any watched accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment>\n                <Header dividing as='h2'>Personal Accounts</Header>\n                {ownTable}\n            </Segment>\n            <Segment>\n                <Header dividing as='h2'>Watched Accounts</Header>\n                {watchTable}\n                <Divider/>\n                <QueryAddressFormContainer />\n            </Segment>\n        </React.Fragment>\n    )\n}\n\nAddressList.propTypes = {\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n    ethEnableState: PropTypes.oneOf(Object.values(ETH_ENABLE_STATES)),\n    ethEnable: PropTypes.func.isRequired,\n}\n\nexport default AddressList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED, changeOwnAddresses} from './addressActions'\nimport AddressList from './AddressList'\nimport {ETH_ENABLE_STATES, requestEthEnable} from '../web3/web3Actions'\n\nclass AddressListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.updateWeb3Accounts = this.updateWeb3Accounts.bind(this)\n        this.requestEthEnable = this.requestEthEnable.bind(this)\n        this.checkAccountTimer = 0\n    }\n\n    render() {\n        const ethEnableState = this.props.web3Instance ? this.props.web3Instance.ethEnableState : ETH_ENABLE_STATES.REJECTED\n        return <AddressList watchAddressIds={this.props.watchAddressIds}\n                            ownAddressIds={this.props.ownAddressIds}\n                            ethEnableState={ethEnableState}\n                            ethEnable={this.requestEthEnable}\n        />\n    }\n\n    componentDidMount() {\n        this.initAccounts()\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.web3 && (newProps.web3 !== this.props.web3)) {\n            this.initAccounts(newProps.web3)\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.checkAccountTimer) {\n            clearInterval(this.checkAccountTimer)\n            this.checkAccountTimer = 0\n        }\n    }\n\n    initAccounts(web3 = this.props.web3) {\n        if (web3) {\n            if (this.checkAccountTimer) {\n                clearInterval(this.checkAccountTimer)\n                this.checkAccountTimer = 0\n            }\n            this.updateWeb3Accounts(this.props.web3)\n            if (this.props.web3.currentProvider.isMetaMask === true) {\n                console.log(\"Metamask detected. Watching for account changes\")\n                this.checkAccountTimer = setInterval(this.updateWeb3Accounts, 100)\n            }\n        }\n    }\n\n    updateWeb3Accounts(web3 = this.props.web3) {\n        web3.eth.getAccounts((error, accounts) => {\n            if (accounts) {\n                this.props.changeOwnAddresses(accounts)\n            }\n        })\n    }\n\n    requestEthEnable() {\n        this.props.ethEnable()\n    }\n}\n\nAddressListContainer.propTypes = {\n    web3: PropTypes.object,\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n}\n\nAddressListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const ownAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_OWNED))\n    const watchAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_EXTERNAL))\n    return {\n        ownAddressIds,\n        watchAddressIds,\n        web3Instance: state.web3Instance ? state.web3Instance : null,\n        web3: state.web3Instance ? state.web3Instance.web3 : null,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeOwnAddresses: (accounts) => {\n        dispatch(changeOwnAddresses(accounts))\n    },\n    ethEnable: () => {\n        dispatch(requestEthEnable())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer)\n","import React from 'react'\nimport AddressListContainer from '../address/AddressListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Accounts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Accounts'}/>\n            <AddressListContainer />\n        </React.Fragment>\n    )\n}\n\nexport default Accounts\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Form} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst SelectableToken = (props) => {\n\n    const {address, ensName, name, symbol, checked, onChange} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell collapsing>\n                <Form.Checkbox checked={checked} onChange={onChange}/>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{name}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{symbol}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nSelectableToken.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default SelectableToken\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport SelectableToken from \"./SelectableToken\"\nimport {changeTokenTrackingThunk} from './tokenActions'\n\n\nclass SelectableTokenContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, data) {\n        const {checked} = data\n        this.props.onChange(this.props.tokenId, checked)\n    }\n\n    render() {\n        return <SelectableToken id={this.props.tokenId}\n                                address={this.props.tokenAddress}\n                                name={this.props.tokenName}\n                                symbol={this.props.tokenSymbol}\n                                onChange={this.handleChange}\n                                checked={this.props.tokenTracked}\n        />\n    }\n}\n\nSelectableTokenContainer.propTypes = {\n    tokenId: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nSelectableTokenContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n    const tracked = (state.tokens.trackedIds.indexOf(ownProps.tokenId) > -1)\n    return {\n        tokenAddress: token.address,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenTracked: tracked,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (tokenId, checked) => {\n        dispatch(changeTokenTrackingThunk(tokenId, checked))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Message} from 'semantic-ui-react'\nimport SelectableTokenContainer from \"./SelectableTokenContainer\"\n\nconst SelectableTokenList = (props) => {\n\n    const {tokenList} = props\n\n    if (tokenList.length) {\n        return (\n            <Table celled>\n                <Table.Body>\n                {tokenList.map((tokenId) => <SelectableTokenContainer\n                    key={tokenId}\n                    tokenId={tokenId}\n                />)}\n                </Table.Body>\n            </Table>\n        )\n    } else {\n        return (\n            <Message negative>\n                <Message.Header>No token contracts to display.</Message.Header>\n                <Message.Content>Things you can try:</Message.Content>\n                <Message.List items={['change/clear the filterstring', 'check if you are connected to the correct network']}>\n                </Message.List>\n            </Message>\n        )\n    }\n}\n\nSelectableTokenList.propTypes = {\n    tokenList: PropTypes.array.isRequired\n}\n\nexport default SelectableTokenList\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Grid, Divider, Checkbox, Pagination, Container, Dropdown} from 'semantic-ui-react'\nimport TokenListFilterContainer from './TokenListFilterContainer'\nimport SelectableTokenList from \"./SelectableTokenList\"\nimport {changeTokenListPage, clearTokenList, setFilterProps} from './tokenActions'\n\nclass SelectableTokenListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleShowOnlyTrackedChange = this.handleShowOnlyTrackedChange.bind(this)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n        this.handleLoadTokens = this.handleLoadTokens.bind(this)\n    }\n\n    handleShowOnlyTrackedChange(e, data) {\n        const {checked} = data\n        this.props.setShowTracked(checked)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTokenListPage(activePage)\n    }\n\n    handleLoadTokens() {\n        this.props.clearTokenList()\n    }\n\n    render() {\n        let pager = null\n        if (this.props.totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                        <Pagination activePage={this.props.activePage}\n                                    onPageChange={this.handlePaginationChange}\n                                    totalPages={this.props.totalPages}/>\n                    </Container>\n        }\n        return (\n            <React.Fragment>\n                <Grid verticalAlign='middle' columns={2} divided>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Checkbox toggle label='Only show tracked token' checked={this.props.showOnlyTracked} onChange={this.handleShowOnlyTrackedChange} />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                            <TokenListFilterContainer target={'tokenlist'}/>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Dropdown icon={'setting'}>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item text='Reload token list' onClick={this.handleLoadTokens} />\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Divider/>\n                <SelectableTokenList\n                    tokenList={this.props.tokenIds}\n                />\n                {pager}\n            </React.Fragment>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    const listState = state.tokens.listState.listState\n    const itemsPerPage = 20\n    let totalPages = 1\n    const activePage = state.tokens.listState.activePage\n    const filterIsActive = state.tokens.listState.filterIsActive\n    let tokenIds = filterIsActive ? state.tokens.listState.matchedTokenIds : state.tokens.allIds\n    const showOnlyTracked = state.tokens.listState.showOnlyTracked\n    const numVisibleTokens = tokenIds.length\n    if (numVisibleTokens) {\n        totalPages = Math.ceil(numVisibleTokens / itemsPerPage)\n    }\n    const sliceStart = (activePage-1)*itemsPerPage\n    tokenIds = tokenIds.slice(sliceStart, sliceStart+itemsPerPage)\n    return {\n        tokenIds,\n        showOnlyTracked,\n        activePage,\n        totalPages,\n        listState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setShowTracked: (showOnlyTracked) => {\n        dispatch(setFilterProps({showOnlyTracked}))\n    },\n    setTokenListPage: (activePage) => {\n        dispatch(changeTokenListPage(activePage))\n    },\n    clearTokenList: () => {\n        dispatch(clearTokenList())\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenListContainer)\n","import React from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport SelectableTokenListContainer from \"../token/SelectableTokenListContainer\"\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst TokenContracts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Token Contracts'}/>\n            <Message info icon>\n                <Icon name={'info'}/>\n                <Message.Header>Select which tokens to track</Message.Header>\n                <Message.Content>\n                    In the list below, check the tokens you want to keep track of. Use the filter to\n                    quickly find specific tokens. You can filter by token name, symbol or contract address.\n                </Message.Content>\n            </Message>\n            <SelectableTokenListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default TokenContracts\n","import React, {Component} from 'react'\nimport {Container, Dropdown, Form, Grid} from 'semantic-ui-react'\nimport {changeSelectorTokenId} from '../token/tokenActions'\nimport {connect} from 'react-redux'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventFilterContainer extends Component {\n\n    render() {\n        const {\n            tokenOptions, selectedTokenId, onTokenSelect,\n            addressOptions, selectedAddressId, onAddressSelect,\n        } = this.props\n\n        return (\n            <Container>\n\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>Show Transfers of token:</label>\n                                <Dropdown fluid search selection\n                                          options={tokenOptions}\n                                          onChange={onTokenSelect}\n                                          value={selectedTokenId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>To/From Account:</label>\n                                <Dropdown fluid search selection\n                                          options={addressOptions}\n                                          onChange={onAddressSelect}\n                                          value={selectedAddressId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Container>\n        )\n    }\n}\n\nEventFilterContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventFilterContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n\n    const selectedTokenId = state.tokens.selector.selectedTokenId\n    const tokenOptions = state.tokens.trackedIds.map(id => (\n        {\n            key: id,\n            value: id,\n            text: state.tokens.byId[id].name + \" (\" + state.tokens.byId[id].symbol + \")\"\n        }\n    ))\n    tokenOptions.sort((a, b) => (a.text > b.text))\n\n    const selectedAddressId = state.addresses.selector.selectedAddressId\n    const addressOptions = state.addresses.allIds.map(id =>\n        ({\n            key: id,\n            value: id,\n            text: state.addresses.byId[id].ensName ? state.addresses.byId[id].ensName : id\n        })\n    )\n    addressOptions.sort((a, b) => (a.text > b.text))\n\n    return {\n        tokenOptions,\n        selectedTokenId,\n        addressOptions,\n        selectedAddressId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTokenSelect: (e, {value}) => {\n            dispatch(changeSelectorTokenId(value))\n        },\n        onAddressSelect: (e, {value}) => {\n            dispatch(changeSelectorAddressId(value))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFilterContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, } from 'semantic-ui-react'\n\nconst EventLoader = (props) => {\n    const {loading, loadingFromBlock, loadingToBlock, resultCount, resultFromBlock, currentChunk, maxChunks,\n        resultToBlock, onLoadMore, canLoadMore} = props\n\n    let button = <Button icon disabled={!canLoadMore} onClick={onLoadMore} labelPosition={'left'}><Icon name={'search'}/>Load more</Button>\n\n    if (loading) {\n        button = <Message warning icon>\n                    <Icon loading name={'circle notched'}/>\n            <Message.Content>\n                <Message.Header>Loading events</Message.Header>\n                Scanning {loadingFromBlock} - {loadingToBlock} - Chunk {currentChunk}/{maxChunks}\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Grid verticalAlign='middle' columns={2}>\n            <Grid.Row>\n                <Grid.Column >\n                    <Message info icon>\n                        <Icon name={'exchange'}/>\n                        <Message.Content>\n                            <Message.Header>Showing {resultCount} transfer events</Message.Header>\n                             Block {resultFromBlock} to {resultToBlock}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n                <Grid.Column>\n                    {button}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nEventLoader.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loadingFromBlock: PropTypes.number,\n    loadingToBlock: PropTypes.number,\n    loadingCurrentBlock: PropTypes.number,\n    resultCount: PropTypes.number.isRequired,\n    resultFromBlock: PropTypes.number.isRequired,\n    resultFromBlockDate: PropTypes.string.isRequired,\n    resultToBlock: PropTypes.number.isRequired,\n    onLoadMore: PropTypes.func.isRequired,\n    currentChunk: PropTypes.number.isRequired,\n    maxChunks: PropTypes.number.isRequired,\n    canLoadMore: PropTypes.bool.isRequired,\n}\n\nEventLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default EventLoader\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport EventLoader from './EventLoader'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport {loadTokenTransferEvents} from '../token/tokenActions'\n\n\nclass EventLoaderContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.loadMoreEvents = this.loadMoreEvents.bind(this)\n    }\n\n    componentDidMount() {\n        EventLoaderContainer.checkEventsLoaded(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventLoaderContainer.checkEventsLoaded(newProps)\n    }\n\n    static checkEventsLoaded(props) {\n        if (props.currentBlock && props.aceId && (props.hasAceEntry === false)) {\n            // I have an aceID, but no according entry. Better start loading...\n            //const rangeEnd = props.currentBlock\n            //const rangeStart = rangeEnd - 10000\n            console.log(\"Loading events \"/* + rangeStart + \"-\" + rangeEnd*/)\n            props.loadTokenTransferEvents(\n                0,\n                0,\n                props.tokenId,\n                props.addressId\n            )\n        }\n    }\n\n    loadMoreEvents() {\n        // query the previous 1000 blocks for token transfers to/from my addresses\n        const rangeEnd = this.props.resultFromBlock ? this.props.resultFromBlock : this.props.currentBlock\n        const rangeStart = rangeEnd - 10000\n        console.log(\"Loading events \" + rangeStart + \"-\" + rangeEnd)\n        this.props.loadTokenTransferEvents(\n            rangeStart,\n            rangeEnd,\n            this.props.tokenId,\n            this.props.addressId\n        )\n    }\n\n    render() {\n        const {\n            loading, resultCount, resultFromBlock, resultFromBlockDate, resultToBlock, canLoadMore,\n            loadingFromBlock, loadingToBlock, loadingCurrentBlock, currentChunk, maxChunks } = this.props\n        return (\n            <EventLoader\n                loading={loading}\n                resultCount={resultCount}\n                resultFromBlock={resultFromBlock}\n                resultFromBlockDate={resultFromBlockDate}\n                resultToBlock={resultToBlock}\n                onLoadMore={this.loadMoreEvents}\n                loadingFromBlock={loadingFromBlock}\n                loadingToBlock={loadingToBlock}\n                loadingCurrentBlock={loadingCurrentBlock}\n                currentChunk={currentChunk}\n                maxChunks={maxChunks}\n                canLoadMore={canLoadMore}\n            />\n        )\n    }\n}\n\nEventLoaderContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventLoaderContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    let resultCount = 0\n    let loading = false\n    let resultFromBlock = 0\n    let resultToBlock = 0\n    let resultFromBlockDate = 'XXX'\n    let aceId = undefined\n    let aceEntry = undefined\n    let loadingFromBlock = 0\n    let loadingToBlock = 0\n    let loadingCurrentBlock = 0\n    let tokenId = state.tokens.selector.selectedTokenId\n    // make sure selected token is actually existing and being tracked. Might be an old token from\n    // browser localstorage or from another network\n    if ((state.tokens.allIds.indexOf(tokenId) === -1) || (state.tokens.trackedIds.indexOf(tokenId) ===-1))\n    {\n        tokenId = undefined\n    }\n    const addressId = state.addresses.selector.selectedAddressId\n    const currentBlock = state.web3Instance.block.number\n    const currentChunk = state.events.listState.currentChunk\n    const maxChunks = state.events.listState.maxChunks\n    const canLoadMore = Boolean(tokenId && addressId)\n    if (tokenId && addressId) {\n        aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n        if (aceEntry) {\n            // okay, entry existing. Now look at checked block range\n            resultFromBlock = aceEntry.firstBlock\n            resultToBlock = aceEntry.lastBlock\n            resultCount = aceEntry.eventIds.length\n            // is aceEntry currently being loaded?\n            loading = aceEntry.isLoading\n            loadingFromBlock = aceEntry.loadingFromBlock\n            loadingToBlock = aceEntry.loadingToBlock\n            loadingCurrentBlock = aceEntry.loadingCurrentBlock\n        }\n    }\n\n    return {\n        loading,\n        resultCount,\n        resultFromBlock,\n        resultFromBlockDate,\n        resultToBlock,\n        currentBlock,\n        tokenId,\n        addressId,\n        aceId,\n        hasAceEntry: Boolean(aceEntry),\n        loadingToBlock,\n        loadingFromBlock,\n        loadingCurrentBlock,\n        currentChunk,\n        maxChunks,\n        canLoadMore\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenTransferEvents: (firstBlock, lastBlock, tokenId, addressId) => {\n        dispatch(loadTokenTransferEvents(tokenId, firstBlock, lastBlock, [addressId]))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventLoaderContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\nconst TxHashDisplay = (props) => {\n    const {txHash} = props\n    const shortHash = txHash.slice(0, 10).concat('...')\n    const trigger = <span>{shortHash}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={txHash}\n        />\n    )\n}\n\nTxHashDisplay.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    txHash: PropTypes.string.isRequired\n}\n\n\nexport default TxHashDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Table} from 'semantic-ui-react'\nimport TxHashDisplay from '../common/TxHashDisplay'\nimport AddressDisplay from '../common/AddressDisplay'\n\nexport const TRANSFER_EVENT_TYPES = {\n    NEUTRAL: 'neutral',\n    POSITIVE: 'postivie',\n    NEGATIVE: 'negative'\n}\n\nconst TransferEvent = (props) => {\n    const {txHash, blockNumber, from, fromENS, to, toENS, type} = props\n    const quantity = props.quantity.toFixed(6)\n    let icon = null\n    let positive = false\n    let negative = false\n    switch(type) {\n        case TRANSFER_EVENT_TYPES.POSITIVE:\n            icon = <Icon name='plus' color='green' circular/>\n            positive = true\n            break\n        case TRANSFER_EVENT_TYPES.NEGATIVE:\n            icon = <Icon name='minus' color='red' circular/>\n            negative = true\n            break\n        case TRANSFER_EVENT_TYPES.NEUTRAL:\n        default:\n            // no icon, neither positive nor negative hint\n    }\n\n    return (\n        <React.Fragment>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>#: </Table.Cell>\n                <Table.Cell><strong>{blockNumber}</strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>From: </Table.Cell>\n                <Table.Cell><AddressDisplay address={from} ensName={fromENS}/></Table.Cell>\n                <Table.Cell rowSpan='2' textAlign={'right'}>{icon}</Table.Cell>\n                <Table.Cell rowSpan='2' positive={positive} negative={negative} textAlign={'right'}>{quantity}</Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>Tx: </Table.Cell>\n                <Table.Cell><strong><TxHashDisplay txHash={txHash}/></strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>To: </Table.Cell>\n                <Table.Cell><AddressDisplay address={to} ensName={toENS}/></Table.Cell>\n            </Table.Row>\n        </React.Fragment>\n    )\n}\n\nTransferEvent.propTypes = {\n    txHash: PropTypes.string.isRequired,\n    blockNumber: PropTypes.number.isRequired,\n    from: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    fromENS: PropTypes.string,\n    toENS: PropTypes.string,\n    type: PropTypes.oneOf([\n        TRANSFER_EVENT_TYPES.NEUTRAL,\n        TRANSFER_EVENT_TYPES.POSITIVE,\n        TRANSFER_EVENT_TYPES.NEGATIVE\n    ]).isRequired,\n    quantity: PropTypes.object.isRequired, // BigNum\n}\n\nTransferEvent.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEvent\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport TransferEvent, {TRANSFER_EVENT_TYPES} from './TransferEvent'\n\nclass TransferEventContainer extends PureComponent {\n    render() {\n        const {txHash, blockNumber, from, to, type, quantity, positive, negative} = this.props\n        return (\n            <TransferEvent blockNumber={blockNumber}\n                           from={from}\n                           to={to}\n                           quantity={quantity}\n                           txHash={txHash}\n                           type={type}\n                           positive={positive}\n                           negative={negative}\n            />\n        )\n    }\n}\n\nTransferEventContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventId: PropTypes.string.isRequired,\n}\n\nTransferEventContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const transferEvent = state.events.byId[ownProps.transferEventId]\n    const addressId = state.addresses.selector.selectedAddressId\n    const rawEvent = transferEvent.transferEvent\n    const token = state.tokens.byId[transferEvent.tokenId]\n    const quantity = rawEvent.args._value.dividedBy(token.decimals)\n    const from = rawEvent.args._from\n    const to = rawEvent.args._to\n    // events that are not to/from one of the watched accounts are neutral\n    let type = TRANSFER_EVENT_TYPES.NEUTRAL\n    if (addressId) {\n        // check if transfer is to/from own address\n        type = addressId.toLowerCase() === from ? TRANSFER_EVENT_TYPES.NEGATIVE : TRANSFER_EVENT_TYPES.POSITIVE\n    }\n    return {\n        txHash: rawEvent.transactionHash,\n        blockNumber: rawEvent.blockNumber,\n        from,\n        to,\n        type,\n        quantity,\n    }\n}\n\nexport default connect(mapStateToProps)(TransferEventContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table} from 'semantic-ui-react'\nimport TransferEventContainer from './TransferEventContainer'\n\nconst TransferEventsList = (props) => {\n    return (\n        <Table compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>Block#/TransactionHash</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>From/To</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'right'}>Quantity</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {props.transferEventIds.map(transferEventId =>\n                    <TransferEventContainer key={transferEventId}\n                                            transferEventId={transferEventId}\n                    />\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n\nTransferEventsList.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventIds: PropTypes.array.isRequired,\n}\n\nTransferEventsList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEventsList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport TransferEventsList from './TransferEventsList'\nimport {Container, Pagination} from 'semantic-ui-react'\nimport {changeTransferEventListPage} from './eventActions'\n\nclass TransferEventsListContainer extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTransferEventListPage(activePage)\n    }\n\n    render() {\n        const {aceEventIds, totalPages, activePage} = this.props\n\n        let pager = null\n        if (totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                <Pagination activePage={activePage}\n                            onPageChange={this.handlePaginationChange}\n                            totalPages={totalPages}/>\n            </Container>\n        }\n\n        return (\n            <React.Fragment>\n                <TransferEventsList transferEventIds={aceEventIds}/>\n                {pager}\n            </React.Fragment>\n        )\n    }\n}\n\nTransferEventsListContainer.propTypes = {\n    token: PropTypes.object\n}\n\nTransferEventsListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    const tokenId = state.tokens.selector.selectedTokenId\n    const addressId = state.addresses.selector.selectedAddressId\n    const activePage = state.events.listState.activePage\n\n    const itemsPerPage = 15\n    let totalPages = 1\n    let aceEntry = undefined\n    let aceEventIds = []\n\n    // first try to get aceEntry\n    if (tokenId && addressId) {\n        const aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n    }\n\n    // if there is an aceEntry get actual events and prepare paginator\n    if (aceEntry) {\n        aceEventIds = aceEntry.eventIds\n        totalPages = Math.ceil(aceEventIds.length / itemsPerPage)\n        const sliceStart = (activePage-1)*itemsPerPage\n        aceEventIds = aceEventIds.slice(sliceStart, sliceStart+itemsPerPage)\n    }\n\n    return {\n        aceEventIds,\n        activePage,\n        totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setTransferEventListPage: (activePage) => {\n        dispatch(changeTransferEventListPage(activePage))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferEventsListContainer)\n","import React from 'react'\nimport EventFilterContainer from '../event/EventFilterContainer'\nimport EventLoaderContainer from '../event/EventLoaderContainer'\nimport TransferEventsListContainer from '../event/TransferEventsListContainer'\nimport ScreenHeader from '../screens/ScreenHeader'\n\nconst Events = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Transfer Events'}/>\n            <EventFilterContainer/>\n            <EventLoaderContainer/>\n            <TransferEventsListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default Events\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {changeSelectorTokenId} from '../token/tokenActions'\nimport Events from './Events'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventsContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        EventsContainer.mapRouteParamsToState(props)\n    }\n\n    /* If route params contain tokenId and/or address trigger according actions to have them in store */\n    static mapRouteParamsToState(props) {\n        if (props.match.params.tokenId) {\n            props.setSelectedToken(props.match.params.tokenId)\n            if (props.match.params.address) {\n                props.setSelectedAddress(props.match.params.address)\n            } else {\n                // if a token is provided, but no address -> make sure to display events of all watched addresses\n                props.setSelectedAddress(undefined)\n            }\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventsContainer.mapRouteParamsToState(newProps)\n    }\n\n    render() {\n        return <Events/>\n    }\n}\n\nEventsContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventsContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedToken: (tokenId) => {\n        dispatch(changeSelectorTokenId(tokenId))\n    },\n    setSelectedAddress: (address) => {\n        dispatch(changeSelectorAddressId(address))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Message} from 'semantic-ui-react'\n\nconst NetworkWarning = (props) => {\n    const {networkId, networkName} = props\n\n    return(\n        <Message size={'small'} icon warning>\n            <Icon name='warning' />\n            <Message.Content>\n                <Message.Header>\n                    You are not connected to mainnet!\n                </Message.Header>\n                Your current network: {networkName} (ID: {networkId})\n            </Message.Content>\n        </Message>\n    )\n}\n\nNetworkWarning.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired\n}\n\n\nexport default NetworkWarning\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport NetworkWarning from './NetworkWarning'\nimport Grid from 'semantic-ui-react/dist/es/collections/Grid/Grid'\n\nclass NetworkWarningController extends Component {\n    render() {\n        const {networkId, networkName} = this.props\n        if (networkId === 1) {\n            // mainnet. No need for a warning!\n            return null\n        }\n\n        return (\n            <Grid.Row>\n                <NetworkWarning networkId={networkId} networkName={networkName}/>\n            </Grid.Row>\n        )\n    }\n}\n\nNetworkWarningController.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => {\n    return {\n        networkId: state.web3Instance.id,\n        networkName: state.web3Instance.name,\n    }\n}\n\nexport default connect(mapStateToProps)(NetworkWarningController)\n","import React, {Component} from 'react'\nimport OverviewContainer from '../segments/OverviewContainer'\nimport Web3Container from '../web3/web3Container'\nimport {Grid} from 'semantic-ui-react'\nimport {Route, Switch} from 'react-router-dom'\nimport Sidebar from '../segments/Sidebar'\nimport Accounts from '../segments/Accounts'\nimport TokenContracts from '../segments/TokenContracts'\nimport EventsContainer from '../segments/EventsContainer'\nimport NetworkWarningController from '../web3/NetworkWarningController'\n\nclass LayoutContainer extends Component {\n    render() {\n        const NoMatch = ({ location }) => (\n            <div>\n                <h3>No match for <code>{location.pathname}</code></h3>\n            </div>\n        )\n\n        return (\n            <Grid padded={'vertically'}>\n                <NetworkWarningController/>\n                <Grid.Row>\n                    <Grid.Column width={4} /*style={{ backgroundColor: 'rgb(27, 28, 29)' }}*/>\n                        <Sidebar/>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Switch>\n                            <Route exact path='/' component={OverviewContainer}/>\n                            <Route exact path='/overview/' component={OverviewContainer}/>\n                            <Route path='/accounts/' component={Accounts}/>\n                            <Route path='/events/:tokenId/:address' component={EventsContainer}/>\n                            <Route path='/events/:tokenId/' component={EventsContainer}/>\n                            <Route path='/events/' component={EventsContainer}/>\n                            <Route path='/tokenContracts/' component={TokenContracts}/>\n\n                            <Route component={NoMatch} />\n                        </Switch>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Web3Container/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default LayoutContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Icon, Modal} from 'semantic-ui-react'\n\nconst ModalLoader = (props) => {\n    const {content} = props\n    return (\n        <Modal open={true}>\n            <Header>\n                <Icon loading name={'spinner'}></Icon>\n                <Header.Content>\n                    {content}\n                </Header.Content>\n            </Header>\n        </Modal>\n    )\n}\n\nModalLoader.propTypes = {\n    content: PropTypes.string.isRequired\n}\n\nModalLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ModalLoader\n","import React, {Component, Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {loadTokenList, TOKEN_LIST_STATES} from './tokenActions'\nimport ModalLoader from '../common/ModalLoader'\n\nclass TokenLoaderGate extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.tokenListUrl = \"/tokens_1.json\"\n    }\n\n    componentDidMount() {\n        if (this.props.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(this.props)\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(newProps)\n        }\n    }\n\n    loadTokenList(props) {\n        if (props.networkId >=1 ) {\n            const url = \"/tokens_\" + props.networkId + \".json\"\n            props.loadTokenList(url)\n        }\n    }\n\n    render() {\n        if (this.props.listState === TOKEN_LIST_STATES.INITIALIZED)\n        {\n            // Load the dapp.\n            return Children.only(this.props.children)\n        }\n\n        return(\n            // Display a loading indicator.\n            <ModalLoader content={\"Loading token contracts\"}/>\n        )\n    }}\n\nTokenLoaderGate.propTypes = {\n    listState: PropTypes.string\n}\n\nconst mapStateToProps = (state) => ({\n    listState: state.tokens.listState.listState,\n    networkId: state.web3Instance.id,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenList: (url) => {\n        dispatch(loadTokenList(url))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenLoaderGate)\n","import React, {Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {WEB3_STATES} from './web3Actions'\nimport ModalLoader from '../common/ModalLoader'\nimport {Button, Icon, Modal} from 'semantic-ui-react'\n\nconst Web3Gate = (props) => {\n    const {state, onRetry, children} = props\n\n    switch (state) {\n        case WEB3_STATES.INITIALIZED: {\n            // Gateway passed, render actual content.\n            return Children.only(children)\n        }\n        case WEB3_STATES.ERROR:\n            return (\n                <Modal open={true}>\n                    <Modal.Header>\n                        <Icon name='exclamation'/> No web3 found\n                    </Modal.Header>\n                    <Modal.Content>\n                        <p>Failed to initialize web3. Please enable web3 in your browser, e.g by using the Metamask extension.</p>\n                        <p><Button onClick={onRetry}>Retry</Button></p>\n                    </Modal.Content>\n                </Modal>\n\n            )\n        case WEB3_STATES.LOADING:\n        default: {\n            return (\n                <ModalLoader content={'Waiting on web3 initialization'}/>\n            )\n        }\n    }\n}\n\nWeb3Gate.propTypes = {\n    state: PropTypes.string.isRequired,\n    onRetry: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n}\n\nexport default Web3Gate\n","import React, {Component} from 'react'\nimport {initialize, stopBlockFilter} from './web3Actions'\nimport {connect} from 'react-redux'\nimport Web3Gate from './web3Gate'\n\nclass Web3GateContainer extends Component {\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n    componentWillUnmount() {\n        // Stop listening to new block events\n        this.props.stopBlockFilter()\n    }\n\n    onRetry = () => {\n        this.props.initialize()\n    }\n\n    render() {\n        const {state, children} = this.props\n        return <Web3Gate state={state} onRetry={this.onRetry} children={children}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    state: state.web3Instance.state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialize: () => {\n        dispatch(initialize())\n    },\n    stopBlockFilter: () => {\n        dispatch(stopBlockFilter())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Web3GateContainer)\n","import React, {Component} from 'react'\nimport {Provider} from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store'\nimport {Container} from 'semantic-ui-react'\nimport { PersistGate } from 'redux-persist/lib/integration/react'\nimport ModalRoot from './modules/modal/ModalRoot'\nimport LayoutContainer from './modules/layout/LayoutContainer'\nimport TokenLoaderGate from './modules/token/TokenLoaderGate'\nimport Web3GateContainer from './modules/web3/web3GateContainer'\n\nlet {store, persistor} = configureStore()\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <PersistGate persistor={persistor}>\n                    <Web3GateContainer>\n                        <TokenLoaderGate>\n                            <BrowserRouter>\n                                <Container>\n                                    <ModalRoot/>\n                                    <LayoutContainer/>\n                                </Container>\n                            </BrowserRouter>\n                        </TokenLoaderGate>\n                    </Web3GateContainer>\n                </PersistGate>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n"],"sourceRoot":""}