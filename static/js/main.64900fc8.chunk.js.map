{"version":3,"sources":["modules/balance/balanceActions.js","modules/event/reducers/addressContractEventsByIdReducer.js","modules/event/eventActions.js","utils/localStorageWrapper.js","modules/token/tokenActions.js","modules/token/reducers/ListStateReducer.js","modules/token/reducers/TokensByIdReducer.js","modules/token/reducers/AllIdsReducer.js","modules/token/reducers/volatileTokensByIdReducer.js","modules/token/reducers/TrackedIdsReducer.js","utils/getWeb3.js","modules/web3/web3Actions.js","modules/token/reducers/SelectorReducer.js","modules/token/reducers/tokenReducer.js","utils/reducerUtils.js","modules/web3/web3Reducer.js","modules/address/addressActions.js","modules/address/reducers/addressByIdReducer.js","modules/address/reducers/allAddressIdsReducer.js","modules/address/reducers/addressSelectorReducer.js","modules/address/reducers/addressReducer.js","modules/balance/reducer/balanceByIdReducer.js","modules/balance/reducer/allBalancesReducer.js","modules/balance/reducer/positiveBalancesReducer.js","modules/balance/reducer/BalanceListStateReducer.js","modules/balance/reducer/balanceReducer.js","modules/event/reducers/eventByIdReducer.js","modules/event/reducers/allEventIdsReducer.js","modules/event/reducers/listStateReducer.js","modules/event/reducers/eventReducer.js","modules/modal/modalActions.js","modules/modal/modalReducer.js","store.js","modules/modal/TestModal.js","modules/forms/transferForm/TransferForm.js","modules/forms/transferForm/TransferFormContainer.js","modules/modal/ModalRoot.js","modules/layout/ScreenHeader.js","modules/balance/Balance.js","modules/common/AddressDisplay.js","modules/balance/TokenBalanceItemDetail.js","modules/balance/TokenBalanceItemDetailContainer.js","modules/balance/TokenBalanceItem.js","modules/balance/TokenBalanceItemContainer.js","modules/balance/TokenBalancesList.js","modules/balance/AddressBalanceItemDetail.js","modules/balance/AddressBalanceItemDetailContainer.js","modules/balance/AddressBalanceItem.js","modules/balance/AddressBalanceItemContainer.js","modules/balance/AddressBalancesList.js","modules/segments/OverviewBodyContainer.js","modules/token/TokenListFilter.js","modules/token/TokenListFilterContainer.js","modules/segments/OverviewOptions.js","modules/segments/OverviewContainer.js","modules/web3/web3Info.js","modules/web3/web3Container.js","modules/segments/Sidebar.js","modules/address/AddressRow.js","modules/address/AddressContainer.js","modules/address/QueryAddressForm.js","modules/address/QueryAddressFormContainer.js","modules/address/AddressList.js","modules/address/AddressListContainer.js","modules/segments/Accounts.js","modules/token/SelectableToken.js","modules/token/SelectableTokenContainer.js","modules/token/SelectableTokenList.js","modules/token/SelectableTokenListContainer.js","modules/segments/TokenContracts.js","modules/event/EventFilterContainer.js","modules/event/EventLoader.js","modules/event/EventLoaderContainer.js","modules/common/TxHashDisplay.js","modules/event/TransferEvent.js","modules/event/TransferEventContainer.js","modules/event/TransferEventsList.js","modules/event/TransferEventsListContainer.js","modules/segments/Events.js","modules/segments/EventsContainer.js","modules/web3/NetworkWarning.js","modules/web3/NetworkWarningController.js","modules/layout/LayoutContainer.js","modules/common/ModalLoader.js","modules/token/TokenLoaderGate.js","modules/web3/web3Gate.js","modules/web3/web3GateContainer.js","utils/LocalStorageGate.js","App.js","registerServiceWorker.js","index.js","../node_modules/web3-eth-accounts/src sync"],"names":["BALANCE_STATES","VIRGIN","LOADING","INITIALIZED","SET_BALANCE","SET_BALANCE_STATE","CREATE_BALANCE_ENTRY","createBalanceEntry","balanceId","addressId","tokenId","type","payload","DELETE_BALANCE_ENTRY","deleteBalanceEntry","CHANGE_BALANCE_FILTER_PROPS","setBalanceFilterString","filterString","dispatch","getState","searchString","toLowerCase","balanceIds","balance","allIds","length","filter","balanceEntry","byId","token","tokens","name","includes","symbol","address","matchedBalanceIds","setBalanceByAddressAndToken","buildBalanceId","undefined","setBalance","balanceStateChanged","balanceState","setBalanceState","reloadBalance","loadTokenBalance","ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL","clearAceEntries","createAceEntry","state","action","acesId","buildAddressContractEventId","isLoading","firstBlock","lastBlock","eventIds","loadingFromBlock","loadingToBlock","loadingCurrentBlock","addTransferEvents","events","newState","forEach","transferEvent","transferEventId","id","args","_from","_to","aceFromId","aceId","console","warn","concat","aceEntriesLoadingChange","aceIds","aceEntry","aceEntriesBlockRangeChange","fromBlock","toBlock","Math","min","max","setAceEntryEventIds","ADD_EVENTS","CHANGE_TRANSFEREVENTLIST_PAGE","CREATE_ACE_ENTRY","ACE_ENTRIES_LOADING_CHANGE","addressIds","map","ACE_ENTRIES_BLOCK_RANGE_CHANGE","SET_ACE_ENTRY_EVENT_IDS","CHANGE_EVENT_SCAN_PROPS","changeEventScanProps","props","aceEntriesLoadingChangeWrapper","a","aceById","addEventsThunk","aceIdsToSort","watchedAddressIds","addresses","push","aceToId","addEvents","eventsById","slice","sort","eventA","eventB","blockNumber","TRACKED_TOKEN_KEYS","SELECTED_TOKEN_KEY","WATCHED_ADDRESSES","storeLocalData","key","data","localStorage","setItem","JSON","stringify","getLocalData","defaultValue","parse","getItem","e","ETH_TOKEN_MAGIC_ADDRESS","ETH_TOKEN_DUMMY","TOKEN_LIST_STATES","CHANGE_TOKEN_LIST_STATE","tokenListStateChanged","tokenListState","listState","ADD_TOKEN","addToken","tokenID","ADD_VOLATILE_TOKEN","IS_LOADING_TOKEN","loadingTokenChanged","SET_TOKEN_SUPPLY","IS_LOADING_SUPPLY","SET_TOKEN_CONTRACT_INSTANCE","setTokenContractInstance","contractInstance","SET_TOKEN_LOADING_PROMISE","changeSelectorTokenIdThunk","selectedTokenId","changeSelectorTokenId","selector","CHANGE_SELECTOR_TOKENID","CLEAR_TOKEN_LIST","clearTokenList","CHANGE_VALID_TOKEN_COUNT","CHANGE_FILTER_PROPS","RESET_DISPLAY_COUNT","CHANGE_TOKEN_TRACKING","changeTokenTracking","doTrack","CHANGE_TOKEN_LIST_PAGE","changeTokenListPage","activePage","changeTokenTrackingThunk","trackedIds","Object","values","clearTokenBalances","setFilterProps","filterProps","showOnlyTracked","oldFilterString","oldShowOnlyTracked","filterIsActive","tokenIds","matchedTokenIds","changeFilterProps","mapListToken","listToken","decimals","BN","description","website","imageUrl","supply","loading","instantiateTokenContract","loadingPromise","Promise","resolve","reject","web3","web3Instance","ERC20Contract","contract","abi","erc20ABI","setProvider","currentProvider","at","setTokenLoadingPromise","loadMultiTokenBalances","tokenIDs","eth","getBalance","verifyContractInstance","volatileToken","volatileById","balanceOf","LISTSTATE_INITIAL","total","displayCount","resetDisplayCount","changeValidTokenCount","count","tokenListPageChanged","TOKENS_BY_ID_INITIAL","clearTokensById","addTokenEntry","setTokenSupply","loadingSupplyChanged","newEventIds","ALL_TOKENS_INITIAL","addTokenId","indexOf","clearAllTokens","VOLATILE_TOKENS_BY_ID_INITIAL","clearTokens","TRACKED_TOKENS_INITIAL","trackedIndex","getWeb3","window","addEventListener","ethereum","myWeb3","Web3","log","error","WEB3_STATES","UNINITIALIZED","ERROR","ETH_ENABLE_STATES","REJECTED","WAITING","GRANTED","SET_WEB3_STATE","setWeb3State","SET_ETH_ENABLE_STATE","setEthEnableState","ethEnableState","SET_WEB3INSTANCE","setWeb3Instance","SET_CURRENT_BLOCK","setCurrentBlock","block","SET_NETWORK","setNetwork","previousId","SET_NODE_VERSION","setNodeVersion","nodeVersion","SET_BLOCK_FILTER","setBlockFilter","blockFilter","stopBlockFilter","unsubscribe","success","getNetworkName","networkId","network","SELECTOR_INITIAL","combineReducers","updateObject","oldObject","newValues","assign","WEB3_INITIAL","number","timestamp","ADDRESS_TYPE_EXTERNAL","ADDRESS_TYPE_OWNED","ADDRESS_BALANCES_STATES","CHANGE_ADDRESS_BALANCES_STATE","ADD_ADDRESS","addAddress","ensName","removeAddressThunk","REMOVE_ADDRESS","removeAddress","clearAddressBalances","addressesToStore","o","CHANGE_ADDRESS_TYPE","changeAddressType","newType","addNewAddress","CHANGE_SELECTOR_ADDRESSID","changeSelectorAddressId","selectedAddressId","ADDRESS_BY_ID_INITIAL","addAddressEntry","keys","balancesState","removeAddressEntry","addressEntry","changeAddressBalancesState","addressBalancesState","ALL_ADDRESSES_INITIAL","addAddressId","removeAddressId","entryId","BALANCE_BY_ID_INITIAL","clearAllBalances","ALL_BALANCES_INITIAL","index","splice","POSITIVE_BALANCES_INITIAL","clearPositiveBalances","isZero","entry","gt","BALANCE_LISTSTATE_INITIAL","clearBalanceListState","changeBalanceFilterProps","positiveIds","EVENT_BY_ID_INITIAL","clearEvents","ALL_EVENTS_INITIAL","addEventIds","currentChunk","maxChunks","transferEventListPageChanged","resetPager","SHOW_MODAL","HIDE_MODAL","MODAL_INITIAL","modalType","modalProps","showModal","hideModal","reducer","modal","logger","createLogger","diff","TestModal","closeModal","Modal","open","onClose","Header","Content","Description","defaultProps","TransferForm","onValidSubmit","fromAddress","tokenName","tokenSymbol","tokenBalance","etherBalance","gasCosts","errorLabel","Label","color","pointing","addValidationRule","value","isAddress","bnValue","utils","toBN","bnMax","lte","err","size","closeIcon","noValidate","Segment","Grid","columns","Row","Column","width","List","Item","toFixed","Group","placeholder","required","instantValidation","validations","validationErrors","isEthereumAddress","isDefaultRequiredValue","label","labelPosition","isNumeric","isLessThanOrEqual","readOnly","Button","content","TransferFormContainer","context","formData","alert","amount","toAddressValid","amountValid","rateValid","this","Component","MODAL_COMPONENTS","connect","ownProps","tokenBalanceId","dividedBy","transferToken","ModalRoot","SpecificModal","ScreenHeader","title","as","inverted","textAlign","style","marginTop","Balance","numDecimals","roundToDecimals","divisor","pow","whole","div","fraction","mod","abs","toString","roundedWhole","roundedFraction","roundingPow","sub","lt","roundingDivisor","remainingDivisor","roundedAmount","divRound","trigger","Popup","AddressDisplay","TokenBalanceItemDetail","url","Table","Cell","to","circular","icon","onClick","TokenBalanceItemDetailContainer","addressType","openTransferModal","TokenBalanceItem","expanded","tokenBalances","tokenDecimals","tokenEventsLinkOptions","toggleCollapse","eventLink","tableHeader","HeaderCell","Statistic","Value","tableBody","Body","compact","TokenBalanceItemContainer","bind","setState","_","reduce","sum","add","pathname","TokenBalancesList","balancesByToken","AddressBalanceItemDetail","tokenAmount","AddressBalanceItemDetailContainer","AddressBalanceItem","numTokens","AddressBalanceItemContainer","gtn","AddressBalancesList","balancesByAddress","OverviewBodyContainer","groupedBalances","showEmpty","hasAccounts","groupBy","Message","balanceEntries","groupedBalancesObject","entries","b","toUpperCase","addressA","addressB","stringA","stringB","TokenListFilter","handleChange","clearFilter","Icon","link","Input","onChange","fluid","TokenListFilterContainer","setFilterString","displayed","target","OverviewOptions","toggleShowEmpty","setGroupBy","verticalAlign","divided","Dropdown","inline","options","text","Checkbox","toggle","checked","OverviewContainer","Fragment","Divider","Web3Info","web3Version","gitHub","srcUrl","href","rel","Web3Container","version","Sidebar","Menu","vertical","header","NavLink","AddressRow","iconName","popupContent","removeButton","handleRemove","collapsing","AddressContainer","PureComponent","progressTotal","progressCurrent","QueryAddressForm","handleSubmit","disabled","Form","onSubmit","addressStates","ADDRESS_RESOLVING","ADDRESS_VALID","ADDRESS_INVALID","QueryAddressFormContainer","input","addressState","validAddress","test","ens","getAddress","resolvedAddress","AddressList","ownTable","watchTable","ethEnable","waitingGrant","ownAddressIds","basic","selectable","primary","watchAddressIds","dividing","AddressListContainer","requestEthEnable","on","changeOwnAddresses","getAccounts","accounts","removeListener","addressesById","newAccounts","account","existingAddress","enable","Accounts","SelectableToken","SelectableTokenContainer","tokenAddress","tokenTracked","tracked","SelectableTokenList","tokenList","celled","negative","items","SelectableTokenListContainer","handleShowOnlyTrackedChange","handlePaginationChange","handleLoadTokens","setShowTracked","setTokenListPage","pager","totalPages","Container","Pagination","onPageChange","numVisibleTokens","ceil","sliceStart","TokenContracts","info","EventFilterContainer","tokenOptions","onTokenSelect","addressOptions","onAddressSelect","Field","search","selection","EventLoader","resultCount","resultFromBlock","resultToBlock","onLoadMore","canLoadMore","button","warning","EventLoaderContainer","loadMoreEvents","checkEventsLoaded","newProps","rangeEnd","currentBlock","rangeStart","loadTokenTransferEvents","resultFromBlockDate","hasAceEntry","Boolean","outgoingEventsFetcher","EventFetcher","incomingEventsFetcher","numEvents","incomingFetchOptions","eventName","progressCallback","progressInfo","stepsComplete","totalSteps","stepResults","stepFromBlock","stepToBlock","maxEvents","outgoingFetchOptions","fetcherPromises","fetch","all","TxHashDisplay","txHash","shortHash","TRANSFER_EVENT_TYPES","TransferEvent","from","fromENS","toENS","quantity","positive","rowSpan","TransferEventContainer","rawEvent","_value","transactionHash","TransferEventsList","colSpan","transferEventIds","TransferEventsListContainer","setTransferEventListPage","aceEventIds","changeTransferEventListPage","Events","EventsContainer","mapRouteParamsToState","match","params","setSelectedToken","setSelectedAddress","NetworkWarning","networkName","NetworkWarningController","LayoutContainer","padded","exact","path","component","location","ModalLoader","TokenLoaderGate","tokenListUrl","loadTokenList","Children","only","children","response","json","jsonTokens","allTokenIds","existingTrackedTokens","Web3Gate","onRetry","Web3GateContainer","initialize","autoRefreshOnNetworkChange","networkID","parseInt","oldNetworkId","setInterval","net","getId","getNodeInfo","getBlock","subscribe","blockHeader","LocalStorageGate","knownTokens","trackedTokens","selectedTokendId","store","createStore","compose","applyMiddleware","thunk","App","isLocalhost","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","render","document","getElementById","URL","process","origin","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker","webpackEmptyContext","req","Error","code","module","exports"],"mappings":"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","file":"static/js/main.64900fc8.chunk.js","sourcesContent":["import {loadTokenBalance} from '../token/tokenActions'\n\nexport const BALANCE_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const SET_BALANCE = 'SET_BALANCE'\nexport function setBalance(balanceId, balance) {\n    return {\n        type: SET_BALANCE,\n        payload: {\n            balanceId,\n            balance,\n        }\n    }\n}\n\nexport const SET_BALANCE_STATE = 'SET_BALANCE_STATE'\nexport function setBalanceState(balanceId, balanceState) {\n    return {\n        type: SET_BALANCE_STATE,\n        payload: {\n            balanceId,\n            balanceState,\n        }\n    }\n}\n\nexport const CREATE_BALANCE_ENTRY = 'CREATE_BALANCE_ENTRY'\nexport function createBalanceEntry(balanceId, addressId, tokenId) {\n    return {\n        type: CREATE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const DELETE_BALANCE_ENTRY = 'DELETE_BALANCE_ENTRY'\nexport function deleteBalanceEntry(balanceId) {\n    return {\n        type: DELETE_BALANCE_ENTRY,\n        payload: {\n            balanceId,\n        }\n    }\n}\n\nexport const CHANGE_BALANCE_FILTER_PROPS = 'CHANGE_BALANCE_FILTER_PROPS'\nexport function changeBalanceFilterProps(filter, matchedBalanceIds) {\n    return {\n        type: CHANGE_BALANCE_FILTER_PROPS,\n        payload: {\n            filter,\n            matchedBalanceIds\n        }\n    }\n}\n\nexport function setBalanceFilterString(filterString) {\n    return (dispatch, getState) => {\n        // Filter balance list based on filterstring.\n        const searchString = filterString.toLowerCase()\n\n        // Default: Show all balances\n        let balanceIds = getState().balance.allIds\n\n        // If a searchstring is provided, filter balanceIds\n        if (searchString.length) {\n            balanceIds = balanceIds.filter(balanceId => {\n                const balanceEntry = getState().balance.byId[balanceId]\n                const token = getState().tokens.byId[balanceEntry.tokenId]\n                return (\n                    token.name.toLowerCase().includes(searchString) ||\n                    token.symbol.toLowerCase().includes(searchString) ||\n                    token.address.toLowerCase().includes(searchString)\n                )\n            })\n        }\n        dispatch(changeBalanceFilterProps(searchString, balanceIds))\n    }\n}\n\n\nexport function setBalanceByAddressAndToken(addressId, tokenId, balance) {\n    return(dispatch, getState) => {\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set balance\n        dispatch(setBalance(balanceId, balance))\n    }\n}\n\nexport function balanceStateChanged(tokenId, addressId, balanceState) {\n    return(dispatch, getState) => {\n        // obtain balanceID\n        let balanceId = buildBalanceId(addressId, tokenId)\n        if (getState().balance.byId[balanceId] === undefined) {\n            // create a new balance entry before setting balance\n            dispatch(createBalanceEntry(balanceId, addressId, tokenId))\n        }\n        // set loading state\n        dispatch(setBalanceState(balanceId, balanceState))\n    }\n}\n\nexport function reloadBalance(balanceId) {\n    return (dispatch, getState) => {\n        const balance = getState().balance.byId[balanceId]\n        dispatch(loadTokenBalance(balance.tokenId, balance.addressId))\n    }\n}\n\nexport function clearTokenBalances(tokenId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.tokenId === tokenId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function clearAddressBalances(addressId) {\n    return (dispatch, getState) => {\n        const balancesToClear = Object.values(getState().balance.byId).filter(balanceEntry => {\n            return (balanceEntry.addressId === addressId)\n        })\n        balancesToClear.forEach(balanceEntry => {\n            dispatch(deleteBalanceEntry(balanceEntry.balanceId))\n        })\n    }\n}\n\nexport function buildBalanceId(addressId, tokenId) {\n    return (addressId + '-' + tokenId)\n}\n","import {\n    ACE_ENTRIES_BLOCK_RANGE_CHANGE, ACE_ENTRIES_LOADING_CHANGE, ADD_EVENTS,\n    CREATE_ACE_ENTRY, SET_ACE_ENTRY_EVENT_IDS\n} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\n/*\nPurpose: Store list of transfer events involving certain address\nand certain token contract.\nKeeps track of the block range already queried from web3 (firstBlock, lastBlock),\nso i can easily extend checked block range or refresh if outdated.\n */\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {}\n/*\nconst ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL = {\n    0xabc123-12: {\n        acesId: '0xabc123-12',    // <addressId>-<tokenId>\n        addressId: '0xabc123',\n        tokenId: 12\n        loading: false,\n        firstBlock: 0,\n        lastBlock: 0,\n        loadingFromBlock: 0,\n        loadingToBlock: 0,\n        loadingCurrentBlock: 0,\n        eventIds: [],\n    },\n}\n*/\n\nfunction clearAceEntries() {\n    return ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL\n}\n\nfunction createAceEntry(state, action) {\n    const {payload} = action\n    const {addressId, tokenId} = payload\n    const acesId = buildAddressContractEventId(addressId, tokenId)\n    return {\n        ...state,\n        [acesId] : {\n            acesId,\n            addressId,\n            tokenId,\n            isLoading: false,\n            firstBlock: 0,\n            lastBlock: 0,\n            eventIds: [],\n            loadingFromBlock: 0,\n            loadingToBlock: 0,\n            loadingCurrentBlock: 0,\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new events to the address, if it is \"to\" or \"from\"\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    const newState = {...state}\n\n    events.forEach(transferEvent => {\n        const transferEventId = transferEvent.id\n        const {_from, _to} = transferEvent.args\n        const aceFromId = buildAddressContractEventId(_from, tokenId)\n        const aceToId = buildAddressContractEventId(_to, tokenId)\n        const aceIds = [aceToId, aceFromId]\n        aceIds.forEach(aceId => {\n            // only add event if an according aceEntry is existing!\n            if (newState[aceId]) {\n                // prevent duplicate eventID entries\n                    if (newState[aceId].eventIds.includes(transferEventId)) {\n                        console.warn(\"Ignoring duplicate event \" + transferEventId)\n                        return\n                    }\n                newState[aceId].eventIds = newState[aceId].eventIds.concat(transferEventId)\n            }\n        })\n    })\n    return newState\n}\n\nfunction aceEntriesLoadingChange(state, action) {\n    const {payload} = action\n    const {aceIds, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            newState[aceId] = {\n                ...aceEntry,\n                isLoading,\n                loadingFromBlock,\n                loadingToBlock,\n                loadingCurrentBlock,\n            }\n        }\n    })\n    return newState\n}\n\nfunction aceEntriesBlockRangeChange(state, action) {\n    const {payload} = action\n    const {aceIds, fromBlock, toBlock} = payload\n\n    const newState = {...state}\n\n    aceIds.forEach(aceId => {\n        const aceEntry = newState[aceId]\n        if (aceEntry) {\n            // update checked block range\n            if (aceEntry.firstBlock === 0) {\n                aceEntry.firstBlock = fromBlock\n            } else {\n                aceEntry.firstBlock = Math.min(fromBlock, aceEntry.firstBlock)\n            }\n            if (aceEntry.lastBlock === 0) {\n                aceEntry.lastBlock = toBlock\n            } else {\n                aceEntry.lastBlock = Math.max(toBlock, aceEntry.lastBlock)\n            }\n            newState[aceId] = aceEntry\n        }\n    })\n    return newState\n}\n\nfunction setAceEntryEventIds(state, action) {\n    const {payload} = action\n    const {aceId, eventIds} = payload\n\n    return {\n        ...state,\n        [aceId]: {\n            ...state[aceId],\n            eventIds\n        }\n    }\n}\n\nexport const addressContractEventsByIdReducer = (state=ADDRESS_CONTRACT_EVENTS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_ACE_ENTRY:\n            return createAceEntry(state, action)\n        case ADD_EVENTS:\n            return addTransferEvents(state, action)\n        case ACE_ENTRIES_LOADING_CHANGE:\n            return aceEntriesLoadingChange(state, action)\n        case ACE_ENTRIES_BLOCK_RANGE_CHANGE:\n            return aceEntriesBlockRangeChange(state, action)\n        case SET_ACE_ENTRY_EVENT_IDS:\n            return setAceEntryEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearAceEntries()\n        default:\n    }\n    return state;\n}\n\n\nexport function buildAddressContractEventId(addressId, tokenId) {\n    return ''+addressId.toLowerCase()+'-'+tokenId\n}\n","import {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\n\nexport const ADD_EVENTS = 'ADD_EVENTS'\nexport function addEvents(events, tokenId) {\n    return {\n        type: ADD_EVENTS,\n        payload: {\n            events,\n            tokenId,\n        }\n    }\n}\n\nexport const CHANGE_TRANSFEREVENTLIST_PAGE = 'CHANGE_TRANSFEREVENTLIST_PAGE'\nexport function changeTransferEventListPage(activePage) {\n    return {\n        type: CHANGE_TRANSFEREVENTLIST_PAGE,\n        payload: {\n            activePage\n        }\n    }\n}\n\n\nexport const CREATE_ACE_ENTRY = 'CREATE_ACE_ENTRY'\nexport function createAceEntry(addressId, tokenId) {\n    return {\n        type: CREATE_ACE_ENTRY,\n        payload: {\n            addressId,\n            tokenId\n        }\n    }\n}\n\nexport const ACE_ENTRIES_LOADING_CHANGE = 'ACE_ENTRIES_LOADING_CHANGE'\nexport function aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_LOADING_CHANGE,\n        payload: {\n            aceIds,\n            isLoading,\n            loadingFromBlock,\n            loadingToBlock,\n            loadingCurrentBlock,\n        }\n    }\n}\n\nexport const ACE_ENTRIES_BLOCK_RANGE_CHANGE = 'ACE_ENTRIES_BLOCK_RANGE_CHANGE'\nexport function aceEntriesBlockRangeChange(addressIds, tokenId, fromBlock, toBlock) {\n    const aceIds = addressIds.map(addressId => (buildAddressContractEventId(addressId, tokenId)))\n    return {\n        type: ACE_ENTRIES_BLOCK_RANGE_CHANGE,\n        payload: {\n            aceIds,\n            fromBlock,\n            toBlock,\n        }\n    }\n}\n\nexport const SET_ACE_ENTRY_EVENT_IDS = 'SET_ACE_ENTRY_EVENT_IDS'\nexport function setAceEntryEventIds(aceId, eventIds) {\n    return {\n        type: SET_ACE_ENTRY_EVENT_IDS,\n        payload: {\n            aceId,\n            eventIds\n        }\n    }\n}\n\nexport const CHANGE_EVENT_SCAN_PROPS = 'CHANGE_EVENT_SCAN_PROPS'\nexport function changeEventScanProps(props) {\n    return {\n        type: CHANGE_EVENT_SCAN_PROPS,\n        payload: {\n            props,\n        }\n    }\n}\n\nexport function aceEntriesLoadingChangeWrapper(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock) {\n    return async (dispatch, getState) => {\n        addressIds.forEach(addressId => {\n            const aceId = buildAddressContractEventId(addressId, tokenId)\n            if (getState().events.aceById[aceId] === undefined) {\n                // create a new entry for this token and address\n                dispatch(createAceEntry(addressId, tokenId))\n            }\n        })\n        dispatch(aceEntriesLoadingChange(addressIds, tokenId, isLoading, loadingFromBlock, loadingToBlock, loadingCurrentBlock))\n    }\n}\n\nexport function addEventsThunk(events, tokenId, fromBlock, toBlock) {\n    return (dispatch, getState) => {\n        // Make sure that there are AddressContractEvent entries\n        // for all events and to/from addresses\n        let aceIdsToSort = []\n        const watchedAddressIds = getState().addresses.allIds\n        events.forEach(transferEvent => {\n            const {_from, _to} = transferEvent.args\n            // TODO: Collect all new entries and just dispatch one batch event\n            if (watchedAddressIds.includes(_from.toLowerCase())) {\n                const aceFromId = buildAddressContractEventId(_from, tokenId)\n                aceIdsToSort.push(aceFromId)\n                if (getState().events.aceById[aceFromId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_from, tokenId))\n                }\n            }\n            if (watchedAddressIds.includes(_to.toLowerCase())) {\n                const aceToId = buildAddressContractEventId(_to, tokenId)\n                aceIdsToSort.push(aceToId)\n                if (getState().events.aceById[aceToId] === undefined) {\n                    // create a new entry for this token and address\n                    dispatch(createAceEntry(_to, tokenId))\n                }\n            }\n        })\n        // now it's safe to do the actual dispatch of addEvents\n        dispatch(addEvents(events, tokenId, fromBlock, toBlock))\n        // finally re-sort eventIds of all changed aceIds\n        dispatch(sortEventsThunk(aceIdsToSort))\n    }\n}\n\nexport function sortEventsThunk(aceIds) {\n    return (dispatch, getState) => {\n        const eventsById = getState().events.byId\n        // sort eventIds of provided ace entries based on the blockheight they appeared at\n        aceIds.forEach(aceId => {\n            // sort eventIds based on blockheight\n            // use .slice() to work on a copy of the eventIds array, otherwise i would mutate current state...\n            let eventIds = getState().events.aceById[aceId].eventIds.slice().sort((eventA, eventB) => {\n                return eventsById[eventB].transferEvent.blockNumber - eventsById[eventA].transferEvent.blockNumber\n            })\n            // set new eventIds array via dedicated action\n            dispatch(setAceEntryEventIds(aceId, eventIds))\n        })\n    }\n}\n\n","\nexport const TRACKED_TOKEN_KEYS = 'TRACKED_TOKEN_KEYS'\nexport const SELECTED_TOKEN_KEY = 'SELECTED_TOKEN_KEY'\nexport const WATCHED_ADDRESSES = 'WATCHED_ADDRESSES'\n\nexport function storeLocalData(key, data) {\n    // console.log(\"Storing \" + key + \" -> \" + data)\n    localStorage.setItem(key, JSON.stringify(data))\n}\n\nexport function getLocalData(key, defaultValue) {\n    try {\n        let data = JSON.parse(localStorage.getItem(key))\n        if (data) {\n            // console.log(\"Loaded data for key \" + key + \": \" + data)\n            return data\n        }\n    }\n    catch (e) {\n        // console.log(\"Exception \" + e + \" looking for \" + key)\n    }\n    // console.log(\"No data found for key \" + key)\n    return defaultValue\n}\n","import contract from '@truffle/contract'\r\nimport erc20ABI from 'human-standard-token-abi'\r\nimport EventFetcher from '@triplespeeder/web3-eventfetcher'\r\nimport BN from 'bn.js'\r\nimport {\r\n    BALANCE_STATES,\r\n    balanceStateChanged,\r\n    clearTokenBalances,\r\n    setBalanceByAddressAndToken\r\n} from '../balance/balanceActions'\r\nimport {\r\n    aceEntriesBlockRangeChange, aceEntriesLoadingChange, aceEntriesLoadingChangeWrapper,\r\n    addEventsThunk, changeEventScanProps\r\n} from '../event/eventActions'\r\nimport {\r\n    storeLocalData,\r\n    SELECTED_TOKEN_KEY,\r\n    TRACKED_TOKEN_KEYS,\r\n} from \"../../utils/localStorageWrapper\"\r\n\r\nexport const ETH_TOKEN_MAGIC_ADDRESS = \"0x1000000000000000000000000000000000000001\"\r\nexport const ETH_TOKEN_DUMMY = {\r\n    \"name\": \"Ethereum\",\r\n    \"symbol\": \"ETH\",\r\n    \"address\": ETH_TOKEN_MAGIC_ADDRESS,\r\n    \"decimals\": 18\r\n}\r\n\r\nexport const TOKEN_LIST_STATES = {\r\n    VIRGIN: 'virgin',\r\n    LOADING: 'loading',\r\n    INITIALIZED: 'initialized'\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_STATE = 'IS_LOADING_TOKEN_LIST'\r\nexport function tokenListStateChanged(tokenListState) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_STATE,\r\n        payload: {\r\n            listState: tokenListState\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_TOKEN = 'ADD_TOKEN'\r\nexport function addToken(tokenID, token) {\r\n    return {\r\n        type: ADD_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            token\r\n        }\r\n    }\r\n}\r\n\r\nexport const ADD_VOLATILE_TOKEN = 'ADD_VOLATILE_TOKEN'\r\nexport function addVolatileToken(tokenID) {\r\n    return {\r\n        type: ADD_VOLATILE_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_TOKEN = 'IS_LOADING_TOKEN'\r\nexport function loadingTokenChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_TOKEN,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_SUPPLY = 'SET_TOKEN_SUPPLY'\r\nexport function setTokenSupply(tokenID, supply) {\r\n    return {\r\n        type: SET_TOKEN_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            supply,\r\n        }\r\n    }\r\n}\r\n\r\nexport const IS_LOADING_SUPPLY = 'IS_LOADING_SUPPLY'\r\nexport function loadingSupplyChanged(tokenID, isLoading) {\r\n    return {\r\n        type: IS_LOADING_SUPPLY,\r\n        payload: {\r\n            tokenID,\r\n            isLoading\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_CONTRACT_INSTANCE = 'SET_TOKEN_CONTRACT_INSTANCE'\r\nexport function setTokenContractInstance(tokenID, contractInstance) {\r\n    return {\r\n        type: SET_TOKEN_CONTRACT_INSTANCE,\r\n        payload: {\r\n            tokenID,\r\n            contractInstance\r\n        }\r\n    }\r\n}\r\n\r\nexport const SET_TOKEN_LOADING_PROMISE = 'SET_TOKEN_LOADING_PROMISE'\r\nexport function setTokenLoadingPromise(tokenID, loadingPromise) {\r\n    return {\r\n        type: SET_TOKEN_LOADING_PROMISE,\r\n        payload: {\r\n            tokenID,\r\n            loadingPromise\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeSelectorTokenIdThunk(selectedTokenId) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeSelectorTokenId(selectedTokenId))\r\n        // update localstorage\r\n        storeLocalData(SELECTED_TOKEN_KEY, getState().tokens.selector.selectedTokenId)\r\n    }\r\n}\r\n\r\nexport const CHANGE_SELECTOR_TOKENID = 'CHANGE_SELECTOR_TOKENID'\r\nexport function changeSelectorTokenId(selectedTokenId) {\r\n    return {\r\n        type: CHANGE_SELECTOR_TOKENID,\r\n        payload: {\r\n            selectedTokenId,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CLEAR_TOKEN_LIST = 'CLEAR_TOKEN_LIST'\r\nexport function clearTokenList() {\r\n    return {\r\n        type: CLEAR_TOKEN_LIST,\r\n    }\r\n}\r\n\r\nexport const CHANGE_VALID_TOKEN_COUNT = 'CHANGE_VALID_TOKEN_COUNT'\r\nexport function changeValidTokenCount(count) {\r\n    return {\r\n        type: CHANGE_VALID_TOKEN_COUNT,\r\n        payload: {\r\n            count\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_FILTER_PROPS = 'CHANGE_FILTER_PROPS'\r\nexport function changeFilterProps(filter, matchedTokenIds, showOnlyTracked, filterIsActive) {\r\n    return {\r\n        type: CHANGE_FILTER_PROPS,\r\n        payload: {\r\n            filter,\r\n            matchedTokenIds,\r\n            showOnlyTracked,\r\n            filterIsActive,\r\n        }\r\n    }\r\n}\r\n\r\nexport const RESET_DISPLAY_COUNT = 'RESET_DISPLAY_COUNT'\r\nexport function resetDisplayCount() {\r\n    return {\r\n        type: RESET_DISPLAY_COUNT,\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_TRACKING = 'CHANGE_TOKEN_TRACKING'\r\nexport function changeTokenTracking(tokenId, doTrack) {\r\n    return {\r\n        type: CHANGE_TOKEN_TRACKING,\r\n        payload: {\r\n            tokenId,\r\n            doTrack,\r\n        }\r\n    }\r\n}\r\n\r\nexport const CHANGE_TOKEN_LIST_PAGE = 'CHANGE_TOKENLIST_PAGE'\r\nexport function changeTokenListPage(activePage) {\r\n    return {\r\n        type: CHANGE_TOKEN_LIST_PAGE,\r\n        payload: {\r\n            activePage\r\n        }\r\n    }\r\n}\r\n\r\nexport function changeTokenTrackingThunk(tokenId, doTrack) {\r\n    return (dispatch, getState) => {\r\n        // update state\r\n        dispatch(changeTokenTracking(tokenId, doTrack))\r\n        // update localstorage\r\n        storeLocalData(TRACKED_TOKEN_KEYS, getState().tokens.trackedIds)\r\n        // if I start tracking a token, start getting balances right away\r\n        if (doTrack) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadTokenBalance(tokenId, addressId))\r\n                }\r\n            )\r\n        } else {\r\n            // If I stop tracking a token, also clear all balances for it\r\n            dispatch(clearTokenBalances(tokenId))\r\n        }\r\n    }\r\n}\r\n\r\nexport function setFilterProps(filterProps) {\r\n    return (dispatch, getState) => {\r\n\r\n        let {filterString, showOnlyTracked} = filterProps\r\n        const oldFilterString = getState().tokens.listState.filter.toLowerCase()\r\n        const oldShowOnlyTracked = getState().tokens.listState.showOnlyTracked\r\n        if (filterString === undefined) {\r\n            filterString = oldFilterString\r\n        }\r\n        if (showOnlyTracked === undefined) {\r\n            showOnlyTracked = oldShowOnlyTracked\r\n        }\r\n\r\n        // Filter token list based on filterstring and show tracked only/all\r\n        const searchString = filterString.toLowerCase()\r\n        const filterIsActive = ((searchString.length > 0) || showOnlyTracked)\r\n        const filterChanged = ((oldFilterString !== searchString) || (oldShowOnlyTracked !== showOnlyTracked))\r\n\r\n        if (filterChanged) {\r\n            // in case filter props changed, reset the number of displayed tokens to it's default value and set\r\n            // default page\r\n            dispatch(resetDisplayCount())\r\n            dispatch(changeTokenListPage(1))\r\n        }\r\n\r\n        // start with all tokens\r\n        let tokenIds = getState().tokens.allIds\r\n\r\n        // filter by tracked status\r\n        if (showOnlyTracked) {\r\n            // get all tokens that are being tracked\r\n            tokenIds = getState().tokens.trackedIds\r\n        }\r\n\r\n        // filter by search string\r\n        if (searchString.length) {\r\n            tokenIds = tokenIds.filter(tokenId => {\r\n                const token = getState().tokens.byId[tokenId]\r\n                return (\r\n                    token.name.toLowerCase().includes(searchString) ||\r\n                    token.symbol.toLowerCase().includes(searchString) ||\r\n                    token.address.toLowerCase().includes(searchString)\r\n                )\r\n            })\r\n        }\r\n\r\n        dispatch(changeFilterProps(searchString, tokenIds, showOnlyTracked, filterIsActive))\r\n    }\r\n}\r\n\r\n\r\nexport function loadTokenList(url) {\r\n    return async (dispatch, getState) => {\r\n        // clear existing tokens\r\n        dispatch(clearTokenList())\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.LOADING))\r\n        // fetch json file from url\r\n        const response = await fetch(url)\r\n        // parse json\r\n        const jsonTokens = await response.json()\r\n\r\n        // inject ETH dummy token\r\n        jsonTokens.push(ETH_TOKEN_DUMMY)\r\n\r\n        // sort token list alphabetically\r\n        jsonTokens.sort((a, b) => ( (a.name.toUpperCase() < b.name.toUpperCase()) ? -1 : 1))\r\n\r\n        // set total number of tokens (for loading progress)\r\n        dispatch(changeValidTokenCount(jsonTokens.length))\r\n\r\n        // add tokens\r\n        jsonTokens.forEach((listToken) => {\r\n            const token = mapListToken(listToken)\r\n            dispatch(addToken(token.address, token))\r\n        })\r\n\r\n        // if there is already a filter set, re-evaluate the filter results\r\n        if (getState().tokens.listState.filterIsActive) {\r\n            dispatch(setFilterProps({}))\r\n        }\r\n\r\n        // Crosscheck tokens with currently tracked tokens\r\n        const allTokenIds = getState().tokens.allIds\r\n        const existingTrackedTokens = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (allTokenIds.indexOf(tokenId) > -1)\r\n        })\r\n        // load balances for tracked tokens\r\n        if (existingTrackedTokens.length) {\r\n            getState().addresses.allIds.forEach(addressId => {\r\n                    dispatch(loadMultiTokenBalances(existingTrackedTokens, addressId))\r\n                }\r\n            )\r\n        }\r\n\r\n        // stop tracking non-existing tokens\r\n        const trackedTokensToRemove = getState().tokens.trackedIds.filter(tokenId => {\r\n            return (existingTrackedTokens.indexOf(tokenId) === -1)\r\n        })\r\n        trackedTokensToRemove.forEach(tokenId => {\r\n            dispatch(changeTokenTracking(tokenId, false))\r\n        })\r\n\r\n        // Finished loading\r\n        dispatch(tokenListStateChanged(TOKEN_LIST_STATES.INITIALIZED))\r\n    }\r\n}\r\n\r\nfunction mapListToken(listToken) {\r\n    return {\r\n        id: listToken['address'],\r\n        address: listToken['address'],\r\n        symbol: listToken['symbol'],\r\n        decimals: new BN(listToken['decimals']),\r\n        name: listToken['name'],\r\n        description: null,\r\n        website: listToken['website'],\r\n        imageUrl: null,\r\n\r\n        supply: {\r\n            loading: false,\r\n            supply: undefined\r\n        },\r\n        balance: undefined,\r\n        eventIds: [],\r\n        loading: false,\r\n    }\r\n}\r\n\r\nexport function instantiateTokenContract(tokenID) {\r\n    return (dispatch, getState) => {\r\n        // create promise that resolves as soon as the contract is instantiated.\r\n        const loadingPromise = new Promise(\r\n            async function(resolve, reject) {\r\n                if (tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                    // This is the dummy token entry for plain ether\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                } else {\r\n                    // indicate we are loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, true))\r\n                    // create token contract instance and store it for later use in state\r\n                    const token = getState().tokens.byId[tokenID]\r\n                    const {web3} = getState().web3Instance\r\n                    const ERC20Contract = contract({abi: erc20ABI})\r\n                    ERC20Contract.setProvider(web3.currentProvider)\r\n                    const contractInstance = await ERC20Contract.at(token.address)\r\n                    dispatch(setTokenContractInstance(tokenID, contractInstance))\r\n                    // indicate we finished loading the token\r\n                    dispatch(loadingTokenChanged(tokenID, false))\r\n                    // finally resolve loading promise\r\n                    resolve()\r\n                }\r\n            }\r\n        )\r\n        dispatch(setTokenLoadingPromise(tokenID, loadingPromise))\r\n    }\r\n}\r\n\r\nexport function loadTokenBalance(tokenID, addressId) {\r\n    return loadMultiTokenBalances([tokenID], addressId)\r\n}\r\n\r\nexport function loadMultiTokenBalances(tokenIDs, addressId) {\r\n    return async (dispatch, getState) => {\r\n        for (const tokenId of tokenIDs) {\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.LOADING))\r\n            const address = getState().addresses.byId[addressId].address\r\n            let balance\r\n            if (tokenId === ETH_TOKEN_MAGIC_ADDRESS) {\r\n                balance = await getState().web3Instance.web3.eth.getBalance(address)\r\n                balance = new BN(balance) // getBalance returns balance in wei as string\r\n            } else {\r\n                await verifyContractInstance(tokenId, dispatch, getState)\r\n                const volatileToken = getState().tokens.volatileById[tokenId]\r\n                balance = await volatileToken.contractInstance.balanceOf(address)\r\n            }\r\n            dispatch(setBalanceByAddressAndToken(addressId, tokenId, balance))\r\n            dispatch(balanceStateChanged(tokenId, addressId, BALANCE_STATES.INITIALIZED))\r\n        }\r\n    }\r\n}\r\n\r\nexport function loadTokenTransferEvents(tokenID, fromBlock, toBlock, addresses) {\r\n    return async (dispatch, getState) => {\r\n        if(tokenID === ETH_TOKEN_MAGIC_ADDRESS) {\r\n            // FIXME - Implement this.\r\n            //  See https://ethereum.stackexchange.com/questions/2531/common-useful-javascript-snippets-for-geth/3478#3478\r\n            //  for sample code to get started\r\n            return\r\n        }\r\n\r\n        const outgoingEventsFetcher = new EventFetcher()\r\n        const incomingEventsFetcher = new EventFetcher()\r\n\r\n        // if no from/toblock are provided, use default values\r\n        if (fromBlock === 0)\r\n            fromBlock = getState().web3Instance.block.number - (2400) // 2400 is ~10 hours\r\n        if (toBlock === 0)\r\n            toBlock = getState().web3Instance.block.number\r\n\r\n        dispatch(aceEntriesLoadingChangeWrapper(addresses, tokenID, true, fromBlock, toBlock, fromBlock))\r\n\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n\r\n        let numEvents = 0\r\n        const maxEvents = 50\r\n\r\n        const progressCallback = function (progressInfo) {\r\n            const { stepsComplete, totalSteps, stepResults,\r\n                stepFromBlock, stepToBlock} = progressInfo\r\n            numEvents += stepResults.length\r\n            dispatch(changeEventScanProps({\r\n                tokenID,\r\n                addresses,\r\n                numEvents,\r\n                currentChunk: stepsComplete,\r\n                maxEvents,\r\n                maxChunks: totalSteps,\r\n                stepFromBlock,\r\n                stepToBlock,\r\n                state: 'scanning'\r\n            }))\r\n            if (stepResults.length) {\r\n                dispatch(addEventsThunk(stepResults, tokenID))\r\n            }\r\n            dispatch(aceEntriesBlockRangeChange(addresses, tokenID, stepFromBlock, stepToBlock))\r\n        }\r\n\r\n        /* Note: It is not possible to \"OR\" two filter properties together, so need to fetch based on _from and _to\r\n        separately. If I set both _to and _from in one filter no events will be found.\r\n         */\r\n        let incomingFetchOptions = {\r\n            contract: contractInstance,\r\n            eventName: 'Transfer',\r\n            fromBlock: fromBlock,\r\n            toBlock: toBlock,\r\n            filter: {\r\n                // Event field \"_from\" is defined in ERC20\r\n                _from: addresses,    // addresses sending token\r\n            },\r\n            progressCallback: progressCallback\r\n        }\r\n        let outgoingFetchOptions = {\r\n            contract: contractInstance,\r\n            eventName: 'Transfer',\r\n            fromBlock: fromBlock,\r\n            toBlock: toBlock,\r\n            filter: {\r\n                // Event field \"_from\" is defined in ERC20\r\n                _to: addresses,    // addresses sending token\r\n            },\r\n            progressCallback: progressCallback\r\n        }\r\n        // set initial progress info\r\n        dispatch(changeEventScanProps({\r\n            tokenID,\r\n            addresses,\r\n            numEvents: 0,\r\n            currentChunk: 0,\r\n            maxEvents,\r\n            maxChunks: 0,\r\n            fromBlock,\r\n            toBlock,\r\n            state: 'scanning'\r\n        }))\r\n\r\n        // ignore return value, as events are already added in the progress callback\r\n        //await incomingEventsFetcher.fetch(incomingFetchOptions)\r\n        //await outgoingEventsFetcher.fetch(outgoingFetchOptions)\r\n        // FIXME: Fetching events in parallel is faster than above \"await\" solution, but messes up the\r\n        // progress info\r\n        let fetcherPromises = []\r\n        fetcherPromises.push(incomingEventsFetcher.fetch(incomingFetchOptions))\r\n        fetcherPromises.push(outgoingEventsFetcher.fetch(outgoingFetchOptions))\r\n        await Promise.all(fetcherPromises)\r\n\r\n        dispatch(aceEntriesLoadingChange(addresses, tokenID, false, 0, 0, 0))\r\n    }\r\n}\r\n\r\nasync function verifyContractInstance(tokenId, dispatch, getState) {\r\n    let volatileToken = getState().tokens.volatileById[tokenId]\r\n    if (volatileToken === undefined) {\r\n        // Create an entry to continue\r\n        dispatch(addVolatileToken(tokenId))\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n    }\r\n    if (volatileToken.loadingPromise) {\r\n        // token is already loading. Just return the promise.\r\n        return volatileToken.loadingPromise\r\n    }\r\n    else {\r\n        dispatch(instantiateTokenContract(tokenId))\r\n        // refresh token, as the loadingPromise has just been added to state\r\n        volatileToken = getState().tokens.volatileById[tokenId]\r\n        return volatileToken.loadingPromise\r\n    }\r\n}\r\n\r\nexport const TRANSACTION_STATES = {\r\n    IDLE: 'IDLE',\r\n    INITIALIZING: 'INITIALIZING',\r\n    WAITING_FOR_SIGNATURE: 'WAITING_FOR_SIGNATURE',\r\n    WAITING_FOR_CONFIRMATION: 'WAITING_FOR_CONFIRMATION',\r\n    CONFIRMED: 'CONFIRMED',\r\n    FAILED: 'FAILED'\r\n}\r\n\r\nexport function transferToken(tokenID, tokenAmount, fromAddress, toAddress) {\r\n    return async (dispatch, getState) => {\r\n        /*\r\n            Commented out until doing implementation\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.INITIALIZING))\r\n\r\n        // obtain token contract instance\r\n        await verifyContractInstance(tokenID, dispatch, getState)\r\n        const contractInstance = getState().tokens.volatileById[tokenID].contractInstance\r\n        // TODO: check if eth balance is sufficient for required gas\r\n        // TODO: check if token balance is sufficient\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_SIGNATURE))\r\n        // TODO: initialize transfer\r\n\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.WAITING_FOR_CONFIRMATION))\r\n\r\n        // finalize transfer\r\n        dispatch(changeTransactionState(TRANSACTION_STATES.CONFIRMED))\r\n\r\n         */\r\n    }\r\n}\r\n\r\nexport const CHANGE_TRANSACTION_STATE = 'CHANGE_TRANSACTION_STATE'\r\nexport function changeTransactionState(transactionState, message='') {\r\n    return {\r\n        type: CHANGE_TRANSACTION_STATE,\r\n        payload: {\r\n            transactionState,\r\n            message\r\n        }\r\n    }\r\n}\r\n","import {\n    CHANGE_FILTER_PROPS,\n    CHANGE_TOKEN_LIST_PAGE,\n    CHANGE_TOKEN_LIST_STATE,\n    CHANGE_VALID_TOKEN_COUNT, CLEAR_TOKEN_LIST,\n    RESET_DISPLAY_COUNT,\n    TOKEN_LIST_STATES\n} from '../tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    listState: TOKEN_LIST_STATES.VIRGIN,\n    total: 0,\n    filter: '',\n    matchedTokenIds: [],\n    displayCount: 10,\n    showOnlyTracked: false,\n    filterIsActive: false,\n    activePage: 1,\n}\n\nfunction clearTokenList(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount,\n        matchedTokenIds: LISTSTATE_INITIAL.matchedTokenIds,\n        activePage: LISTSTATE_INITIAL.activePage,\n        total: LISTSTATE_INITIAL.total,\n        listState: LISTSTATE_INITIAL.listState,\n    }\n}\n\nfunction resetDisplayCount(state) {\n    return {\n        ...state,\n        displayCount: LISTSTATE_INITIAL.displayCount\n    }\n}\n\nfunction tokenListStateChanged(state, action) {\n    // very simple reducer, just set a new state\n    const {payload} = action\n    const {listState} = payload\n    return {\n        ...state,\n        listState\n    }\n}\n\nfunction changeValidTokenCount(state, action){\n    const {payload} = action\n    const {count} = payload\n    return {\n        ...state,\n        total: count\n    }\n}\n\nfunction changeFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedTokenIds, showOnlyTracked, filterIsActive} = payload\n    return {\n        ...state,\n        filter,\n        matchedTokenIds,\n        showOnlyTracked,\n        filterIsActive,\n    }\n}\n\nfunction tokenListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nexport const listStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_LIST_STATE:\n            return tokenListStateChanged(state, action)\n        case CHANGE_VALID_TOKEN_COUNT:\n            return changeValidTokenCount(state, action)\n        case CHANGE_FILTER_PROPS:\n            return changeFilterProps(state, action)\n        case RESET_DISPLAY_COUNT:\n            return resetDisplayCount(state)\n        case CHANGE_TOKEN_LIST_PAGE:\n            return tokenListPageChanged(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearTokenList(state)\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, CLEAR_TOKEN_LIST, IS_LOADING_SUPPLY, IS_LOADING_TOKEN,\n    SET_TOKEN_SUPPLY\n} from '../tokenActions'\nimport {ADD_EVENTS} from '../../event/eventActions'\n\nconst TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokensById() {\n    return TOKENS_BY_ID_INITIAL\n}\n\nfunction addTokenEntry(state, action) {\n    const {payload} = action\n    const {tokenID, token} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: token\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\nfunction loadingTokenChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loading: isLoading\n        }\n    }\n}\n\nfunction setTokenSupply(state, action) {\n    const {payload} = action\n    const {tokenID, supply} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                supply\n            }\n        }\n    }\n}\n\nfunction loadingSupplyChanged(state, action) {\n    const {payload} = action\n    const {tokenID, isLoading} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            supply: {\n                ...token.supply,\n                loading: isLoading\n            }\n        }\n    }\n}\n\nfunction addTransferEvents(state, action) {\n    // Attach the new event to the according token contract\n    const {payload} = action\n    const {events, tokenId} = payload\n\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenId]\n\n    let newEventIds = token.eventIds\n\n    events.forEach(transferEvent => {\n        const transferEventId = transferEvent.id\n\n        if (newEventIds.includes(transferEventId)) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newEventIds = newEventIds.concat(transferEventId)\n    })\n\n    return {\n        ...state,\n        [tokenId]: {\n            ...token,\n            eventIds: newEventIds\n        }\n    }\n}\n\nexport const tokensByIdReducer = (state = TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenEntry(state, action)\n        }\n        case IS_LOADING_TOKEN: {\n            return loadingTokenChanged(state, action)\n        }\n        case SET_TOKEN_SUPPLY: {\n            return setTokenSupply(state, action)\n        }\n        case IS_LOADING_SUPPLY: {\n            return loadingSupplyChanged(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokensById(state, action)\n        }\n        case ADD_EVENTS: {\n            return addTransferEvents(state, action)\n        }\n        default:\n            return state\n    }\n}\n","import {ADD_TOKEN, CLEAR_TOKEN_LIST} from '../tokenActions'\n\nconst ALL_TOKENS_INITIAL = []\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate token\n    if (state.indexOf(tokenID) === -1) {\n        // append the new token's ID to the list of all IDs\n        return state.concat(tokenID);\n    }\n    else {\n        // duplicate\n        return state\n    }\n}\n\nfunction clearAllTokens() {\n    return ALL_TOKENS_INITIAL\n}\n\nexport const allTokensReducer = (state=ALL_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllTokens(state, action)\n        }\n        default:\n            return state\n    }\n}\n\n","import {\n    ADD_TOKEN, ADD_VOLATILE_TOKEN, CLEAR_TOKEN_LIST,\n    SET_TOKEN_CONTRACT_INSTANCE,\n    SET_TOKEN_LOADING_PROMISE,\n} from '../tokenActions'\n\nconst VOLATILE_TOKENS_BY_ID_INITIAL = {}\n\nfunction clearTokens() {\n    return VOLATILE_TOKENS_BY_ID_INITIAL\n}\n\nfunction setTokenContractInstance(state, action) {\n    const {payload} = action\n    const {tokenID, contractInstance} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        [tokenID]: {\n            ...token,\n            contractInstance: contractInstance\n        }\n    }\n}\n\nfunction addTokenId(state, action) {\n    const {payload} = action\n    const {tokenID} = payload\n    // prevent duplicate entries\n    if (state[tokenID] === undefined) {\n        // insert new token\n        return {\n            ...state,\n            [tokenID]: {\n                tokenID,\n            }\n        }\n    } else {\n        // ignore duplicate...\n        return state\n    }\n}\n\n\nfunction setTokenLoadingPromise(state, action) {\n    const {payload} = action\n    const {tokenID, loadingPromise} = payload\n    // Look up the correct token, to simplify the rest of the code\n    const token = state[tokenID]\n    return {\n        ...state,\n        // Update our Token object with a new supply value\n        [tokenID]: {\n            ...token,\n            loadingPromise\n        }\n    }\n}\n\nexport const volatileTokensByIdReducer = (state = VOLATILE_TOKENS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case ADD_VOLATILE_TOKEN: {\n            return addTokenId(state, action)\n        }\n        case SET_TOKEN_LOADING_PROMISE: {\n            return setTokenLoadingPromise(state, action)\n        }\n        case SET_TOKEN_CONTRACT_INSTANCE: {\n            return setTokenContractInstance(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearTokens()\n        }\n        default:\n            return state\n    }\n}\n\n","import {CHANGE_TOKEN_TRACKING} from '../tokenActions'\n\nconst TRACKED_TOKENS_INITIAL = []\n\nfunction changeTokenTracking(state, action) {\n    const {payload} = action\n    const {tokenId, doTrack} = payload\n    // Check if this token is currently tracked\n    const trackedIndex = state.indexOf(tokenId)\n    if (doTrack && (trackedIndex === -1)) {\n        // Add new tracked entry\n        return state.concat(tokenId)\n    }\n    if (!doTrack && (trackedIndex > -1)) {\n        // remove existing tracked entry. Use \"filter\" instead of splice, as it returns a new array, while \"splice\"\n        // mutates the existing one.\n        return state.filter(id => (id !== tokenId))\n    }\n    // No need to change anything\n    return state\n}\n\nexport const trackedTokensReducer = (state=TRACKED_TOKENS_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_TOKEN_TRACKING:\n            return changeTokenTracking(state, action)\n        default:\n            return state\n    }\n}\n\n","import Web3 from 'web3'\n/*\n Obtain web3 instance. Based on code from\n https://medium.com/metamask/https-medium-com-metamask-breaking-change-injecting-web3-7722797916a8\n */\nlet getWeb3 = new Promise(function (resolve, reject) {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener('load', async () => {\n        let myWeb3\n\n        // Modern dapp browsers...\n        if (window.ethereum) {\n            myWeb3 = new Web3(window.ethereum)\n        }\n\n        if (myWeb3) {\n            console.log('Injected web3 detected.')\n            let results = {\n                web3: myWeb3\n            }\n            resolve(results)\n        } else {\n            let results = {\n                error: 'No web3 injected'\n            }\n            reject(results)\n        }\n    })\n})\n\nexport default getWeb3\n","import getWeb3 from '../../utils/getWeb3'\nimport {clearTokenList} from '../token/tokenActions'\n\nexport const WEB3_STATES = {\n    UNINITIALIZED: 'uninitialized',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n    ERROR: 'error'\n}\n\nexport const ETH_ENABLE_STATES = {\n    REJECTED: 'rejected', // no access to eth.accounts\n    WAITING: 'waiting', // waiting for user confirmation in UI (e.g. metamask)\n    GRANTED: 'granted', // user has granted access to eth.accounts\n}\n\nexport const SET_WEB3_STATE = 'SET_WEB3_STATE'\nexport function setWeb3State(state) {\n    return {\n        type: SET_WEB3_STATE,\n        state\n    }\n}\n\nexport const SET_ETH_ENABLE_STATE = 'SET_ETH_ENABLE_STATE'\nexport function setEthEnableState(ethEnableState) {\n    return {\n        type: SET_ETH_ENABLE_STATE,\n        ethEnableState\n    }\n}\n\nexport const SET_WEB3INSTANCE = 'SET_WEB3INSTANCE'\nexport function setWeb3Instance(web3) {\n    return {\n        type: SET_WEB3INSTANCE,\n        web3\n    }\n}\n\nexport const SET_CURRENT_BLOCK = 'SET_CURRENT_BLOCK'\nexport function setCurrentBlock(block) {\n    return {\n        type: SET_CURRENT_BLOCK,\n        block\n    }\n}\n\nexport const SET_NETWORK = 'SET_NETWORK'\nexport function setNetwork(id, name, previousId) {\n    return {\n        type: SET_NETWORK,\n        id,\n        name,\n        previousId,\n    }\n}\n\nexport const SET_NODE_VERSION = 'SET_NODE_VERSION'\nexport function setNodeVersion(nodeVersion) {\n    return {\n        type: SET_NODE_VERSION,\n        nodeVersion\n    }\n}\n\nexport const SET_BLOCK_FILTER = 'SET_BLOCK_FILTER'\nexport function setBlockFilter(blockFilter) {\n    return {\n        type: SET_BLOCK_FILTER,\n        blockFilter\n    }\n}\n\nexport function stopBlockFilter() {\n    return (dispatch, getState) => {\n        // Clean up any blockfilter that might be active\n        const {blockFilter} = getState().web3Instance\n        if (blockFilter) {\n            blockFilter.unsubscribe((error, success) => {\n                if (error) {\n                    console.log(\"Error stopping blockfilter: \" + error)\n                } else {\n                    console.log(\"Success stopping blockfilter: \" + success)\n                }\n            })\n            dispatch(setBlockFilter(null))\n        }\n    }\n}\n\nexport function initialize() {\n    return async (dispatch, getState) => {\n        // stop any running block filter, just in case...\n        dispatch(stopBlockFilter())\n\n        // signal that web3 is being initialized\n        dispatch(setWeb3State(WEB3_STATES.LOADING))\n\n        // set web3 instance\n        try {\n            var {web3} = await getWeb3\n            // stop loading\n            dispatch(setWeb3State(WEB3_STATES.INITIALIZED))\n        }\n        catch(e) {\n            console.log(\"Error getting web3: \" + e)\n            dispatch(setWeb3State(WEB3_STATES.ERROR))\n            return;\n        }\n\n        dispatch(setWeb3Instance(web3))\n\n        // start watching for network change events\n        if (window.ethereum) {\n            // disable page reload on network change\n            window.ethereum.autoRefreshOnNetworkChange = false;\n            // register callback to handle network change\n            window.ethereum.on('networkChanged', (networkID) => {\n                networkID = parseInt(networkID)\n                console.log(\"Network changed to \" + networkID)\n                const network = getNetworkName(networkID)\n                const oldNetworkId = getState().web3Instance.id\n                dispatch(setNetwork(networkID, network, oldNetworkId))\n                dispatch(clearTokenList())\n            } )\n        } else {\n            // legacy browser\n            setInterval(async function () {\n                const networkID = await web3.eth.net.getId()\n                const oldNetworkId = getState().web3Instance.id\n                if (oldNetworkId !== networkID) {\n                    const network = getNetworkName(networkID)\n                    dispatch(setNetwork(networkID, network, oldNetworkId))\n                    dispatch(clearTokenList())\n                }\n            }, 1000)\n        }\n\n        // set node info\n        const nodeVersion = await web3.eth.getNodeInfo()\n        dispatch(setNodeVersion(nodeVersion))\n\n        // set network info\n        const networkID = await web3.eth.net.getId()\n        const network = getNetworkName(networkID)\n        dispatch(setNetwork(networkID, network, undefined))\n\n        // set current block\n        const block = await web3.eth.getBlock('latest')\n        dispatch(setCurrentBlock(block))\n\n        // start listening for new block events\n        const filter = web3.eth.subscribe('newBlockHeaders')\n        .on(\"data\", function (blockHeader) {\n            dispatch(setCurrentBlock(blockHeader))\n        })\n        .on(\"error\", function (error) {\n            console.log(error)\n        })\n        dispatch(setBlockFilter(filter))\n\n    }\n}\n\nexport function requestEthEnable() {\n    return async (dispatch, getState) => {\n        if (window.ethereum) {\n            // request access to user accounts as described in EIP-1102\n            try {\n                // signal that app is waiting for user action\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.WAITING))\n                // request access\n                await window.ethereum.enable()\n                // signal success\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n            } catch(error) {\n                // user rejected access\n                dispatch(setEthEnableState(ETH_ENABLE_STATES.REJECTED))\n            }\n        } else {\n            // must be a legacy browser, which should grant access by default.\n            dispatch(setEthEnableState(ETH_ENABLE_STATES.GRANTED))\n        }\n    }\n}\n\nfunction getNetworkName(networkId) {\n    let network = 'unknown'\n    switch (networkId) {\n        case 4447:\n            network = 'truffle test'\n            break\n        case 1:\n            network = 'mainnet'\n            break\n        case 2:\n            network = 'Morden (deprecated!)'\n            break\n        case 3:\n            network = 'Ropsten'\n            break\n        case 4:\n            network = 'Rinkeby'\n            break\n        case 42:\n            network = 'Kovan'\n            break\n        case 61:\n            network = 'ETC'\n            break\n        case 62:\n            network = 'ETC Testnet'\n            break\n        default:\n            network = 'Unknown'\n    }\n    return network\n}\n","import {CHANGE_SELECTOR_TOKENID} from '../tokenActions'\nimport {SET_NETWORK} from '../../web3/web3Actions'\n\nconst SELECTOR_INITIAL = {\n    selectedTokenId: undefined\n}\n\nfunction changeSelectorTokenId(state, action) {\n    const {payload} = action\n    const {selectedTokenId} = payload\n\n    return {\n        ...state,\n        selectedTokenId,\n    }\n}\n\nfunction setNetwork(state, action) {\n    const {id, previousId} = action\n    // if the existing network got changed, clear the selected token. If this\n    // is the initial setNetwork event after page load (previousID is undefined)\n    // keep the selectedTokenId\n    // NOTE: This will only start working when Metamask stops the full page reload on network change.\n    // See https://github.com/MetaMask/metamask-extension/issues/3599.\n    if (previousId && (previousId !== id))\n        return SELECTOR_INITIAL\n    else\n        return state\n}\n\nexport const selectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_TOKENID:\n            return changeSelectorTokenId(state, action)\n        case SET_NETWORK:\n            return setNetwork(state, action)\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {listStateReducer} from './ListStateReducer'\nimport {tokensByIdReducer} from './TokensByIdReducer'\nimport {allTokensReducer} from './AllIdsReducer'\nimport {volatileTokensByIdReducer} from './volatileTokensByIdReducer'\nimport {trackedTokensReducer} from './TrackedIdsReducer'\nimport {selectorReducer} from './SelectorReducer'\n\n/*\nState tree:\n{\n    listState: {\n        listState: 'loading'\n        filter: 'Dumb'\n        matchedTokenIds: [6]\n        total: 2\n        activePage: 1\n    }\n    byId: {\n        [1]: {\n            loading: true\n            tokenID: 1\n            name: 'GAVCoin'\n            address: '0x123456678'\n            contractInstance: null\n            supply: {\n                loading: true\n                supply: 0\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        },\n        [6]: {\n            loading: false\n            tokenID: 6\n            name: 'DumbCoin'\n            address: '0x123456678'\n            contractInstance: <truffle-contract instance>\n            supply: {\n                loading: false\n                supply: 200000\n            }\n            balance: {\n                loading: false\n                supply: 0\n            }\n            ...\n        }\n    },\n    allIds: [1, 6],\n    trackedIds: [3, 4]\n}\n*/\n\nexport const tokens = combineReducers({\n    listState: listStateReducer,\n    byId : tokensByIdReducer,\n    allIds : allTokensReducer,\n    trackedIds: trackedTokensReducer,\n    volatileById: volatileTokensByIdReducer,\n    selector: selectorReducer,\n});\n","export function updateObject(oldObject, newValues) {\n    // Encapsulate the idea of passing a new object as the first parameter\n    // to Object.assign to ensure we correctly copy data instead of mutating\n    return Object.assign({}, oldObject, newValues);\n}\n\nexport function updateItemInArray(array, itemId, updateItemCallback) {\n    return array.map(item => {\n        if (item.id !== itemId) {\n            // Since we only want to update one item, preserve all others as they are now\n            return item;\n        }\n\n        // Use the provided callback to create an updated item\n        return updateItemCallback(item);\n    });\n}\n","import {updateObject} from \"../../utils/reducerUtils\"\nimport {\n    SET_CURRENT_BLOCK,\n    SET_WEB3INSTANCE,\n    SET_NETWORK,\n    SET_NODE_VERSION, SET_BLOCK_FILTER, WEB3_STATES, SET_WEB3_STATE, ETH_ENABLE_STATES, SET_ETH_ENABLE_STATE,\n} from './web3Actions'\n\nconst WEB3_INITIAL = {\n    web3: null,\n    state: WEB3_STATES.UNINITIALIZED,\n    block: {\n        number: 0,\n        timestamp: 0\n    },\n    id: -1,\n    name: 'unknown',\n    blockFilter: null,\n    ethEnableState: ETH_ENABLE_STATES.REJECTED,\n}\n\nexport const web3Instance = (state=WEB3_INITIAL, action) => {\n    switch (action.type) {\n        case SET_WEB3_STATE:\n            return updateObject(state, {state: action.state})\n        case SET_ETH_ENABLE_STATE:\n            return updateObject(state, {ethEnableState: action.ethEnableState})\n        case SET_WEB3INSTANCE:\n            return updateObject(state, {web3: action.web3})\n        case SET_CURRENT_BLOCK:\n            return updateObject(state, {block: action.block})\n        case SET_NETWORK:\n            return updateObject(state, {id: action.id, name: action.name})\n        case SET_NODE_VERSION:\n            return updateObject(state, {nodeVersion: action.nodeVersion})\n        case SET_BLOCK_FILTER:\n            return updateObject(state, {blockFilter: action.blockFilter})\n        default:\n    }\n    return state;\n}\n","import {loadMultiTokenBalances} from '../token/tokenActions'\nimport {clearAddressBalances} from '../balance/balanceActions'\nimport {storeLocalData, WATCHED_ADDRESSES} from \"../../utils/localStorageWrapper\"\n\nexport const ADDRESS_TYPE_EXTERNAL='ADDRESS_TYPE_EXTERNAL'\nexport const ADDRESS_TYPE_OWNED='ADDRESS_TYPE_OWNED'\nexport const ADDRESS_BALANCES_STATES = {\n    VIRGIN: 'virgin',\n    LOADING: 'loading',\n    INITIALIZED: 'initialized',\n}\n\nexport const CHANGE_ADDRESS_BALANCES_STATE = 'CHANGE_ADDRESS_BALANCES_STATE'\nexport function addressBalancesStateChanged(addressId, addressBalancesState) {\n    return {\n        type: CHANGE_ADDRESS_BALANCES_STATE,\n        payload: {\n            addressId,\n            addressBalancesState\n        }\n    }\n}\n\nexport const ADD_ADDRESS = 'ADD_ADDRESS'\nexport function addAddress(address, ensName, type) {\n    return {\n        type: ADD_ADDRESS,\n        payload: {\n            addressId: address,\n            address,\n            ensName,\n            type\n        }\n    }\n}\n\n\nexport function removeAddressThunk(addressId) {\n    return (dispatch, getState) => {\n        // remove from state\n        dispatch(removeAddress(addressId))\n        // remove all balance entries\n        dispatch(clearAddressBalances(addressId))\n        // update localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n    }\n}\n\nexport const REMOVE_ADDRESS='REMOVE_ADDRESS'\nexport function removeAddress(addressId) {\n    return {\n        type: REMOVE_ADDRESS,\n        payload: {\n            addressId\n        }\n    }\n}\n\nexport const CHANGE_ADDRESS_TYPE='CHANGE_ADDRESS_TYPE'\nexport function changeAddressType(addressId, newType) {\n    return {\n        type: CHANGE_ADDRESS_TYPE,\n        payload: {\n            addressId,\n            newType,\n        }\n    }\n}\n\nexport function addNewAddress(address, ensName, type) {\n    return (dispatch, getState) => {\n        // a new address is added.\n        // make sure that all addresses are stored in lowercase\n        address = address.toLowerCase()\n        // add address to store\n        dispatch(addAddress(address, ensName, type))\n        // save address in localStorage\n        const addressesToStore = Object.values(getState().addresses.byId).map(o => (\n            {\n                address: o.address,\n                ensName: o.ensName\n            })\n        )\n        storeLocalData(WATCHED_ADDRESSES, addressesToStore)\n        // If i'm tracking tokens start getting balance right away\n        const trackedIds = getState().tokens.trackedIds\n        if (trackedIds.length) {\n            // load balance for all tracked tokens\n            dispatch(loadMultiTokenBalances(trackedIds, address))\n        }\n    }\n}\n\nexport function changeOwnAddresses(accounts) {\n    // for each account in accounts:\n    // -> if it is not in addresses, add it\n    // -> if it is in addresses, but marked as \"external\", change type to \"owned\"\n    return (dispatch, getState) => {\n        // since web3 1.x the accounts are checksummed. Convert all entries to lowercase for easier comparison\n        accounts = accounts.map(entry => entry.toLowerCase())\n\n        const addressesById = getState().addresses.byId\n\n        const newAccounts = accounts.filter(account => {\n            const existingAddress = Object.values(addressesById).filter(entry => {\n                return (entry.address === account)\n            })\n            if (existingAddress.length > 0) {\n                // check if the type has changed\n                if (existingAddress[0].type !== ADDRESS_TYPE_OWNED){\n                    console.log(\"Changing address \" + existingAddress[0].address + \" type to Owned!\")\n                    dispatch(changeAddressType(existingAddress[0].address, ADDRESS_TYPE_OWNED))\n                }\n                return false // address already known\n            }\n            return true // address needs to be added\n        })\n\n        // now check if there is any address currently marked as owned that is no more in accounts\n        const makeExternal = Object.values(addressesById).filter(entry => {\n            if (entry.type === ADDRESS_TYPE_OWNED) {\n                // if this OWNED address is not in accounts array it needs to change to EXTERNAL!\n                const idx = accounts.indexOf(entry.address)\n                return (idx === -1)\n            }\n            return false\n        })\n\n        // make old owned addresses external\n        makeExternal.forEach(address => {\n            dispatch(changeAddressType(address.address, ADDRESS_TYPE_EXTERNAL))\n        })\n\n        // add all new addresses\n        newAccounts.forEach(account => {\n            dispatch(addNewAddress(account, '', ADDRESS_TYPE_OWNED))\n        })\n    }\n}\n\nexport const CHANGE_SELECTOR_ADDRESSID = 'CHANGE_SELECTOR_ADDRESSID'\nexport function changeSelectorAddressId(selectedAddressId) {\n    return {\n        type: CHANGE_SELECTOR_ADDRESSID,\n        payload: {\n            selectedAddressId,\n        }\n    }\n}\n","import {\n    ADD_ADDRESS, ADDRESS_BALANCES_STATES, CHANGE_ADDRESS_BALANCES_STATE, CHANGE_ADDRESS_TYPE,\n    REMOVE_ADDRESS\n} from '../addressActions'\n\nconst ADDRESS_BY_ID_INITIAL = {}\n\nfunction addAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId, address, ensName, type} = payload\n    if (Object.keys(state).indexOf(addressId) > -1)\n    {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return {\n        ...state,\n        [addressId]: {\n            address,\n            ensName,\n            type,\n            balancesState: ADDRESS_BALANCES_STATES.VIRGIN,\n            eventIds: []\n        },\n    }\n}\n\nfunction removeAddressEntry(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    let newState = Object.assign({}, state)\n    delete newState[addressId]\n    return newState\n}\n\nfunction changeAddressType(state, action) {\n    const {payload} = action\n    const {addressId, newType} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            type: newType\n        }\n    }\n}\n\nfunction changeAddressBalancesState(state, action) {\n    const {payload} = action\n    const {addressBalancesState, addressId} = payload\n    const addressEntry = state[addressId]\n    return {\n        ...state,\n        [addressId] : {\n            ...addressEntry,\n            balancesState: addressBalancesState\n        }\n    }\n}\n\nexport const addressByIdReducer = (state=ADDRESS_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressEntry(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressEntry(state, action)\n        case CHANGE_ADDRESS_TYPE:\n            return changeAddressType(state, action)\n        case CHANGE_ADDRESS_BALANCES_STATE:\n            return changeAddressBalancesState(state, action)\n        default:\n    }\n    return state;\n}\n","import {ADD_ADDRESS, REMOVE_ADDRESS} from '../addressActions'\n\nconst ALL_ADDRESSES_INITIAL = []\n/*const ALL_ADDRESSES_INITIAL = [\n    '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n    '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n    '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9',\n]*/\n\nfunction addAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(addressId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate address \" + addressId)\n        return state\n    }\n    return state.concat(addressId)\n}\n\nfunction removeAddressId(state, action) {\n    const {payload} = action\n    const {addressId} = payload\n    return state.filter(entryId => (entryId !== addressId))\n}\n\nexport const allAddressIdsReducer = (state=ALL_ADDRESSES_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_ADDRESS:\n            return addAddressId(state, action)\n        case REMOVE_ADDRESS:\n            return removeAddressId(state, action)\n        default:\n    }\n    return state;\n}\n","import {CHANGE_SELECTOR_ADDRESSID} from '../addressActions'\n\nconst SELECTOR_INITIAL = {\n    selectedAddressId: '',\n}\n\nfunction changeSelectorAddressId(state, action){\n    const {payload} = action\n    const {selectedAddressId} = payload\n\n    return {\n        ...state,\n        selectedAddressId,\n    }\n}\n\nexport const addressSelectorReducer = (state=SELECTOR_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_SELECTOR_ADDRESSID:\n            return changeSelectorAddressId(state, action)\n        default:\n            return state\n    }\n}\n\n","import {addressByIdReducer} from './addressByIdReducer'\nimport {allAddressIdsReducer} from './allAddressIdsReducer'\nimport {combineReducers} from 'redux'\nimport {addressSelectorReducer} from './addressSelectorReducer'\n\n/*\nState tree:\n{\n    addresses: {\n        byId: {\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0': {\n                address: '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n                ensName: 'validaddress.eth',\n                type: ADDRESS_TYPE_EXTERNAL,\n                balancesState: 'virgin',\n                eventIds: []\n            },\n            ...\n        }\n\n        allIds: [\n            '0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0',\n            '0xa38da4974b594204b73581ac5fbc1ebee54ca4e0',\n            '0xc44e4c49ffa5db98ca52770dff3e371ecb01f2d9'\n        ]\n    }\n}\n*/\n\nexport const addresses = combineReducers({\n    byId : addressByIdReducer,\n    allIds : allAddressIdsReducer,\n    selector: addressSelectorReducer,\n});\n","import {\n    BALANCE_STATES,\n    CREATE_BALANCE_ENTRY,\n    DELETE_BALANCE_ENTRY,\n    SET_BALANCE,\n    SET_BALANCE_STATE\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\nimport BN from 'bn.js'\n\nconst BALANCE_BY_ID_INITIAL = {}\n\nfunction clearAllBalances() {\n    return BALANCE_BY_ID_INITIAL;\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balance\n        }\n    };\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId, addressId, tokenId} = payload\n    return {\n        ...state,\n        [balanceId] : {\n            balanceId,\n            addressId,\n            tokenId,\n            balance: new BN(0),\n            balanceState: BALANCE_STATES.VIRGIN,\n        }\n    }\n}\n\nfunction balanceStateChanged(state, action){\n    const {payload} = action\n    const {balanceId, balanceState} = payload\n    const balanceEntry = state[balanceId]\n    return {\n        ...state,\n        [balanceId] : {\n            ...balanceEntry,\n            balanceState,\n        }\n    }\n\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    delete state[balanceId]\n    return state\n}\n\n\nexport const byId = (state=BALANCE_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case SET_BALANCE_STATE: {\n            return balanceStateChanged(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state;\n    }\n}\n","import {CREATE_BALANCE_ENTRY, DELETE_BALANCE_ENTRY} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_BALANCES_INITIAL = []\n\nfunction clearAllBalances() {\n    return ALL_BALANCES_INITIAL;\n}\n\nfunction createBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    // prevent duplicate entries\n    const existingIndex = state.indexOf(balanceId)\n    if (existingIndex > -1) {\n        console.warn(\"Ignoring duplicate balance \" + balanceId)\n        return state\n    }\n    return state.concat(balanceId)\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\n\nexport const allIds = (state=ALL_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case CREATE_BALANCE_ENTRY: {\n            return createBalanceEntry(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST: {\n            return clearAllBalances()\n        }\n        default:\n            return state\n    }\n}\n","import {DELETE_BALANCE_ENTRY, SET_BALANCE} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst POSITIVE_BALANCES_INITIAL = []\n\nfunction clearPositiveBalances() {\n    return POSITIVE_BALANCES_INITIAL\n}\n\nfunction setBalance(state, action) {\n    const {payload} = action\n    const {balanceId, balance} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1) {\n        // this balance entry is currently marked as having a balance...\n        if (balance.isZero()) {\n            // no more balance. Remove from array\n            const newState = state.filter(entry => entry !== balanceId)\n            return newState\n        } else {\n            // all set, no need for action\n            return state\n        }\n    } else {\n        // this balance entry is currently marked as having NO balance...\n        if (balance.gt(0)) {\n            // ... but it has a balance now! Add it to list.\n            return state.concat(balanceId)\n        } else {\n            // ... and it still has no balance. No need for action\n            return state\n        }\n    }\n}\n\nfunction deleteBalanceEntry(state, action) {\n    const {payload} = action\n    const {balanceId} = payload\n    const index = state.indexOf(balanceId)\n    if (index > -1){\n        state.splice(index, 1)\n        return state\n    }\n    return state\n}\n\nexport const positiveIds = (state=POSITIVE_BALANCES_INITIAL, action) => {\n    switch (action.type) {\n        case SET_BALANCE: {\n            return setBalance(state, action)\n        }\n        case DELETE_BALANCE_ENTRY: {\n            return deleteBalanceEntry(state, action)\n        }\n        case CLEAR_TOKEN_LIST:\n            return clearPositiveBalances()\n        default:\n            return state;\n    }\n}\n","import {\n    CHANGE_BALANCE_FILTER_PROPS,\n} from '../balanceActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst BALANCE_LISTSTATE_INITIAL = {\n    filter: '',\n    matchedBalanceIds: [],\n    displayCount: 10,\n}\n\nfunction clearBalanceListState() {\n    return BALANCE_LISTSTATE_INITIAL\n}\n\nfunction changeBalanceFilterProps(state, action){\n    const {payload} = action\n    const {filter, matchedBalanceIds} = payload\n    return {\n        ...state,\n        filter,\n        matchedBalanceIds\n    }\n}\n\nexport const listStateReducer = (state=BALANCE_LISTSTATE_INITIAL, action) => {\n    switch (action.type) {\n        case CHANGE_BALANCE_FILTER_PROPS:\n            return changeBalanceFilterProps(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearBalanceListState()\n        default:\n            return state\n    }\n}\n\n","import {combineReducers} from \"redux\"\nimport {byId} from './balanceByIdReducer'\nimport {allIds} from './allBalancesReducer'\nimport {positiveIds} from './positiveBalancesReducer'\nimport {listStateReducer} from './BalanceListStateReducer'\n\n/*\nState tree:\n{\n    balance: {\n        byId: {\n            [1]: {\n                balanceId: 1\n                tokenId: 1\n                addressId: 1\n                balance: 22.45\n            },\n        }\n        allIds: [1],\n        positiveIds: [1]    // all balances that have an actual balance > 0\n        listState: {\n            filter: '',\n            matchedBalanceIds: [],\n            displayCount: 10,\n        }\n    }\n}\n*/\n\nexport const balance = combineReducers({\n    byId : byId,\n    allIds : allIds,\n    positiveIds: positiveIds,\n    listState: listStateReducer,\n})\n","import {ADD_EVENTS} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst EVENT_BY_ID_INITIAL = {}\n\nfunction addEvents(state, action) {\n    const {payload} = action\n    const {events, tokenId} = payload\n    events.forEach(transferEvent => {\n        const transferEventId = transferEvent.id\n        // prevent duplicate entries\n        if (Object.keys(state).includes(transferEventId ))\n        {\n            console.warn(\"Ignoring duplicate event \" + transferEventId )\n            return\n        }\n        state = {\n            ...state,\n            [transferEventId]: {\n                transferEventId,\n                tokenId,\n                transferEvent,\n            },\n        }\n    })\n    return state\n}\n\nfunction clearEvents() {\n    return EVENT_BY_ID_INITIAL\n}\n\nexport const eventByIdReducer = (state=EVENT_BY_ID_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEvents(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {ADD_EVENTS} from '../eventActions'\nimport {CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst ALL_EVENTS_INITIAL = []\n\nfunction addEventIds(state, action) {\n    const {payload} = action\n    const {events} = payload\n    let newState = state\n    events.forEach(transferEvent => {\n        const transferEventId = transferEvent.id\n        // prevent duplicate entries\n        const existingIndex = state.indexOf(transferEventId)\n        if (existingIndex > -1) {\n            console.warn(\"Ignoring duplicate event \" + transferEventId)\n            return\n        }\n        newState = newState.concat(transferEventId)\n    })\n    return newState\n}\n\nfunction clearEvents() {\n    return ALL_EVENTS_INITIAL\n}\n\nexport const allEventIdsReducer = (state=ALL_EVENTS_INITIAL, action) => {\n    switch (action.type) {\n        case ADD_EVENTS:\n            return addEventIds(state, action)\n        case CLEAR_TOKEN_LIST:\n            return clearEvents()\n        default:\n    }\n    return state;\n}\n","import {CHANGE_EVENT_SCAN_PROPS, CHANGE_TRANSFEREVENTLIST_PAGE} from '../eventActions'\nimport {CHANGE_SELECTOR_ADDRESSID} from '../../address/addressActions'\nimport {CHANGE_SELECTOR_TOKENID, CLEAR_TOKEN_LIST} from '../../token/tokenActions'\n\nconst LISTSTATE_INITIAL = {\n    activePage: 1,\n    currentChunk: 0,\n    maxChunks: 0,\n}\n\nfunction transferEventListPageChanged(state, action)  {\n    const {payload} = action\n    const {activePage} = payload\n    return {\n        ...state,\n        activePage,\n    }\n}\n\nfunction resetPager(state) {\n    return {\n        ...state,\n        activePage: 1\n    }\n}\n\nfunction changeEventScanProps(state, action) {\n    const {payload} = action\n    const {\n        currentChunk,\n        maxChunks,\n    } = payload.props\n\n    return {\n        ...state,\n        currentChunk,\n        maxChunks\n    }\n}\n\nexport const transferEventListStateReducer = (state=LISTSTATE_INITIAL, action) => {\n    switch(action.type) {\n        case CHANGE_TRANSFEREVENTLIST_PAGE:\n            return transferEventListPageChanged(state, action)\n        case CHANGE_EVENT_SCAN_PROPS:\n            return changeEventScanProps(state, action)\n        case CHANGE_SELECTOR_ADDRESSID:\n        case CHANGE_SELECTOR_TOKENID:\n        case CLEAR_TOKEN_LIST:\n            return resetPager(state, action)\n        default:\n            return state\n    }\n}\n","import {combineReducers} from 'redux'\nimport {eventByIdReducer} from './eventByIdReducer'\nimport {allEventIdsReducer} from './allEventIdsReducer'\nimport {addressContractEventsByIdReducer} from './addressContractEventsByIdReducer'\nimport {transferEventListStateReducer} from './listStateReducer'\n\n\nexport const events = combineReducers({\n    byId : eventByIdReducer,\n    allIds : allEventIdsReducer,\n    aceById: addressContractEventsByIdReducer,\n    listState: transferEventListStateReducer,\n});\n","export const SHOW_MODAL = 'SHOW_MODAL'\nexport function showModal(modalType, modalProps) {\n    return {\n        type: SHOW_MODAL,\n        payload: {\n            modalType,\n            modalProps\n        }\n    }\n}\n\nexport const HIDE_MODAL = 'HIDE_MODAL'\nexport function hideModal() {\n    return {\n        type: HIDE_MODAL,\n        payload: {}\n    }\n}\n","import {HIDE_MODAL, SHOW_MODAL} from './modalActions'\n\nconst MODAL_INITIAL = {\n    modalType: null,\n    modalProps: {}\n}\n\nfunction showModal(state, action) {\n    const {payload} = action\n    const {modalType, modalProps} = payload\n    return {\n        modalType,\n        modalProps\n    }\n}\n\nfunction hideModal() {\n    return MODAL_INITIAL\n}\n\nexport const modal = (state=MODAL_INITIAL, action) => {\n    switch (action.type) {\n        case SHOW_MODAL:\n            return showModal(state, action)\n        case HIDE_MODAL:\n            return hideModal()\n        default:\n    }\n    return state;\n}\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport {tokens} from \"./modules/token/reducers/tokenReducer\"\nimport {web3Instance} from \"./modules/web3/web3Reducer\"\nimport thunk from 'redux-thunk'\nimport {addresses} from './modules/address/reducers/addressReducer'\nimport {balance} from './modules/balance/reducer/balanceReducer'\nimport {createLogger} from 'redux-logger'\nimport {events} from './modules/event/reducers/eventReducer'\nimport {modal} from './modules/modal/modalReducer'\n\n\nconst reducer = combineReducers({\n    web3Instance,\n    tokens,\n    addresses,\n    balance,\n    events,\n    modal,\n})\n\nconst logger = createLogger({\n    // Would love to log state diffs, but apparently logger tries to call all web3 instance methods\n    // which will make metamask throw an error due to trying to call methods synchronous.\n    // There may be a workaround somewhere, but disabling state diff for now...\n    diff: false\n});\n\n// REDUX Dev Tools don't play well at all with web3 from Metamask extension...\n// const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default () => {\n    let store = createStore(\n        reducer,\n        compose(\n            applyMiddleware(\n                thunk,\n                logger,\n            )\n        )\n    )\n    return {store}\n}\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Modal} from 'semantic-ui-react'\n\nconst TestModal = (props) => {\n    const {closeModal} = props\n    return (\n        <Modal open onClose={closeModal}>\n            <Modal.Header>Select a Photo</Modal.Header>\n            <Modal.Content>\n                <Modal.Description>\n                    <Header>Default Profile Image</Header>\n                    <p>We've found the following gravatar image associated with your e-mail address.</p>\n                    <p>Is it okay to use this photo?</p>\n                </Modal.Description>\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTestModal.propTypes = {\n    closeModal: PropTypes.func.isRequired\n}\n\nTestModal.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TestModal\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {addValidationRule} from 'formsy-react'\nimport {Grid, Header, List, Modal, Segment} from 'semantic-ui-react'\nimport {Label} from 'semantic-ui-react'\nimport {Form, Input} from 'formsy-semantic-ui-react'\n\nconst TransferForm = (props) => {\n    const {\n        web3, onValidSubmit, onClose,\n        fromAddress,\n        tokenName, tokenSymbol, tokenBalance,\n        etherBalance, gasCosts } = props\n\n    const errorLabel = <Label color=\"red\" pointing/>\n\n    addValidationRule('isEthereumAddress', (values, value) => (web3.isAddress(value)))\n    addValidationRule('isLessThanOrEqual', (values, value, max) => {\n        try {\n            const bnValue = web3.utils.toBN(value)\n            const bnMax = web3.toBN(max)\n            return bnValue.lte(bnMax)\n        }\n        catch (err) {\n            // if anything goes wrong with BigNumber, just fail validation\n            return false\n        }\n    })\n\n    return (\n        <Modal open onClose={onClose} size={'small'} closeIcon>\n            <Modal.Header>Transfer '{tokenName}' Tokens</Modal.Header>\n            <Modal.Content>\n\n                <Form noValidate onValidSubmit={onValidSubmit}>\n                    <Segment>\n                        <Grid columns={2}>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account address:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>{fromAddress}</Grid.Column>\n                            </Grid.Row>\n                            <Grid.Row>\n                                <Grid.Column width={4}>\n                                    <strong>Account balance:</strong>\n                                </Grid.Column>\n                                <Grid.Column width={5}>\n                                    <List>\n                                        <List.Item>\n                                            {tokenBalance.toFixed()} {tokenSymbol}\n                                        </List.Item>\n                                        <List.Item>{etherBalance.toFixed()} ETH</List.Item>\n                                    </List>\n                                </Grid.Column>\n                            </Grid.Row>\n                        </Grid>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">To Address</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"toAddress\"\n                                   placeholder=\"Receiving ethereum address\"\n                                   required\n                                   instantValidation\n                                   validations=\"isEthereumAddress\"\n                                   validationErrors={{\n                                       isEthereumAddress: 'This is not a valid Ethereum address',\n                                       isDefaultRequiredValue: 'To Address is Required',\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n\n                        <Header size=\"small\">Amount to send</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"amount\"\n                                   placeholder=\"Enter amount\"\n                                   label={tokenSymbol}\n                                   labelPosition=\"right\"\n                                   required\n                                   instantValidation\n                                   validations={'isNumeric,isLessThanOrEqual:' + tokenBalance.toFixed()}\n                                   validationErrors={{\n                                       isNumeric: 'This is not a valid number',\n                                       isDefaultRequiredValue: 'Amount is Required',\n                                       isLessThanOrEqual: 'Maximum available balance is ' + tokenBalance.toFixed()\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n\n                    <Segment>\n                        <Header size=\"small\">Estimated Gas costs</Header>\n                        <Form.Group>\n                            <Input width={6}\n                                   name=\"gasCosts\"\n                                   label=\"ETH\"\n                                   labelPosition=\"right\"\n                                   readOnly\n                                   value={gasCosts}\n                                   validations={'isLessThanOrEqual:' + etherBalance.toFixed()}\n                                   instantValidation\n                                   validationErrors={{\n                                       isLessThanOrEqual: 'Not enough ether to cover gas costs'\n                                   }}\n                                   errorLabel={errorLabel}\n                            />\n                        </Form.Group>\n                    </Segment>\n                    <Form.Group>\n                        <Form.Button content=\"Submit\" color=\"green\"/>\n                    </Form.Group>\n\n                </Form>\n\n            </Modal.Content>\n        </Modal>\n    )\n}\n\nTransferForm.propTypes = {\n    web3: PropTypes.object.isRequired\n}\n\nTransferForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferForm\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TransferForm from './TransferForm'\nimport {connect} from 'react-redux'\nimport {transferToken} from '../../token/tokenActions'\n\nclass TransferFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.state = {\n            amount: this.props.web3.utils.toBN('0'),\n            toAddressValid: false,\n            amountValid: false,\n            rateValid: false\n        }\n    }\n\n    onValidSubmit = (formData) => alert(JSON.stringify(formData));   // eslint-disable-line\n\n    render() {\n        const {fromAddress, tokenName, tokenSymbol, tokenBalance} = this.props\n\n        // TODO: Calculate real gas costs\n        const gasCosts = this.props.web3.toBN('0.0022')\n        // TODO: Get real balance\n        const etherBalance = this.props.web3.toBN('12.3456')\n\n        return <TransferForm onValidSubmit={this.onValidSubmit}\n                             onClose={this.props.closeModal}\n                             fromAddress={fromAddress}\n                             web3={this.props.web3}\n                             tokenName={tokenName}\n                             tokenSymbol={tokenSymbol}\n                             tokenBalance={tokenBalance}\n                             gasCosts={gasCosts}\n                             etherBalance={etherBalance}\n        />\n    }\n}\n\nTransferFormContainer.propTypes = {\n    fromAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenId: PropTypes.number.isRequired,\n    tokenBalanceId: PropTypes.number.isRequired,\n    tokenBalance: PropTypes.object.isRequired,\n}\n\nTransferFormContainer.defaultProps = {\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const fromAddress = state.addresses.byId[balanceEntry.addressId].address\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n\n    return {\n        web3: state.web3Instance.web3,\n        fromAddress,\n        tokenBalance,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenId: token.id,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    transferToken: () => {\n        dispatch(transferToken())\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferFormContainer)\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport TestModal from './TestModal'\nimport {hideModal} from './modalActions'\nimport TransferFormContainer from '../forms/transferForm/TransferFormContainer'\n\nexport const MODAL_COMPONENTS = {\n    'TEST_MODAL': TestModal,\n    'TRANSFER_FORM_CONTAINER': TransferFormContainer\n    /* other modals */\n}\n\nclass ModalRoot extends Component {\n    render() {\n        const {modalType, modalProps, closeModal} = this.props\n\n        if (!modalType){\n            // currently no modal needs to be shown\n            return null\n        }\n\n        const SpecificModal = MODAL_COMPONENTS[modalType]\n        return <SpecificModal closeModal={closeModal} {...modalProps} />\n    }\n}\n\nconst mapStateToProps = state => (\n    state.modal\n)\n\nconst mapDispatchToProps = (dispatch) => ({\n    closeModal: () => {\n        dispatch(hideModal())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header} from \"semantic-ui-react\"\n\nconst ScreenHeader = (props) => {\n    const {title} = props\n    /*\n     custom style \"marginTop: 0\" required to prevent header sticking just a little bit outside of its grid row.\n     Not sure if this is an error on my side, a bug of react-semantic-ui or semantic-ui itself, or intended behaviour...\n     */\n    return (\n        <Header as={'h1'} block inverted color={'green'} textAlign={'center'}\n                style={{\n                    marginTop: 0,\n                }}>\n            {title}\n        </Header>\n    )\n}\n\nScreenHeader.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    title: PropTypes.string.isRequired\n}\n\nScreenHeader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ScreenHeader\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\nimport BN from 'bn.js'\n\n// TODO: Refactor to make rounding/string-formating reusable\nconst Balance = (props) => {\n    const {amount, numDecimals} = props\n    const roundToDecimals = new BN(3)\n    const divisor = new BN(10).pow(numDecimals)\n\n    // popup content should contain exact value\n    const whole = amount.div(divisor)\n    const fraction = amount.mod(divisor).abs()\n    const content = whole.toString() + '.' + fraction.toString()\n\n    // popup trigger should contain human-readable, rounded value\n    let roundedWhole = whole\n    let roundedFraction = fraction\n    if (numDecimals.gt(roundToDecimals)) {\n        let roundingPow = numDecimals.sub(roundToDecimals)\n        if (roundingPow.lt(roundToDecimals)) {\n            roundingPow = roundToDecimals\n        }\n        const roundingDivisor = new BN(10).pow(roundingPow)\n        const remainingDivisor = new BN(10).pow(roundToDecimals)\n        const roundedAmount = amount.divRound(roundingDivisor)\n        roundedWhole = roundedAmount.div(remainingDivisor)\n        roundedFraction = roundedAmount.mod(remainingDivisor).abs()\n    }\n    const trigger = <span>{roundedWhole.toString() + '.' + roundedFraction.toString()}</span>\n\n    return (\n        <Popup\n            trigger={trigger}\n            content={content}\n        />\n    )\n}\n\nBalance.propTypes = {\n    amount: PropTypes.object.isRequired, // BN instance\n    numDecimals: PropTypes.object.isRequired, // BN instance\n}\n\nexport default Balance\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst AddressDisplay = (props) => {\n    const {address, ensName} = props\n    if (ensName) {\n        return <div>\n            <div><strong>{ensName}</strong></div>\n            <div><small>{address}</small></div>\n        </div>\n    } else {\n        return <div><strong>{address}</strong></div>\n    }\n}\n\nAddressDisplay.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string\n}\n\n\nexport default AddressDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from '../address/addressActions'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst TokenBalanceItemDetail = (props) => {\n    const {address, ensName, amount, decimals, loading, reloadBalance, url/*, addressType, openTransferModal*/} = props\n    /*const external = (addressType !== ADDRESS_TYPE_OWNED)*/\n\n    /*\n        transfer button removed until functionality gets implemented...\n\n                <Button icon='external share'\n                    size='mini'\n                    circular\n                    onClick={openTransferModal}\n                    disabled={external}\n                />\n     */\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                <Link to={url}><AddressDisplay address={address} ensName={ensName}/></Link>\n            </Table.Cell>\n            <Table.Cell><Balance amount={amount} numDecimals={decimals}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nTokenBalanceItemDetail.propTypes = {\n    address: PropTypes.string.isRequired,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    ensName: PropTypes.string,\n    amount: PropTypes.object.isRequired,\n    decimals: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    url: PropTypes.string.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nTokenBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport TokenBalanceItemDetail from './TokenBalanceItemDetail'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport {showModal} from '../modal/modalActions'\n\nclass TokenBalanceItemDetailContainer extends Component {\n    render() {\n        return (\n            <TokenBalanceItemDetail address={this.props.address}\n                                    addressType={this.props.addressType}\n                                    amount={this.props.amount}\n                                    decimals={this.props.decimals}\n                                    reloadBalance={this.props.reloadBalance}\n                                    loading={this.props.loading}\n                                    url={this.props.url}\n                                    openTransferModal={this.props.openTransferModal}\n                                    ensName={this.props.ensName}\n            />\n        )\n    }\n}\n\nTokenBalanceItemDetailContainer.propTypes = {\n    address: PropTypes.string.isRequired,\n    amount: PropTypes.object.isRequired,\n    decimals: PropTypes.object.isRequired,\n    tokenBalanceId: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    openTransferModal: PropTypes.func.isRequired,\n}\n\nTokenBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    const addressEntry = state.addresses.byId[balanceEntry.addressId]\n    const amount = balanceEntry.balance\n    const decimals = token.decimals\n    return {\n        amount,\n        decimals,\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n        url: \"/events/\" + token.id + \"/\" + addressEntry.address\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    },\n    openTransferModal: () => {\n        dispatch(showModal('TRANSFER_FORM_CONTAINER',\n            {\n                tokenBalanceId: ownProps.tokenBalanceId,\n            }\n        ))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenBalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport BalanceItemDetailContainer from './TokenBalanceItemDetailContainer'\nimport {Link} from 'react-router-dom'\nimport Balance from './Balance'\n\nconst TokenBalanceItem = (props) => {\n    const {expanded, tokenName, tokenSymbol, tokenBalances, total, tokenDecimals, reloadBalance, loading, tokenEventsLinkOptions, toggleCollapse} = props\n    let eventLink = <Link to={tokenEventsLinkOptions}>{tokenName} ({tokenSymbol})</Link>\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}>{eventLink}</Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value><Balance amount={total} numDecimals={tokenDecimals}/></Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody = null\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <BalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nTokenBalanceItem.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    tokenDecimals: PropTypes.object.isRequired,\n    total: PropTypes.object.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    tokenEventsLinkOptions: PropTypes.object.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nTokenBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport BN from 'bn.js'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport TokenBalanceItem from './TokenBalanceItem'\nimport _ from 'lodash'\n\n\nclass TokenBalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        return (\n            <TokenBalanceItem tokenName={this.props.token.name}\n                              tokenSymbol={this.props.token.symbol}\n                              tokenBalances={this.props.tokenBalances}\n                              tokenDecimals={this.props.token.decimals}\n                              total={this.props.total}\n                              reloadBalance={this.reloadBalance}\n                              loading={this.props.loading}\n                              tokenEventsLinkOptions={this.props.tokenEventsLinkOptions}\n                              expanded={this.state.expanded}\n                              toggleCollapse={this.toggleCollapse}\n            />\n        )\n    }\n}\n\nTokenBalanceItemContainer.propTypes = {\n}\n\nTokenBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n\n    // calculate total balance of all addresses\n    let total = _.reduce(ownProps.tokenBalances, (sum, tokenBalance) => {\n        return sum.add(tokenBalance.balance)\n    }, new BN(0) )\n\n    // if any of the tokenBalances is loading, the whole container is loading\n    let loading = false\n    ownProps.tokenBalances.forEach(tokenBalance => {\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n    })\n\n    const tokenEventsLinkOptions = {\n        pathname: '/events/' + ownProps.tokenId,\n    }\n\n    return {\n        token,\n        total,\n        loading,\n        tokenEventsLinkOptions,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenBalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TokenBalanceItemContainer from './TokenBalanceItemContainer'\n\nconst TokenBalancesList = (props) => {\n    const {balancesByToken} = props\n    return (\n        <div>\n            {balancesByToken.map(entry =>\n                <TokenBalanceItemContainer key={entry[0]} tokenId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nTokenBalancesList.propTypes = {\n    balancesByToken: PropTypes.array.isRequired\n}\n\nTokenBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenBalancesList\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table, Button} from 'semantic-ui-react'\nimport Balance from './Balance'\n\nconst AddressBalanceItemDetail = (props) => {\n    const {tokenName, tokenSymbol, tokenAmount, tokenDecimals, loading, reloadBalance} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell>\n            </Table.Cell>\n            <Table.Cell>\n                {tokenName} ({tokenSymbol})\n            </Table.Cell>\n            <Table.Cell><Balance amount={tokenAmount} numDecimals={tokenDecimals}/></Table.Cell>\n            <Table.Cell>\n                <Button size='mini'\n                        circular\n                        icon='refresh'\n                        loading={loading}\n                        onClick={reloadBalance} />\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressBalanceItemDetail.propTypes = {\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    tokenAmount: PropTypes.object.isRequired,\n    tokenDecimals: PropTypes.object.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nAddressBalanceItemDetail.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalanceItemDetail\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport AddressBalanceItemDetail from './AddressBalanceItemDetail'\n\nclass AddressBalanceItemDetailContainer extends Component {\n    render() {\n        const {tokenAmount, tokenDecimals, tokenName, tokenSymbol, reloadBalance, loading} = this.props\n        return (\n            <AddressBalanceItemDetail tokenAmount={tokenAmount}\n                                      tokenDecimals={tokenDecimals}\n                                      tokenSymbol={tokenSymbol}\n                                      tokenName={tokenName}\n                                      reloadBalance={reloadBalance}\n                                      loading={loading}\n            />\n        )\n    }\n}\n\nAddressBalanceItemDetailContainer.propTypes = {\n    tokenBalanceId: PropTypes.string.isRequired,\n    tokenAmount: PropTypes.object.isRequired,\n    tokenDecimals: PropTypes.object.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n}\n\nAddressBalanceItemDetailContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const balanceEntry = state.balance.byId[ownProps.tokenBalanceId]\n    const token = state.tokens.byId[balanceEntry.tokenId]\n    // const tokenBalance = balanceEntry.balance.dividedBy(token.decimals)\n    const tokenAmount = balanceEntry.balance\n    return {\n        tokenAmount,\n        tokenDecimals: token.decimals,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        loading: balanceEntry.balanceState===BALANCE_STATES.LOADING,\n    }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => ({\n    reloadBalance: () => {\n        dispatch(reloadBalance(ownProps.tokenBalanceId))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressBalanceItemDetailContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Statistic, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\nimport AddressBalanceItemDetailContainer from './AddressBalanceItemDetailContainer'\n\nconst AddressBalanceItem = (props) => {\n    const {expanded, address, ensName, tokenBalances, numTokens, reloadBalance, loading, toggleCollapse} = props\n\n    const icon = expanded ? 'chevron up' : 'chevron down'\n\n    const tableHeader = (\n        <Table.Header>\n            <Table.Row>\n                <Table.HeaderCell width={1}>\n                    <Button onClick={toggleCollapse}\n                            circular\n                            icon={icon}\n                            size={'large'}\n                    />\n                </Table.HeaderCell>\n                <Table.HeaderCell width={8}><AddressDisplay address={address} ensName={ensName}/></Table.HeaderCell>\n                <Table.HeaderCell width={5}>\n                    <Statistic size='mini'>\n                        <Statistic.Value>{numTokens} token</Statistic.Value>\n                    </Statistic>\n                </Table.HeaderCell>\n                <Table.HeaderCell width={2}>\n                    <Button circular\n                            icon='refresh'\n                            onClick={reloadBalance}\n                            loading={loading}/>\n                </Table.HeaderCell>\n            </Table.Row>\n        </Table.Header>\n    )\n\n    let tableBody = null\n    if (expanded) {\n        tableBody = (\n            <Table.Body>\n                {tokenBalances.map(tokenBalance =>\n                    <AddressBalanceItemDetailContainer key={tokenBalance.balanceId}\n                                                tokenBalanceId={tokenBalance.balanceId}\n                    />\n                )}\n            </Table.Body>\n        )\n    }\n\n    return <Table compact>\n        {tableHeader}\n        {tableBody}\n    </Table>\n}\n\nAddressBalanceItem.propTypes = {\n    ensName: PropTypes.string,\n    address: PropTypes.string.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n    numTokens: PropTypes.number.isRequired,\n    reloadBalance: PropTypes.func.isRequired,\n    toggleCollapse: PropTypes.func.isRequired,\n    loading: PropTypes.bool.isRequired,\n    expanded: PropTypes.bool.isRequired,\n}\n\nAddressBalanceItem.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalanceItem\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport PropTypes from 'prop-types'\nimport {BALANCE_STATES, reloadBalance} from './balanceActions'\nimport AddressBalanceItem from './AddressBalanceItem'\n\n\nclass AddressBalanceItemContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.reloadBalance = this.reloadBalance.bind(this)\n        this.toggleCollapse = this.toggleCollapse.bind(this)\n        this.state = {\n            expanded: false\n        }\n    }\n\n    reloadBalance() {\n        this.props.tokenBalances.forEach(tokenBalance => {\n            this.props.reloadBalance(tokenBalance.balanceId)\n        })\n    }\n\n    toggleCollapse() {\n        this.setState({ expanded: !this.state.expanded })\n    }\n\n    render() {\n        const {addressId, ensName, numTokens, tokenBalances, loading} = this.props\n        const {expanded} = this.state\n\n        return (\n            <AddressBalanceItem address={addressId}\n                                ensName={ensName}\n                                numTokens={numTokens}\n                                tokenBalances={tokenBalances}\n                                loading={loading}\n                                expanded={expanded}\n                                toggleCollapse={this.toggleCollapse}\n                                reloadBalance={this.reloadBalance}\n            />\n        )\n    }\n}\n\nAddressBalanceItemContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    ensName: PropTypes.string.isRequired,\n    numTokens: PropTypes.number.isRequired,\n    tokenBalances: PropTypes.array.isRequired,\n}\n\nAddressBalanceItemContainer.defaultProps = {\n   //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {addressId, tokenBalances} = ownProps\n    const address = state.addresses.byId[addressId]\n\n    let loading = false\n    let numTokens = 0\n    tokenBalances.forEach(tokenBalance => {\n        // if any of the tokenBalances is loading, the whole container is loading\n        if (tokenBalance.balanceState === BALANCE_STATES.LOADING)\n            loading = true\n        // count entries with balance > 0\n        if (tokenBalance.balance.gtn(0))\n            numTokens++\n    })\n\n    return {\n        address: addressId,\n        ensName: address.ensName,\n        numTokens,\n        loading,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    reloadBalance: (balanceId) => {\n        dispatch(reloadBalance(balanceId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressBalanceItemContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport AddressBalanceItemContainer from './AddressBalanceItemContainer'\n\nconst AddressBalancesList = (props) => {\n    const {balancesByAddress} = props\n    return (\n        <div>\n            {balancesByAddress.map(entry =>\n                <AddressBalanceItemContainer key={entry[0]} addressId={entry[0]} tokenBalances={entry[1]}/>\n            )}\n        </div>\n    )\n}\n\nAddressBalancesList.propTypes = {\n    balancesByAddress: PropTypes.array.isRequired\n}\n\nAddressBalancesList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressBalancesList\n","\nimport PropTypes from \"prop-types\"\nimport {connect} from \"react-redux\"\nimport React, {Component} from \"react\"\nimport {default as _} from 'lodash'\nimport TokenBalancesList from \"../balance/TokenBalancesList\"\nimport {Message} from \"semantic-ui-react\"\nimport {Link} from \"react-router-dom\"\nimport AddressBalancesList from '../balance/AddressBalancesList'\n\nclass OverviewBodyContainer extends Component {\n    render() {\n        const {groupedBalances, showEmpty, hasAccounts, groupBy} = this.props\n\n        // Do i have accounts at all?\n        if (!hasAccounts) {\n            return <Message>\n                <Message.Header>\n                    No accounts\n                </Message.Header>\n                <p>You have no watched or unlocked accounts. Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to setup accounts.</p>\n            </Message>\n        }\n\n        // Do i have any balances to display?\n        else if (Object.keys(groupedBalances).length === 0) {\n            return <Message>\n                <Message.Header>\n                    No balances\n                </Message.Header>\n                <Message.Content>\n                    There are no token balances to display. Things you can try:\n                </Message.Content>\n                <Message.List>\n                    <Message.Item>Change the filterstring</Message.Item>\n                    {!showEmpty && <Message.Item>Enable \"Show zero balances\" above</Message.Item>}\n                    <Message.Item>Open the <Link to={ {pathname: '/accounts/',} }>Account Manager</Link> to add additional accounts</Message.Item>\n                    <Message.Item>Open the <Link to={ {pathname: '/tokenContracts/'} }>Token Manager</Link> to tracked additional tokens</Message.Item>\n                </Message.List>\n            </Message>\n        }\n\n        switch (groupBy) {\n            case 'tokenId':\n                return <TokenBalancesList balancesByToken={groupedBalances}/>\n            case 'addressId':\n                return <AddressBalancesList balancesByAddress={groupedBalances}/>\n            default:\n                return \"Unhandled groupBy!\"\n        }\n    }\n}\n\nOverviewBodyContainer.propTypes = {\n    groupedBalances: PropTypes.array.isRequired,\n    showEmpty: PropTypes.bool.isRequired,\n    hasAccounts: PropTypes.bool.isRequired,\n    groupBy: PropTypes.string.isRequired,\n}\n\nOverviewBodyContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {showEmpty, groupBy} = ownProps\n    const hasAccounts = (state.addresses.allIds.length > 0)\n    const filterIsActive = (state.balance.listState.filter.length > 0)\n\n    // get balanceIds to display\n    const balanceIds = filterIsActive ? state.balance.listState.matchedBalanceIds : state.balance.allIds\n\n    // map IDs to Entries\n    let balanceEntries = balanceIds.map(id => state.balance.byId[id])\n\n    // remove empty balances if necessary\n    if (!showEmpty) {\n        balanceEntries = balanceEntries.filter(entry => (entry.balance.gtn(0)))\n    }\n\n    // now group the balances by token or address\n    const groupedBalancesObject = _.groupBy(balanceEntries, groupBy)\n\n    // convert to array and sort it\n    let groupedBalances\n    if (groupBy === 'tokenId') {\n        groupedBalances = Object.entries(groupedBalancesObject).sort((a, b) => {\n            // entry[0] contains the tokenID. Look up the tokenName for comparison\n            return (state.tokens.byId[a[0]].name.toUpperCase() < state.tokens.byId[b[0]].name.toUpperCase() ? -1 : 1)\n        })\n    } else if (groupBy === 'addressId') {\n        // Sort addresses by ENS\n        groupedBalances = Object.entries(groupedBalancesObject).sort((a,b) => {\n            // entry[0] contains the addressID. Look up the address for comparison\n            const addressA = state.addresses.byId[a[0]]\n            const addressB = state.addresses.byId[b[0]]\n            const stringA = addressA.ensName ? addressA.ensName : addressA.address\n            const stringB = addressB.ensName ? addressB.ensName : addressB.address\n            return (stringA.toUpperCase() < stringB.toUpperCase() ? -1 : 1 )\n        })\n    }\n    return {\n        hasAccounts,\n        groupedBalances,\n    }\n}\n\nexport default connect(mapStateToProps)(OverviewBodyContainer)","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Input, Icon} from 'semantic-ui-react'\n\nconst TokenListFilter = (props) => {\n    const {filterString, handleChange, filterIsActive, clearFilter} = props\n    let icon = null\n    if (filterIsActive) {\n        icon = <Icon name='eraser' circular link onClick={clearFilter} />\n    }\n    return (\n        <Input label='Filter'\n               name='filter'\n               placeholder='Enter name, symbol or contract address'\n               onChange={handleChange}\n               value={filterString}\n               icon={icon}\n               fluid\n        />\n    )\n}\n\nTokenListFilter.propTypes = {\n    filterString: PropTypes.string.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    displayed: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n}\n\nTokenListFilter.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TokenListFilter\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {setFilterProps} from './tokenActions'\nimport TokenListFilter from './TokenListFilter'\nimport {setBalanceFilterString} from '../balance/balanceActions'\n\nclass TokenListFilterContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, {name, value}) {\n        this.props.setFilterString(value)\n    }\n\n    render() {\n        return <TokenListFilter filterString={this.props.filterString}\n                                handleChange={this.handleChange}\n                                filterIsActive={this.props.filterIsActive}\n                                displayed={this.props.displayed}\n                                total={this.props.total}\n                                clearFilter={this.props.clearFilter}/>\n    }\n}\n\nTokenListFilterContainer.propTypes = {\n    target: PropTypes.string.isRequired,\n    total: PropTypes.number.isRequired,\n    displayed: PropTypes.number.isRequired,\n    clearFilter: PropTypes.func.isRequired,\n    filterIsActive: PropTypes.bool.isRequired,\n    filterString: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            total: state.tokens.allIds.length,\n            displayed: state.tokens.listState.matchedTokenIds.length,\n            filterIsActive: state.tokens.listState.filterIsActive,\n            filterString: state.tokens.listState.filter,\n            showOnlyTracked: state.tokens.listState.showOnlyTracked,\n        }\n    }\n    if (target === 'balancelist') {\n        return {\n            total: state.balance.allIds.length,\n            displayed: state.balance.listState.matchedBalanceIds.length,\n            filterIsActive: state.balance.listState.filter.length > 0,\n            filterString: state.balance.listState.filter,\n        }\n    }\n\n    return {}\n}\n\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n    const {target} = ownProps\n\n    if (target === 'tokenlist') {\n        return {\n            clearFilter: () => {\n                dispatch(setFilterProps({filterString: ''}))\n            },\n            setFilterString: (filter) => {\n                dispatch(setFilterProps({filterString: filter}))\n            }\n        }\n    }\n\n    if (target === 'balancelist') {\n        return {\n            clearFilter: () => {\n                dispatch(setBalanceFilterString(''))\n            },\n            setFilterString: (filter) => {\n                dispatch(setBalanceFilterString(filter))\n            }\n        }\n    }\n}\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenListFilterContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Checkbox, Dropdown, Grid} from 'semantic-ui-react'\nimport TokenListFilterContainer from \"../token/TokenListFilterContainer\"\n\nfunction OverviewOptions(props) {\n    const {showEmpty, toggleShowEmpty, groupBy, setGroupBy} = props\n    const groupOptions = [\n        {\n            key: 'tokenId',\n            text: 'token',\n            value: 'tokenId',\n        },\n        {\n            key: 'addressId',\n            text: 'account',\n            value: 'addressId',\n        },\n    ]\n\n    return (\n        <Grid verticalAlign='middle' columns={2} divided>\n            <Grid.Row>\n                <Grid.Column width={3}>\n                    Group by{' '}\n                    <Dropdown\n                        inline\n                        options={groupOptions}\n                        value={groupBy}\n                        onChange={setGroupBy}\n                    />\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Checkbox toggle label='Show null balances' checked={showEmpty} onChange={toggleShowEmpty}/>\n                </Grid.Column>\n                <Grid.Column width={9}>\n                    <TokenListFilterContainer target={'balancelist'}/>\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nOverviewOptions.propTypes = {\n    showEmpty: PropTypes.bool.isRequired,\n    toggleShowEmpty: PropTypes.func.isRequired,\n    groupBy: PropTypes.string.isRequired,\n    setGroupBy: PropTypes.func.isRequired,\n}\n\nOverviewOptions.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default OverviewOptions\n","import React, {Component} from 'react'\nimport ScreenHeader from '../layout/ScreenHeader'\nimport OverviewBodyContainer from './OverviewBodyContainer'\nimport OverviewOptions from './OverviewOptions'\nimport {Divider} from 'semantic-ui-react'\n\nclass OverviewContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            showEmpty: true,\n            groupBy: 'tokenId',\n        }\n    }\n\n    toggleShowEmpty = () => {\n        this.setState({showEmpty: !this.state.showEmpty})\n    }\n\n    setGroupBy = (e, { value}) => {\n        this.setState({groupBy: value})\n    }\n\n    render() {\n        const {showEmpty, groupBy} = this.state\n\n        return (\n            <React.Fragment>\n                <ScreenHeader title={'Overview'}/>\n                <OverviewOptions toggleShowEmpty={this.toggleShowEmpty}\n                                 showEmpty={showEmpty}\n                                 setGroupBy={this.setGroupBy}\n                                 groupBy={groupBy}\n                />\n                <Divider/>\n                <OverviewBodyContainer showEmpty={showEmpty} groupBy={groupBy}/>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default OverviewContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Web3Info = (props) => {\n    const {name, id, nodeVersion, block, web3Version} = props\n    const gitHub = 'https://github.com/TripleSpeeder/TokenStation'\n    const contact = 'michael@m-bauer.org'\n    const srcUrl = 'https://github.com/ethereum-lists/tokens'\n    return (\n        <React.Fragment>\n            <p>\n                Network: {name} ({id}) | Block: {block ? block.number : '?'} | Node version: {nodeVersion} | Web3 version: {web3Version}\n            </p>\n            <p>\n                ERC20 contract data origin: <strong><a href={srcUrl} target='_blank' rel='noopener noreferrer'>{srcUrl}</a></strong>\n            </p>\n            <p>\n                GitHub: <strong><a target='_blank' rel='noopener noreferrer' href={gitHub}>{gitHub}</a></strong> | contact: <strong><a href={'mailto:' + contact}>{contact}</a></strong>\n            </p>\n        </React.Fragment>\n    )\n\n}\n\nWeb3Info.propTypes = {\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.shape({\n            number: PropTypes.number,\n            timestamp: PropTypes.number\n        }),\n    web3Version: PropTypes.string,\n    nodeVersion: PropTypes.string,\n}\n\nexport default Web3Info\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport Web3Info from \"./web3Info\"\nimport {Segment} from 'semantic-ui-react'\n\nclass Web3Container extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.filter = null\n    }\n\n    render() {\n        return <Segment textAlign='center'>\n            <Web3Info web3Version={this.props.web3.version}\n                         name={this.props.name}\n                         block={this.props.block}\n                         id={this.props.id}\n                         nodeVersion={this.props.nodeVersion}\n            />\n        </Segment>\n    }\n}\n\nWeb3Container.propTypes = {\n    web3: PropTypes.object,\n    name: PropTypes.string,\n    id: PropTypes.number,\n    block: PropTypes.object,\n    nodeVersion: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n    web3: state.web3Instance.web3,\n    name: state.web3Instance.name,\n    id: state.web3Instance.id,\n    block: state.web3Instance.block,\n    nodeVersion: state.web3Instance.nodeVersion\n})\n\nexport default connect(mapStateToProps)(Web3Container)\n","import React from 'react'\nimport {Icon, Menu} from 'semantic-ui-react'\nimport {NavLink} from 'react-router-dom'\n\n\nconst Sidebar = () => {\n    return (\n        <Menu icon='labeled' fluid inverted vertical pointing size={'large'}>\n            <Menu.Item header>TokenStation.io</Menu.Item>\n            <Menu.Item as={NavLink} to='/overview' name='overview'>\n                <Icon name='home' />\n                Overview\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/accounts' name='accounts'>\n                <Icon name='users' />\n                Manage Accounts\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/events' name='events' >\n                <Icon name='exchange' />\n                View Transfer Events\n            </Menu.Item>\n\n            <Menu.Item as={NavLink} to='/tokenContracts' name='tokenContracts'>\n                <Icon name='cube' />\n                Manage Contracts\n            </Menu.Item>\n        </Menu>\n    )\n}\n\nexport default Sidebar\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED} from './addressActions'\nimport {Button, Icon, Popup, Table} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst AddressRow = (props) => {\n\n    const {address, addressType, ensName, handleRemove} = props\n\n    let iconName, popupContent, removeButton\n    if (addressType === ADDRESS_TYPE_OWNED) {\n        iconName = 'unlock'\n        popupContent = 'This is one of your addresses'\n        removeButton = null\n    } else {\n        iconName = 'eye'\n        popupContent = 'This is a watch-only address'\n        removeButton = <Button size='tiny' onClick={handleRemove} icon='delete'/>\n    }\n\n    const icon = <Popup trigger={<Icon size='large' name={iconName}/>}\n                        content={popupContent}\n    />\n\n    /*\n    let listProgress = null\n    if (this.props.progressCurrent < this.props.progressTotal) {\n        listProgress = <List.Description>\n            <Progress size='small'\n                      value={this.props.progressCurrent}\n                      total={this.props.progressTotal}\n                      progress='ratio'\n                      precision={1}\n            />\n        </List.Description>\n    }*/\n    return (\n        <Table.Row>\n            <Table.Cell textAlign={'left'} collapsing>\n                {icon}\n            </Table.Cell>\n            <Table.Cell textAlign={'left'}>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n            <Table.Cell textAlign={'right'} collapsing>\n                {removeButton}\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nAddressRow.propTypes = {\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    addressType: PropTypes.oneOf([ADDRESS_TYPE_OWNED, ADDRESS_TYPE_EXTERNAL]).isRequired,\n    handleRemove: PropTypes.func.isRequired\n}\n\nAddressRow.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default AddressRow\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {removeAddressThunk} from './addressActions'\nimport {BALANCE_STATES} from '../balance/balanceActions'\nimport AddressRow from './AddressRow'\n\n\nclass AddressContainer extends PureComponent {\n\n    handleRemove = () => {\n        this.props.removeAddress(this.props.addressId)\n    }\n\n    render() {\n        return <AddressRow address={this.props.address}\n                           addressType={this.props.addressType}\n                           ensName={this.props.ensName}\n                           handleRemove={this.handleRemove}\n        />\n    }\n}\n\nAddressContainer.propTypes = {\n    addressId: PropTypes.string.isRequired,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    removeAddress: PropTypes.func.isRequired,\n    progressTotal: PropTypes.number.isRequired,\n    progressCurrent: PropTypes.number.isRequired\n}\n\nAddressContainer.defaultProps = {}\n\nconst mapStateToProps = (state, ownProps) => {\n    const addressEntry = state.addresses.byId[ownProps.addressId]\n    const progressTotal = state.tokens.listState.total\n    // count all balance entries that include addressId\n    const matchedBalanceEntries = Object.values(state.balance.byId).filter(entry => {\n        return ((entry.addressId === ownProps.addressId) &&\n            (entry.balanceState === BALANCE_STATES.INITIALIZED))\n    })\n    const progressCurrent = matchedBalanceEntries.length\n\n    return {\n        address: addressEntry.address,\n        addressType: addressEntry.type,\n        ensName: addressEntry.ensName,\n        balancesState: addressEntry.balancesState,\n        progressTotal,\n        progressCurrent\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    removeAddress: (addressId) => {\n        dispatch(removeAddressThunk(addressId))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Form} from \"semantic-ui-react\"\n\nconst QueryAddressForm = (props) => {\n\n    const {handleChange, handleSubmit, loading, disabled, error, address, ensName, value} = props\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group inline>\n                <Form.Input width={10}\n                            name='address'\n                            placeholder='Address or ENS Name'\n                            error={error}\n                            loading={loading}\n                            onChange={handleChange}\n                            value={value}\n                            label={'Add account'}\n                />\n                <Form.Button\n                    content='Submit'\n                    disabled={disabled}\n                    width={6}\n                />\n            </Form.Group>\n        </Form>\n    )\n}\n\nQueryAddressForm.propTypes = {\n    address: PropTypes.string,\n    ensName: PropTypes.string,\n    value: PropTypes.string.isRequired,\n    loading: PropTypes.bool.isRequired,\n    disabled: PropTypes.bool.isRequired,\n    error: PropTypes.bool.isRequired,\n    handleChange: PropTypes.func.isRequired,\n    handleSubmit: PropTypes.func.isRequired,\n}\n\nQueryAddressForm.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default QueryAddressForm\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {addNewAddress, ADDRESS_TYPE_EXTERNAL} from './addressActions'\nimport QueryAddressForm from './QueryAddressForm'\n\nexport const addressStates = {\n    ADDRESS_RESOLVING: 'address_resolving', // valid ENS name entered, waiting for resolving\n    ADDRESS_VALID: 'address_valid', // got a valid address\n    ADDRESS_INVALID: 'address_invalid',\n}\n\nexport class QueryAddressFormContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n\n        this.state = {\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        }\n        // kraken4='0x267be1C1D684F78cb4F6a176C4911b741E4Ffdc0'\n    }\n\n    handleChange = async (e) => {\n        const input=e.target.value\n        let addressState = addressStates.ADDRESS_INVALID\n        let address = ''\n        let ensName = ''\n        // check for valid input (raw address and ENS name)\n        const validAddress = (/^(0x)?[0-9a-f]{40}$/i.test(input))\n        const validENSName = (/.*\\.eth$/i.test(input))\n        if (validENSName) {\n            // start resolving process\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_RESOLVING,\n                    address: '',\n                    ensName: input,\n                    input,\n                }\n            )\n            try {\n                const resolvedAddress = await this.props.ens.getAddress(input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_VALID,\n                        address: resolvedAddress,\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            } catch (e) {\n                console.log(\"Could not resolve \" + input)\n                this.setState(\n                    {\n                        addressState: addressStates.ADDRESS_INVALID,\n                        address: '',\n                        ensName: input,\n                        input: input,\n                    }\n                )\n            }\n        }\n        else if(validAddress) {\n            // TODO: Lookup reverse ENS entry\n            addressState = addressStates.ADDRESS_VALID\n            ensName = ''\n            address = input\n            this.setState(\n                {\n                    addressState,\n                    address,\n                    ensName,\n                    input,\n                }\n            )\n        }\n        else {\n            this.setState(\n                {\n                    addressState: addressStates.ADDRESS_INVALID,\n                    address: '',\n                    ensName: '',\n                    input,\n                }\n            )\n        }\n    }\n\n    handleSubmit = () => {\n        const { address, ensName } = this.state\n        this.props.addNewAddress(address, ensName, ADDRESS_TYPE_EXTERNAL)\n        this.setState({\n            addressState: addressStates.ADDRESS_INVALID,\n            address: '',\n            ensName: '',\n            input: '',\n        })\n    }\n\n    render() {\n        const error = (this.state.addressState === addressStates.ADDRESS_INVALID)\n        const loading = (this.state.addressState === addressStates.ADDRESS_RESOLVING)\n        const disabled = (error || loading)\n        return (\n            <QueryAddressForm handleChange={this.handleChange}\n                              handleSubmit={this.handleSubmit}\n                              error = {error}\n                              loading={loading}\n                              disabled={disabled}\n                              address={this.state.address}\n                              ensName={this.state.ensName}\n                              value={this.state.input}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    const ens = state.web3Instance.web3.eth.ens\n    return {\n        ens\n    }\n}\n\nlet mapDispatchToProps = dispatch => ({\n    addNewAddress: (address, ensName, type) => {\n        dispatch(addNewAddress(address, ensName, type))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(QueryAddressFormContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Divider, Header, Message, Segment, Table} from 'semantic-ui-react'\nimport AddressContainer from './AddressContainer'\nimport QueryAddressFormContainer from \"./QueryAddressFormContainer\"\nimport {ETH_ENABLE_STATES} from '../web3/web3Actions'\n\nconst AddressList = (props) => {\n    let ownTable, watchTable\n    const {ethEnableState, ethEnable} = props\n    let waitingGrant = (ethEnableState === ETH_ENABLE_STATES.WAITING)\n\n    if (props.ownAddressIds.length) {\n        ownTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.ownAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else if (ethEnableState === ETH_ENABLE_STATES.GRANTED) {\n        // Access granted, but no accounts? Must be either Mist with no accounts shared or locked Metamask.\n        ownTable = <Message>\n            <Message.Header>\n                No personal accounts\n            </Message.Header>\n            <p>You need to share your accounts so they are visible here. Log in to Metamask or share accounts in Mist .</p>\n        </Message>\n    } else {\n        // No accounts and no access. Ask for it.\n        ownTable = <Message>\n            <Message.Header>\n                No access to personal accounts\n            </Message.Header>\n            <p>You can grant access to your personal accounts. This will automatically put the accounts to the watch\n                list.</p>\n            <p><Button primary disabled={waitingGrant} loading={waitingGrant} onClick={ethEnable}>Grant access</Button></p>\n        </Message>\n    }\n\n    if (props.watchAddressIds.length) {\n        watchTable = <Table basic='very' selectable>\n            <Table.Body>\n                {props.watchAddressIds.map((addressId) =>\n                    <AddressContainer key={addressId} addressId={addressId}/>\n                )}\n            </Table.Body>\n        </Table>\n    } else {\n        watchTable = <Message>\n            <Message.Header>\n                No watched accounts\n            </Message.Header>\n            <p>You don't have any watched accounts.</p>\n        </Message>\n    }\n\n    return (\n        <React.Fragment>\n            <Segment>\n                <Header dividing as='h2'>Personal Accounts</Header>\n                {ownTable}\n            </Segment>\n            <Segment>\n                <Header dividing as='h2'>Watched Accounts</Header>\n                {watchTable}\n                <Divider/>\n                <QueryAddressFormContainer />\n            </Segment>\n        </React.Fragment>\n    )\n}\n\nAddressList.propTypes = {\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n    ethEnableState: PropTypes.oneOf(Object.values(ETH_ENABLE_STATES)),\n    ethEnable: PropTypes.func.isRequired,\n}\n\nexport default AddressList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {ADDRESS_TYPE_EXTERNAL, ADDRESS_TYPE_OWNED, changeOwnAddresses} from './addressActions'\nimport AddressList from './AddressList'\nimport {ETH_ENABLE_STATES, requestEthEnable} from '../web3/web3Actions'\n\nclass AddressListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.requestEthEnable = this.requestEthEnable.bind(this)\n    }\n\n    render() {\n        const ethEnableState = this.props.web3Instance ? this.props.web3Instance.ethEnableState : ETH_ENABLE_STATES.REJECTED\n        return <AddressList watchAddressIds={this.props.watchAddressIds}\n                            ownAddressIds={this.props.ownAddressIds}\n                            ethEnableState={ethEnableState}\n                            ethEnable={this.requestEthEnable}\n        />\n    }\n\n    componentDidMount() {\n        if (window.ethereum) {\n            window.ethereum.on('accountsChanged', this.props.changeOwnAddresses)\n        }\n        if (this.props.web3) {\n            this.props.web3.eth.getAccounts((error, accounts) => {\n                if (accounts) {\n                    this.props.changeOwnAddresses(accounts)\n                }\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        // Unsubscribe from accountsChanged event\n        window.ethereum.removeListener('accountsChanged', this.props.changeOwnAddresses);\n    }\n\n    requestEthEnable() {\n        this.props.ethEnable()\n    }\n}\n\nAddressListContainer.propTypes = {\n    web3: PropTypes.object,\n    ownAddressIds: PropTypes.array.isRequired,\n    watchAddressIds: PropTypes.array.isRequired,\n}\n\nAddressListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => {\n    const ownAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_OWNED))\n    const watchAddressIds = state.addresses.allIds.filter(id => (state.addresses.byId[id].type === ADDRESS_TYPE_EXTERNAL))\n    return {\n        ownAddressIds,\n        watchAddressIds,\n        web3Instance: state.web3Instance ? state.web3Instance : null,\n        web3: state.web3Instance ? state.web3Instance.web3 : null,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    changeOwnAddresses: (accounts) => {\n        dispatch(changeOwnAddresses(accounts))\n    },\n    ethEnable: () => {\n        dispatch(requestEthEnable())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddressListContainer)\n","import React from 'react'\nimport AddressListContainer from '../address/AddressListContainer'\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst Accounts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Accounts'}/>\n            <AddressListContainer />\n        </React.Fragment>\n    )\n}\n\nexport default Accounts\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Form} from 'semantic-ui-react'\nimport AddressDisplay from '../common/AddressDisplay'\n\nconst SelectableToken = (props) => {\n\n    const {address, ensName, name, symbol, checked, onChange} = props\n\n    return (\n        <Table.Row>\n            <Table.Cell collapsing>\n                <Form.Checkbox checked={checked} onChange={onChange}/>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{name}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <strong>{symbol}</strong>\n            </Table.Cell>\n            <Table.Cell>\n                <AddressDisplay address={address} ensName={ensName}/>\n            </Table.Cell>\n        </Table.Row>\n    )\n}\n\nSelectableToken.propTypes = {\n    id: PropTypes.string.isRequired,\n    checked: PropTypes.bool,\n    address: PropTypes.string.isRequired,\n    ensName: PropTypes.string,\n    name: PropTypes.string.isRequired,\n    symbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nexport default SelectableToken\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from \"react-redux\"\nimport SelectableToken from \"./SelectableToken\"\nimport {changeTokenTrackingThunk} from './tokenActions'\n\n\nclass SelectableTokenContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    handleChange(e, data) {\n        const {checked} = data\n        this.props.onChange(this.props.tokenId, checked)\n    }\n\n    render() {\n        return <SelectableToken id={this.props.tokenId}\n                                address={this.props.tokenAddress}\n                                name={this.props.tokenName}\n                                symbol={this.props.tokenSymbol}\n                                onChange={this.handleChange}\n                                checked={this.props.tokenTracked}\n        />\n    }\n}\n\nSelectableTokenContainer.propTypes = {\n    tokenId: PropTypes.string.isRequired,\n    tokenAddress: PropTypes.string.isRequired,\n    tokenName: PropTypes.string.isRequired,\n    tokenSymbol: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n}\n\nSelectableTokenContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const token = state.tokens.byId[ownProps.tokenId]\n    const tracked = (state.tokens.trackedIds.indexOf(ownProps.tokenId) > -1)\n    return {\n        tokenAddress: token.address,\n        tokenName: token.name,\n        tokenSymbol: token.symbol,\n        tokenTracked: tracked,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (tokenId, checked) => {\n        dispatch(changeTokenTrackingThunk(tokenId, checked))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types';\nimport {Table, Message} from 'semantic-ui-react'\nimport SelectableTokenContainer from \"./SelectableTokenContainer\"\n\nconst SelectableTokenList = (props) => {\n\n    const {tokenList} = props\n\n    if (tokenList.length) {\n        return (\n            <Table celled>\n                <Table.Body>\n                {tokenList.map((tokenId) => <SelectableTokenContainer\n                    key={tokenId}\n                    tokenId={tokenId}\n                />)}\n                </Table.Body>\n            </Table>\n        )\n    } else {\n        return (\n            <Message negative>\n                <Message.Header>No token contracts to display.</Message.Header>\n                <Message.Content>Things you can try:</Message.Content>\n                <Message.List items={['change/clear the filterstring', 'check if you are connected to the correct network']}>\n                </Message.List>\n            </Message>\n        )\n    }\n}\n\nSelectableTokenList.propTypes = {\n    tokenList: PropTypes.array.isRequired\n}\n\nexport default SelectableTokenList\n","import React, {Component} from 'react'\nimport {connect} from \"react-redux\"\nimport {Grid, Divider, Checkbox, Pagination, Container, Dropdown} from 'semantic-ui-react'\nimport TokenListFilterContainer from './TokenListFilterContainer'\nimport SelectableTokenList from \"./SelectableTokenList\"\nimport {changeTokenListPage, clearTokenList, setFilterProps} from './tokenActions'\n\nclass SelectableTokenListContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.handleShowOnlyTrackedChange = this.handleShowOnlyTrackedChange.bind(this)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n        this.handleLoadTokens = this.handleLoadTokens.bind(this)\n    }\n\n    handleShowOnlyTrackedChange(e, data) {\n        const {checked} = data\n        this.props.setShowTracked(checked)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTokenListPage(activePage)\n    }\n\n    handleLoadTokens() {\n        this.props.clearTokenList()\n    }\n\n    render() {\n        let pager = null\n        if (this.props.totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                        <Pagination activePage={this.props.activePage}\n                                    onPageChange={this.handlePaginationChange}\n                                    totalPages={this.props.totalPages}/>\n                    </Container>\n        }\n        return (\n            <React.Fragment>\n                <Grid verticalAlign='middle' columns={2} divided>\n                    <Grid.Row>\n                        <Grid.Column width={6}>\n                            <Checkbox toggle label='Only show tracked token' checked={this.props.showOnlyTracked} onChange={this.handleShowOnlyTrackedChange} />\n                        </Grid.Column>\n                        <Grid.Column width={9}>\n                            <TokenListFilterContainer target={'tokenlist'}/>\n                        </Grid.Column>\n                        <Grid.Column width={1}>\n                            <Dropdown icon={'setting'}>\n                                <Dropdown.Menu>\n                                    <Dropdown.Item text='Reload token list' onClick={this.handleLoadTokens} />\n                                </Dropdown.Menu>\n                            </Dropdown>\n                        </Grid.Column>\n                    </Grid.Row>\n                </Grid>\n                <Divider/>\n                <SelectableTokenList\n                    tokenList={this.props.tokenIds}\n                />\n                {pager}\n            </React.Fragment>\n            )\n    }\n}\n\nconst mapStateToProps = state => {\n    const listState = state.tokens.listState.listState\n    const itemsPerPage = 20\n    let totalPages = 1\n    const activePage = state.tokens.listState.activePage\n    const filterIsActive = state.tokens.listState.filterIsActive\n    let tokenIds = filterIsActive ? state.tokens.listState.matchedTokenIds : state.tokens.allIds\n    const showOnlyTracked = state.tokens.listState.showOnlyTracked\n    const numVisibleTokens = tokenIds.length\n    if (numVisibleTokens) {\n        totalPages = Math.ceil(numVisibleTokens / itemsPerPage)\n    }\n    const sliceStart = (activePage-1)*itemsPerPage\n    tokenIds = tokenIds.slice(sliceStart, sliceStart+itemsPerPage)\n    return {\n        tokenIds,\n        showOnlyTracked,\n        activePage,\n        totalPages,\n        listState,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setShowTracked: (showOnlyTracked) => {\n        dispatch(setFilterProps({showOnlyTracked}))\n    },\n    setTokenListPage: (activePage) => {\n        dispatch(changeTokenListPage(activePage))\n    },\n    clearTokenList: () => {\n        dispatch(clearTokenList())\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectableTokenListContainer)\n","import React from 'react'\nimport {Icon, Message} from 'semantic-ui-react'\nimport SelectableTokenListContainer from \"../token/SelectableTokenListContainer\"\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst TokenContracts = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Manage Token Contracts'}/>\n            <Message info icon>\n                <Icon name={'info'}/>\n                <Message.Header>Select which tokens to track</Message.Header>\n                <Message.Content>\n                    In the list below, check the tokens you want to keep track of. Use the filter to\n                    quickly find specific tokens. You can filter by token name, symbol or contract address.\n                </Message.Content>\n            </Message>\n            <SelectableTokenListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default TokenContracts\n","import React, {Component} from 'react'\nimport {Container, Dropdown, Form, Grid} from 'semantic-ui-react'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport {connect} from 'react-redux'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventFilterContainer extends Component {\n\n    render() {\n        const {\n            tokenOptions, selectedTokenId, onTokenSelect,\n            addressOptions, selectedAddressId, onAddressSelect,\n        } = this.props\n\n        return (\n            <Container>\n\n            <Grid>\n                <Grid.Row>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>Show Transfers of token:</label>\n                                <Dropdown fluid search selection\n                                          options={tokenOptions}\n                                          onChange={onTokenSelect}\n                                          value={selectedTokenId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                    <Grid.Column width={8}>\n                        <Form>\n                            <Form.Field inline>\n                                <label>To/From Account:</label>\n                                <Dropdown fluid search selection\n                                          options={addressOptions}\n                                          onChange={onAddressSelect}\n                                          value={selectedAddressId}\n                                />\n                            </Form.Field>\n                        </Form>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n            </Container>\n        )\n    }\n}\n\nEventFilterContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventFilterContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n\n    const selectedTokenId = state.tokens.selector.selectedTokenId\n    const tokenOptions = state.tokens.trackedIds.map(id => (\n        {\n            key: id,\n            value: id,\n            text: state.tokens.byId[id].name + \" (\" + state.tokens.byId[id].symbol + \")\"\n        }\n    ))\n    tokenOptions.sort((a, b) => (a.text > b.text))\n\n    const selectedAddressId = state.addresses.selector.selectedAddressId\n    const addressOptions = state.addresses.allIds.map(id =>\n        ({\n            key: id,\n            value: id,\n            text: state.addresses.byId[id].ensName ? state.addresses.byId[id].ensName : id\n        })\n    )\n    addressOptions.sort((a, b) => (a.text > b.text))\n\n    return {\n        tokenOptions,\n        selectedTokenId,\n        addressOptions,\n        selectedAddressId\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onTokenSelect: (e, {value}) => {\n            dispatch(changeSelectorTokenIdThunk(value))\n        },\n        onAddressSelect: (e, {value}) => {\n            dispatch(changeSelectorAddressId(value))\n        },\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventFilterContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Button, Grid, Icon, Message, } from 'semantic-ui-react'\n\nconst EventLoader = (props) => {\n    const {loading, loadingFromBlock, loadingToBlock, resultCount, resultFromBlock, currentChunk, maxChunks,\n        resultToBlock, onLoadMore, canLoadMore} = props\n\n    let button = <Button icon disabled={!canLoadMore} onClick={onLoadMore} labelPosition={'left'}><Icon name={'search'}/>Load more</Button>\n\n    if (loading) {\n        button = <Message warning icon>\n                    <Icon loading name={'circle notched'}/>\n            <Message.Content>\n                <Message.Header>Loading events</Message.Header>\n                Scanning {loadingFromBlock} - {loadingToBlock} - Chunk {currentChunk}/{maxChunks}\n            </Message.Content>\n        </Message>\n    }\n\n    return (\n        <Grid verticalAlign='middle' columns={2}>\n            <Grid.Row>\n                <Grid.Column >\n                    <Message info icon>\n                        <Icon name={'exchange'}/>\n                        <Message.Content>\n                            <Message.Header>Showing {resultCount} transfer events</Message.Header>\n                             Block {resultFromBlock} to {resultToBlock}\n                        </Message.Content>\n                    </Message>\n                </Grid.Column>\n                <Grid.Column>\n                    {button}\n                </Grid.Column>\n            </Grid.Row>\n        </Grid>\n    )\n}\n\nEventLoader.propTypes = {\n    loading: PropTypes.bool.isRequired,\n    loadingFromBlock: PropTypes.number,\n    loadingToBlock: PropTypes.number,\n    loadingCurrentBlock: PropTypes.number,\n    resultCount: PropTypes.number.isRequired,\n    resultFromBlock: PropTypes.number.isRequired,\n    resultFromBlockDate: PropTypes.string.isRequired,\n    resultToBlock: PropTypes.number.isRequired,\n    onLoadMore: PropTypes.func.isRequired,\n    currentChunk: PropTypes.number.isRequired,\n    maxChunks: PropTypes.number.isRequired,\n    canLoadMore: PropTypes.bool.isRequired,\n}\n\nEventLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default EventLoader\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport EventLoader from './EventLoader'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport {loadTokenTransferEvents} from '../token/tokenActions'\n\n\nclass EventLoaderContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.loadMoreEvents = this.loadMoreEvents.bind(this)\n    }\n\n    componentDidMount() {\n        EventLoaderContainer.checkEventsLoaded(this.props)\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventLoaderContainer.checkEventsLoaded(newProps)\n    }\n\n    static checkEventsLoaded(props) {\n        if (props.currentBlock && props.aceId && (props.hasAceEntry === false)) {\n            // I have an aceID, but no according entry. Better start loading...\n            //const rangeEnd = props.currentBlock\n            //const rangeStart = rangeEnd - 10000\n            console.log(\"Loading events \"/* + rangeStart + \"-\" + rangeEnd*/)\n            props.loadTokenTransferEvents(\n                0,\n                0,\n                props.tokenId,\n                props.addressId\n            )\n        }\n    }\n\n    loadMoreEvents() {\n        // query the previous 1000 blocks for token transfers to/from my addresses\n        const rangeEnd = this.props.resultFromBlock ? this.props.resultFromBlock : this.props.currentBlock\n        const rangeStart = rangeEnd - 10000\n        console.log(\"Loading events \" + rangeStart + \"-\" + rangeEnd)\n        this.props.loadTokenTransferEvents(\n            rangeStart,\n            rangeEnd,\n            this.props.tokenId,\n            this.props.addressId\n        )\n    }\n\n    render() {\n        const {\n            loading, resultCount, resultFromBlock, resultFromBlockDate, resultToBlock, canLoadMore,\n            loadingFromBlock, loadingToBlock, loadingCurrentBlock, currentChunk, maxChunks } = this.props\n        return (\n            <EventLoader\n                loading={loading}\n                resultCount={resultCount}\n                resultFromBlock={resultFromBlock}\n                resultFromBlockDate={resultFromBlockDate}\n                resultToBlock={resultToBlock}\n                onLoadMore={this.loadMoreEvents}\n                loadingFromBlock={loadingFromBlock}\n                loadingToBlock={loadingToBlock}\n                loadingCurrentBlock={loadingCurrentBlock}\n                currentChunk={currentChunk}\n                maxChunks={maxChunks}\n                canLoadMore={canLoadMore}\n            />\n        )\n    }\n}\n\nEventLoaderContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventLoaderContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    let resultCount = 0\n    let loading = false\n    let resultFromBlock = 0\n    let resultToBlock = 0\n    let resultFromBlockDate = 'XXX'\n    let aceId = undefined\n    let aceEntry = undefined\n    let loadingFromBlock = 0\n    let loadingToBlock = 0\n    let loadingCurrentBlock = 0\n    let tokenId = state.tokens.selector.selectedTokenId\n    // make sure selected token is actually existing and being tracked. Might be an old token from\n    // browser localstorage or from another network\n    if ((state.tokens.allIds.indexOf(tokenId) === -1) || (state.tokens.trackedIds.indexOf(tokenId) ===-1))\n    {\n        tokenId = undefined\n    }\n    const addressId = state.addresses.selector.selectedAddressId\n    const currentBlock = state.web3Instance.block.number\n    const currentChunk = state.events.listState.currentChunk\n    const maxChunks = state.events.listState.maxChunks\n    const canLoadMore = Boolean(tokenId && addressId)\n    if (tokenId && addressId) {\n        aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n        if (aceEntry) {\n            // okay, entry existing. Now look at checked block range\n            resultFromBlock = aceEntry.firstBlock\n            resultToBlock = aceEntry.lastBlock\n            resultCount = aceEntry.eventIds.length\n            // is aceEntry currently being loaded?\n            loading = aceEntry.isLoading\n            loadingFromBlock = aceEntry.loadingFromBlock\n            loadingToBlock = aceEntry.loadingToBlock\n            loadingCurrentBlock = aceEntry.loadingCurrentBlock\n        }\n    }\n\n    return {\n        loading,\n        resultCount,\n        resultFromBlock,\n        resultFromBlockDate,\n        resultToBlock,\n        currentBlock,\n        tokenId,\n        addressId,\n        aceId,\n        hasAceEntry: Boolean(aceEntry),\n        loadingToBlock,\n        loadingFromBlock,\n        loadingCurrentBlock,\n        currentChunk,\n        maxChunks,\n        canLoadMore\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenTransferEvents: (firstBlock, lastBlock, tokenId, addressId) => {\n        dispatch(loadTokenTransferEvents(tokenId, firstBlock, lastBlock, [addressId]))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventLoaderContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Popup} from 'semantic-ui-react'\n\nconst TxHashDisplay = (props) => {\n    const {txHash} = props\n    const shortHash = txHash.slice(0, 10).concat('...')\n    const trigger = <span>{shortHash}</span>\n    return (\n        <Popup\n            trigger={trigger}\n            content={txHash}\n        />\n    )\n}\n\nTxHashDisplay.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    txHash: PropTypes.string.isRequired\n}\n\n\nexport default TxHashDisplay\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Table} from 'semantic-ui-react'\nimport TxHashDisplay from '../common/TxHashDisplay'\nimport AddressDisplay from '../common/AddressDisplay'\nimport Balance from '../balance/Balance'\n\nexport const TRANSFER_EVENT_TYPES = {\n    NEUTRAL: 'neutral',\n    POSITIVE: 'postivie',\n    NEGATIVE: 'negative'\n}\n\nconst TransferEvent = (props) => {\n    const {txHash, blockNumber, from, fromENS, to, toENS, type, decimals, quantity} = props\n    let icon = null\n    let positive = false\n    let negative = false\n    switch(type) {\n        case TRANSFER_EVENT_TYPES.POSITIVE:\n            icon = <Icon name='plus' color='green' circular/>\n            positive = true\n            break\n        case TRANSFER_EVENT_TYPES.NEGATIVE:\n            icon = <Icon name='minus' color='red' circular/>\n            negative = true\n            break\n        case TRANSFER_EVENT_TYPES.NEUTRAL:\n        default:\n            // no icon, neither positive nor negative hint\n    }\n\n    return (\n        <React.Fragment>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>#: </Table.Cell>\n                <Table.Cell><strong>{blockNumber}</strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>From: </Table.Cell>\n                <Table.Cell><AddressDisplay address={from} ensName={fromENS}/></Table.Cell>\n                <Table.Cell rowSpan='2' textAlign={'right'}>{icon}</Table.Cell>\n                <Table.Cell rowSpan='2' positive={positive} negative={negative} textAlign={'right'}>\n                    <Balance amount={quantity} numDecimals={decimals}/>\n                </Table.Cell>\n            </Table.Row>\n            <Table.Row>\n                <Table.Cell textAlign={'right'}>Tx: </Table.Cell>\n                <Table.Cell><strong><TxHashDisplay txHash={txHash}/></strong></Table.Cell>\n                <Table.Cell textAlign={'right'}>To: </Table.Cell>\n                <Table.Cell><AddressDisplay address={to} ensName={toENS}/></Table.Cell>\n            </Table.Row>\n        </React.Fragment>\n    )\n}\n\nTransferEvent.propTypes = {\n    txHash: PropTypes.string.isRequired,\n    blockNumber: PropTypes.number.isRequired,\n    from: PropTypes.string.isRequired,\n    to: PropTypes.string.isRequired,\n    fromENS: PropTypes.string,\n    toENS: PropTypes.string,\n    type: PropTypes.oneOf([\n        TRANSFER_EVENT_TYPES.NEUTRAL,\n        TRANSFER_EVENT_TYPES.POSITIVE,\n        TRANSFER_EVENT_TYPES.NEGATIVE\n    ]).isRequired,\n    quantity: PropTypes.object.isRequired, // BigNum\n}\n\nTransferEvent.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEvent\n","import React, {PureComponent} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport TransferEvent, {TRANSFER_EVENT_TYPES} from './TransferEvent'\n\nclass TransferEventContainer extends PureComponent {\n    render() {\n        const {txHash, blockNumber, from, to, type, quantity, positive, negative, decimals} = this.props\n        return (\n            <TransferEvent blockNumber={blockNumber}\n                           from={from}\n                           to={to}\n                           quantity={quantity}\n                           txHash={txHash}\n                           type={type}\n                           positive={positive}\n                           negative={negative}\n                           decimals={decimals}\n            />\n        )\n    }\n}\n\nTransferEventContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventId: PropTypes.string.isRequired,\n}\n\nTransferEventContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state, ownProps) => {\n    const transferEvent = state.events.byId[ownProps.transferEventId]\n    const addressId = state.addresses.selector.selectedAddressId\n    const rawEvent = transferEvent.transferEvent\n    const token = state.tokens.byId[transferEvent.tokenId]\n    const quantity = rawEvent.args._value\n    const from = rawEvent.args._from.toLowerCase()\n    const to = rawEvent.args._to.toLowerCase()\n    // events that are not to/from one of the watched accounts are neutral\n    let type = TRANSFER_EVENT_TYPES.NEUTRAL\n    if (addressId) {\n        // check if transfer is to/from own address\n        type = addressId.toLowerCase() === from ? TRANSFER_EVENT_TYPES.NEGATIVE : TRANSFER_EVENT_TYPES.POSITIVE\n    }\n    return {\n        txHash: rawEvent.transactionHash,\n        blockNumber: rawEvent.blockNumber,\n        from,\n        to,\n        type,\n        quantity,\n        decimals: token.decimals,\n    }\n}\n\nexport default connect(mapStateToProps)(TransferEventContainer)\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Table} from 'semantic-ui-react'\nimport TransferEventContainer from './TransferEventContainer'\n\nconst TransferEventsList = (props) => {\n    return (\n        <Table compact>\n            <Table.Header>\n                <Table.Row>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>Block#/TransactionHash</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'center'}>From/To</Table.HeaderCell>\n                    <Table.HeaderCell colSpan='2' textAlign={'right'}>Quantity</Table.HeaderCell>\n                </Table.Row>\n            </Table.Header>\n\n            <Table.Body>\n                {props.transferEventIds.map(transferEventId =>\n                    <TransferEventContainer key={transferEventId}\n                                            transferEventId={transferEventId}\n                    />\n                )}\n            </Table.Body>\n        </Table>\n    )\n}\n\nTransferEventsList.propTypes = {\n    //myProp: PropTypes.object.isRequired\n    transferEventIds: PropTypes.array.isRequired,\n}\n\nTransferEventsList.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default TransferEventsList\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {buildAddressContractEventId} from './reducers/addressContractEventsByIdReducer'\nimport TransferEventsList from './TransferEventsList'\nimport {Container, Pagination} from 'semantic-ui-react'\nimport {changeTransferEventListPage} from './eventActions'\n\nclass TransferEventsListContainer extends Component {\n\n    constructor(props, context) {\n        super(props, context)\n        this.handlePaginationChange = this.handlePaginationChange.bind(this)\n    }\n\n    handlePaginationChange(e, data) {\n        const {activePage} = data\n        this.props.setTransferEventListPage(activePage)\n    }\n\n    render() {\n        const {aceEventIds, totalPages, activePage} = this.props\n\n        let pager = null\n        if (totalPages > 1) {\n            pager = <Container textAlign={'center'}>\n                <Pagination activePage={activePage}\n                            onPageChange={this.handlePaginationChange}\n                            totalPages={totalPages}/>\n            </Container>\n        }\n\n        return (\n            <React.Fragment>\n                <TransferEventsList transferEventIds={aceEventIds}/>\n                {pager}\n            </React.Fragment>\n        )\n    }\n}\n\nTransferEventsListContainer.propTypes = {\n    token: PropTypes.object\n}\n\nTransferEventsListContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = (state) => {\n    const tokenId = state.tokens.selector.selectedTokenId\n    const addressId = state.addresses.selector.selectedAddressId\n    const activePage = state.events.listState.activePage\n\n    const itemsPerPage = 15\n    let totalPages = 1\n    let aceEntry = undefined\n    let aceEventIds = []\n\n    // first try to get aceEntry\n    if (tokenId && addressId) {\n        const aceId = buildAddressContractEventId(addressId, tokenId)\n        aceEntry = state.events.aceById[aceId]\n    }\n\n    // if there is an aceEntry get actual events and prepare paginator\n    if (aceEntry) {\n        aceEventIds = aceEntry.eventIds\n        totalPages = Math.ceil(aceEventIds.length / itemsPerPage)\n        const sliceStart = (activePage-1)*itemsPerPage\n        aceEventIds = aceEventIds.slice(sliceStart, sliceStart+itemsPerPage)\n    }\n\n    return {\n        aceEventIds,\n        activePage,\n        totalPages,\n    }\n}\n\nconst mapDispatchToProps = dispatch => ({\n    setTransferEventListPage: (activePage) => {\n        dispatch(changeTransferEventListPage(activePage))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TransferEventsListContainer)\n","import React from 'react'\nimport EventFilterContainer from '../event/EventFilterContainer'\nimport EventLoaderContainer from '../event/EventLoaderContainer'\nimport TransferEventsListContainer from '../event/TransferEventsListContainer'\nimport ScreenHeader from '../layout/ScreenHeader'\n\nconst Events = () => {\n    return (\n        <React.Fragment>\n            <ScreenHeader title={'Transfer Events'}/>\n            <EventFilterContainer/>\n            <EventLoaderContainer/>\n            <TransferEventsListContainer/>\n        </React.Fragment>\n    )\n}\n\nexport default Events\n","import React, {Component} from 'react'\nimport {connect} from 'react-redux'\nimport {changeSelectorTokenIdThunk} from '../token/tokenActions'\nimport Events from './Events'\nimport {changeSelectorAddressId} from '../address/addressActions'\n\nclass EventsContainer extends Component {\n    constructor(props, context) {\n        super(props, context)\n        EventsContainer.mapRouteParamsToState(props)\n    }\n\n    /* If route params contain tokenId and/or address trigger according actions to have them in store */\n    static mapRouteParamsToState(props) {\n        if (props.match.params.tokenId) {\n            props.setSelectedToken(props.match.params.tokenId)\n            if (props.match.params.address) {\n                props.setSelectedAddress(props.match.params.address)\n            } else {\n                // if a token is provided, but no address -> make sure to display events of all watched addresses\n                props.setSelectedAddress(undefined)\n            }\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        EventsContainer.mapRouteParamsToState(newProps)\n    }\n\n    render() {\n        return <Events/>\n    }\n}\n\nEventsContainer.propTypes = {\n    //myProp: PropTypes.object.isRequired\n}\n\nEventsContainer.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nconst mapStateToProps = state => ({})\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedToken: (tokenId) => {\n        dispatch(changeSelectorTokenIdThunk(tokenId))\n    },\n    setSelectedAddress: (address) => {\n        dispatch(changeSelectorAddressId(address))\n    }\n})\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EventsContainer)\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Icon, Message} from 'semantic-ui-react'\n\nconst NetworkWarning = (props) => {\n    const {networkId, networkName} = props\n\n    return(\n        <Message size={'small'} icon warning>\n            <Icon name='warning' />\n            <Message.Content>\n                <Message.Header>\n                    You are not connected to mainnet!\n                </Message.Header>\n                Your current network: {networkName} (ID: {networkId})\n            </Message.Content>\n        </Message>\n    )\n}\n\nNetworkWarning.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired\n}\n\n\nexport default NetworkWarning\n","import React, {Component} from 'react'\nimport PropTypes from 'prop-types'\nimport connect from 'react-redux/es/connect/connect'\nimport NetworkWarning from './NetworkWarning'\nimport Grid from 'semantic-ui-react/dist/es/collections/Grid/Grid'\n\nclass NetworkWarningController extends Component {\n    render() {\n        const {networkId, networkName} = this.props\n        if (networkId === 1) {\n            // mainnet. No need for a warning!\n            return null\n        }\n\n        return (\n            <Grid.Row>\n                <NetworkWarning networkId={networkId} networkName={networkName}/>\n            </Grid.Row>\n        )\n    }\n}\n\nNetworkWarningController.propTypes = {\n    networkId: PropTypes.number.isRequired,\n    networkName: PropTypes.string.isRequired,\n}\n\nconst mapStateToProps = state => {\n    return {\n        networkId: state.web3Instance.id,\n        networkName: state.web3Instance.name,\n    }\n}\n\nexport default connect(mapStateToProps)(NetworkWarningController)\n","import React, {Component} from 'react'\nimport OverviewContainer from '../segments/OverviewContainer'\nimport Web3Container from '../web3/web3Container'\nimport {Grid} from 'semantic-ui-react'\nimport {Route, Switch} from 'react-router-dom'\nimport Sidebar from '../segments/Sidebar'\nimport Accounts from '../segments/Accounts'\nimport TokenContracts from '../segments/TokenContracts'\nimport EventsContainer from '../segments/EventsContainer'\nimport NetworkWarningController from '../web3/NetworkWarningController'\n\nclass LayoutContainer extends Component {\n    render() {\n        const NoMatch = ({ location }) => (\n            <div>\n                <h3>No match for <code>{location.pathname}</code></h3>\n            </div>\n        )\n\n        return (\n            <Grid padded={'vertically'}>\n                <NetworkWarningController/>\n                <Grid.Row>\n                    <Grid.Column width={4} /*style={{ backgroundColor: 'rgb(27, 28, 29)' }}*/>\n                        <Sidebar/>\n                    </Grid.Column>\n                    <Grid.Column width={12}>\n                        <Switch>\n                            <Route exact path='/' component={OverviewContainer}/>\n                            <Route exact path='/overview/' component={OverviewContainer}/>\n                            <Route path='/accounts/' component={Accounts}/>\n                            <Route path='/events/:tokenId/:address' component={EventsContainer}/>\n                            <Route path='/events/:tokenId/' component={EventsContainer}/>\n                            <Route path='/events/' component={EventsContainer}/>\n                            <Route path='/tokenContracts/' component={TokenContracts}/>\n\n                            <Route component={NoMatch} />\n                        </Switch>\n                    </Grid.Column>\n                </Grid.Row>\n                <Grid.Row>\n                    <Grid.Column width={16}>\n                        <Web3Container/>\n                    </Grid.Column>\n                </Grid.Row>\n            </Grid>\n        )\n    }\n}\n\nexport default LayoutContainer\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {Header, Icon, Modal} from 'semantic-ui-react'\n\nconst ModalLoader = (props) => {\n    const {content} = props\n    return (\n        <Modal open={true}>\n            <Header>\n                <Icon loading name={'spinner'}></Icon>\n                <Header.Content>\n                    {content}\n                </Header.Content>\n            </Header>\n        </Modal>\n    )\n}\n\nModalLoader.propTypes = {\n    content: PropTypes.string.isRequired\n}\n\nModalLoader.defaultProps = {\n    //myProp: <defaultValue>\n}\n\nexport default ModalLoader\n","import React, {Component, Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {loadTokenList, TOKEN_LIST_STATES} from './tokenActions'\nimport ModalLoader from '../common/ModalLoader'\n\nclass TokenLoaderGate extends Component {\n    constructor(props, context) {\n        super(props, context)\n        this.tokenListUrl = \"/tokens_1.json\"\n    }\n\n    componentDidMount() {\n        if (this.props.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(this.props)\n        }\n    }\n\n    componentWillReceiveProps(newProps) {\n        if (newProps.listState === TOKEN_LIST_STATES.VIRGIN) {\n            this.loadTokenList(newProps)\n        }\n    }\n\n    loadTokenList(props) {\n        if (props.networkId >=1 ) {\n            const url = \"/tokens_\" + props.networkId + \".json\"\n            props.loadTokenList(url)\n        }\n    }\n\n    render() {\n        if (this.props.listState === TOKEN_LIST_STATES.INITIALIZED)\n        {\n            // Load the dapp.\n            return Children.only(this.props.children)\n        }\n\n        return(\n            // Display a loading indicator.\n            <ModalLoader content={\"Loading token contracts\"}/>\n        )\n    }}\n\nTokenLoaderGate.propTypes = {\n    listState: PropTypes.string\n}\n\nconst mapStateToProps = (state) => ({\n    listState: state.tokens.listState.listState,\n    networkId: state.web3Instance.id,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    loadTokenList: (url) => {\n        dispatch(loadTokenList(url))\n    },\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TokenLoaderGate)\n","import React, {Children} from 'react'\nimport PropTypes from 'prop-types'\nimport {WEB3_STATES} from './web3Actions'\nimport ModalLoader from '../common/ModalLoader'\nimport {Button, Icon, Modal} from 'semantic-ui-react'\n\nconst Web3Gate = (props) => {\n    const {state, onRetry, children} = props\n\n    switch (state) {\n        case WEB3_STATES.INITIALIZED: {\n            // Gateway passed, render actual content.\n            return Children.only(children)\n        }\n        case WEB3_STATES.ERROR:\n            return (\n                <Modal open={true}>\n                    <Modal.Header>\n                        <Icon name='exclamation'/> No web3 found\n                    </Modal.Header>\n                    <Modal.Content>\n                        <p>Failed to initialize web3. Please enable web3 in your browser, e.g by using the Metamask extension.</p>\n                        <p><Button onClick={onRetry}>Retry</Button></p>\n                    </Modal.Content>\n                </Modal>\n\n            )\n        case WEB3_STATES.LOADING:\n        default: {\n            return (\n                <ModalLoader content={'Waiting on web3 initialization'}/>\n            )\n        }\n    }\n}\n\nWeb3Gate.propTypes = {\n    state: PropTypes.string.isRequired,\n    onRetry: PropTypes.func.isRequired,\n    children: PropTypes.object.isRequired,\n}\n\nexport default Web3Gate\n","import React, {Component} from 'react'\nimport {initialize, stopBlockFilter} from './web3Actions'\nimport {connect} from 'react-redux'\nimport Web3Gate from './web3Gate'\n\nclass Web3GateContainer extends Component {\n\n    componentDidMount() {\n        this.props.initialize()\n    }\n\n    componentWillUnmount() {\n        // Stop listening to new block events\n        this.props.stopBlockFilter()\n    }\n\n    onRetry = () => {\n        this.props.initialize()\n    }\n\n    render() {\n        const {state, children} = this.props\n        return <Web3Gate state={state} onRetry={this.onRetry} children={children}/>\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    state: state.web3Instance.state,\n})\n\nconst mapDispatchToProps = dispatch => ({\n    initialize: () => {\n        dispatch(initialize())\n    },\n    stopBlockFilter: () => {\n        dispatch(stopBlockFilter())\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Web3GateContainer)\n","import {Component, Children} from 'react'\nimport {connect} from 'react-redux'\nimport {getLocalData, SELECTED_TOKEN_KEY, TRACKED_TOKEN_KEYS, WATCHED_ADDRESSES} from \"./localStorageWrapper\"\nimport {changeSelectorTokenId, changeTokenTracking, loadMultiTokenBalances} from \"../modules/token/tokenActions\"\nimport {addAddress, ADDRESS_TYPE_EXTERNAL} from \"../modules/address/addressActions\"\n\nclass LocalStorageGate extends Component {\n\n    componentDidMount() {\n        const {knownTokens} = this.props\n        // Get tracked tokens from localstorage\n        const storedTrackedTokens = getLocalData(TRACKED_TOKEN_KEYS, []);\n        // remove tokenIDs that are not known\n        const trackedTokens = storedTrackedTokens.filter(token => (knownTokens.indexOf(token) >= 0))\n        trackedTokens.forEach((tokenId) => {\n            this.props.changeTokenTracking(tokenId)\n        })\n\n        // get selected token from localstorage\n        const selectedTokendId = getLocalData(SELECTED_TOKEN_KEY, null)\n        if ((selectedTokendId) && (knownTokens.indexOf(selectedTokendId)>=0)) {\n            this.props.changeSelectorTokenId(selectedTokendId)\n        }\n\n        // Get watched addresses from localstorage\n        const watchedAddresses = getLocalData(WATCHED_ADDRESSES, [])\n        watchedAddresses.forEach((addressEntry) => {\n            this.props.addAddress(addressEntry.address, addressEntry.ensName)\n            // load balance for all tracked tokens\n            // TODO: This is the totally wrong place to trigger balance reloading!\n            this.props.loadMultiTokenBalances(trackedTokens, addressEntry.address)\n        })\n    }\n\n    render() {\n        // Load the dapp.\n        return Children.only(this.props.children)\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    knownTokens: state.tokens.allIds\n})\n\nconst mapDispatchToProps = dispatch => ({\n    changeTokenTracking: (tokenId) => {\n        dispatch(changeTokenTracking(tokenId, true))\n    },\n    changeSelectorTokenId: (tokenId) => {\n        dispatch(changeSelectorTokenId(tokenId))\n    },\n    addAddress: (address, ensName) => {\n        dispatch(addAddress(address, ensName, ADDRESS_TYPE_EXTERNAL))\n    },\n    loadMultiTokenBalances: (trackedTokens, address) => {\n        dispatch(loadMultiTokenBalances(trackedTokens, address))\n    }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocalStorageGate)\n","import React, {Component} from 'react'\nimport {Provider} from 'react-redux'\nimport { BrowserRouter } from 'react-router-dom'\nimport configureStore from './store'\nimport {Container} from 'semantic-ui-react'\nimport ModalRoot from './modules/modal/ModalRoot'\nimport LayoutContainer from './modules/layout/LayoutContainer'\nimport TokenLoaderGate from './modules/token/TokenLoaderGate'\nimport Web3GateContainer from './modules/web3/web3GateContainer'\nimport LocalStorageGate from \"./utils/LocalStorageGate\"\n\nlet {store} = configureStore()\n\nclass App extends Component {\n    render() {\n        return (\n            <Provider store={store}>\n                <Web3GateContainer>\n                    <TokenLoaderGate>\n                        <LocalStorageGate>\n                            <BrowserRouter>\n                                <Container>\n                                    <ModalRoot/>\n                                    <LayoutContainer/>\n                                </Container>\n                            </BrowserRouter>\n                        </LocalStorageGate>\n                    </TokenLoaderGate>\n                </Web3GateContainer>\n            </Provider>\n        )\n    }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nregisterServiceWorker();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 784;"],"sourceRoot":""}